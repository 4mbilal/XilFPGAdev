// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\RGB2GrayIP\RGB2Gray_ip_addr_decoder.v
// Created: 2021-04-13 20:09:23
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RGB2Gray_ip_addr_decoder
// Source Path: RGB2Gray_ip/RGB2Gray_ip_axi_lite/RGB2Gray_ip_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RGB2Gray_ip_addr_decoder
          (clk,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           data_read,
           write_axi_enable,
           write_axi4_stream_video_slave_image_width,
           write_axi4_stream_video_slave_image_height,
           write_axi4_stream_video_slave_hporch,
           write_axi4_stream_video_slave_vporch);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [12:0] write_axi4_stream_video_slave_image_width;  // ufix13
  output  [12:0] write_axi4_stream_video_slave_image_height;  // ufix13
  output  [12:0] write_axi4_stream_video_slave_hporch;  // ufix13
  output  [12:0] write_axi4_stream_video_slave_vporch;  // ufix13


  wire enb;
  wire decode_sel_ip_timestamp_1_1;  // ufix1
  wire decode_sel_axi4_stream_video_slave_vporch_1_1;  // ufix1
  wire decode_sel_axi4_stream_video_slave_hporch_1_1;  // ufix1
  wire decode_sel_axi4_stream_video_slave_image_height_1_1;  // ufix1
  wire decode_sel_axi4_stream_video_slave_image_width_1_1;  // ufix1
  wire decode_sel_axi_enable_1_1;  // ufix1
  wire [31:0] const_0;  // ufix32
  wire reg_enb_axi_enable_1_1;  // ufix1
  wire data_in_axi_enable;  // ufix1
  wire const_1;  // ufix1
  reg  data_reg_axi_enable_1_1;  // ufix1
  wire write_concats_axi_enable_1;  // ufix1
  wire [31:0] data_slice_axi_enable_1;  // ufix32
  wire [31:0] decode_rd_axi_enable_1_1;  // ufix32
  wire reg_enb_axi4_stream_video_slave_image_width_1_1;  // ufix1
  wire [12:0] data_in_axi4_stream_video_slave_image_width;  // ufix13
  reg [12:0] data_reg_axi4_stream_video_slave_image_width_1_1;  // ufix13
  wire [31:0] data_slice_axi4_stream_video_slave_image_width_1;  // ufix32
  wire [31:0] decode_rd_axi4_stream_video_slave_image_width_1_1;  // ufix32
  wire reg_enb_axi4_stream_video_slave_image_height_1_1;  // ufix1
  wire [12:0] data_in_axi4_stream_video_slave_image_height;  // ufix13
  reg [12:0] data_reg_axi4_stream_video_slave_image_height_1_1;  // ufix13
  wire [31:0] data_slice_axi4_stream_video_slave_image_height_1;  // ufix32
  wire [31:0] decode_rd_axi4_stream_video_slave_image_height_1_1;  // ufix32
  wire reg_enb_axi4_stream_video_slave_hporch_1_1;  // ufix1
  wire [12:0] data_in_axi4_stream_video_slave_hporch;  // ufix13
  reg [12:0] data_reg_axi4_stream_video_slave_hporch_1_1;  // ufix13
  wire [31:0] data_slice_axi4_stream_video_slave_hporch_1;  // ufix32
  wire [31:0] decode_rd_axi4_stream_video_slave_hporch_1_1;  // ufix32
  wire reg_enb_axi4_stream_video_slave_vporch_1_1;  // ufix1
  wire [12:0] data_in_axi4_stream_video_slave_vporch;  // ufix13
  reg [12:0] data_reg_axi4_stream_video_slave_vporch_1_1;  // ufix13
  wire [31:0] data_slice_axi4_stream_video_slave_vporch_1;  // ufix32
  wire [31:0] decode_rd_axi4_stream_video_slave_vporch_1_1;  // ufix32
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp_1_1;  // ufix32


  assign decode_sel_ip_timestamp_1_1 = addr_sel == 14'b00000000000110;



  assign decode_sel_axi4_stream_video_slave_vporch_1_1 = addr_sel == 14'b00000000000101;



  assign decode_sel_axi4_stream_video_slave_hporch_1_1 = addr_sel == 14'b00000000000100;



  assign decode_sel_axi4_stream_video_slave_image_height_1_1 = addr_sel == 14'b00000000000011;



  assign decode_sel_axi4_stream_video_slave_image_width_1_1 = addr_sel == 14'b00000000000010;



  assign decode_sel_axi_enable_1_1 = addr_sel == 14'b00000000000001;



  assign const_0 = 32'b00000000000000000000000000000000;



  assign reg_enb_axi_enable_1_1 = decode_sel_axi_enable_1_1 & wr_enb;



  assign data_in_axi_enable = data_write[0];



  assign const_1 = 1'b1;



  assign enb = const_1;

  always @(posedge clk or posedge reset)
    begin : reg_axi_enable_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi_enable_1_1 <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable_1_1) begin
          data_reg_axi_enable_1_1 <= data_in_axi_enable;
        end
      end
    end



  assign write_concats_axi_enable_1 = data_reg_axi_enable_1_1;



  assign data_slice_axi_enable_1 = {31'b0, write_concats_axi_enable_1};



  assign decode_rd_axi_enable_1_1 = (decode_sel_axi_enable_1_1 == 1'b0 ? const_0 :
              data_slice_axi_enable_1);



  assign reg_enb_axi4_stream_video_slave_image_width_1_1 = decode_sel_axi4_stream_video_slave_image_width_1_1 & wr_enb;



  assign data_in_axi4_stream_video_slave_image_width = data_write[12:0];



  always @(posedge clk or posedge reset)
    begin : reg_axi4_stream_video_slave_image_width_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi4_stream_video_slave_image_width_1_1 <= 13'b0011110000000;
      end
      else begin
        if (enb && reg_enb_axi4_stream_video_slave_image_width_1_1) begin
          data_reg_axi4_stream_video_slave_image_width_1_1 <= data_in_axi4_stream_video_slave_image_width;
        end
      end
    end



  assign data_slice_axi4_stream_video_slave_image_width_1 = {19'b0, data_reg_axi4_stream_video_slave_image_width_1_1};



  assign decode_rd_axi4_stream_video_slave_image_width_1_1 = (decode_sel_axi4_stream_video_slave_image_width_1_1 == 1'b0 ? decode_rd_axi_enable_1_1 :
              data_slice_axi4_stream_video_slave_image_width_1);



  assign reg_enb_axi4_stream_video_slave_image_height_1_1 = decode_sel_axi4_stream_video_slave_image_height_1_1 & wr_enb;



  assign data_in_axi4_stream_video_slave_image_height = data_write[12:0];



  always @(posedge clk or posedge reset)
    begin : reg_axi4_stream_video_slave_image_height_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi4_stream_video_slave_image_height_1_1 <= 13'b0010000111000;
      end
      else begin
        if (enb && reg_enb_axi4_stream_video_slave_image_height_1_1) begin
          data_reg_axi4_stream_video_slave_image_height_1_1 <= data_in_axi4_stream_video_slave_image_height;
        end
      end
    end



  assign data_slice_axi4_stream_video_slave_image_height_1 = {19'b0, data_reg_axi4_stream_video_slave_image_height_1_1};



  assign decode_rd_axi4_stream_video_slave_image_height_1_1 = (decode_sel_axi4_stream_video_slave_image_height_1_1 == 1'b0 ? decode_rd_axi4_stream_video_slave_image_width_1_1 :
              data_slice_axi4_stream_video_slave_image_height_1);



  assign reg_enb_axi4_stream_video_slave_hporch_1_1 = decode_sel_axi4_stream_video_slave_hporch_1_1 & wr_enb;



  assign data_in_axi4_stream_video_slave_hporch = data_write[12:0];



  always @(posedge clk or posedge reset)
    begin : reg_axi4_stream_video_slave_hporch_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi4_stream_video_slave_hporch_1_1 <= 13'b0000100011000;
      end
      else begin
        if (enb && reg_enb_axi4_stream_video_slave_hporch_1_1) begin
          data_reg_axi4_stream_video_slave_hporch_1_1 <= data_in_axi4_stream_video_slave_hporch;
        end
      end
    end



  assign data_slice_axi4_stream_video_slave_hporch_1 = {19'b0, data_reg_axi4_stream_video_slave_hporch_1_1};



  assign decode_rd_axi4_stream_video_slave_hporch_1_1 = (decode_sel_axi4_stream_video_slave_hporch_1_1 == 1'b0 ? decode_rd_axi4_stream_video_slave_image_height_1_1 :
              data_slice_axi4_stream_video_slave_hporch_1);



  assign reg_enb_axi4_stream_video_slave_vporch_1_1 = decode_sel_axi4_stream_video_slave_vporch_1_1 & wr_enb;



  assign data_in_axi4_stream_video_slave_vporch = data_write[12:0];



  always @(posedge clk or posedge reset)
    begin : reg_axi4_stream_video_slave_vporch_1_1_process
      if (reset == 1'b1) begin
        data_reg_axi4_stream_video_slave_vporch_1_1 <= 13'b0000000101101;
      end
      else begin
        if (enb && reg_enb_axi4_stream_video_slave_vporch_1_1) begin
          data_reg_axi4_stream_video_slave_vporch_1_1 <= data_in_axi4_stream_video_slave_vporch;
        end
      end
    end



  assign data_slice_axi4_stream_video_slave_vporch_1 = {19'b0, data_reg_axi4_stream_video_slave_vporch_1_1};



  assign decode_rd_axi4_stream_video_slave_vporch_1_1 = (decode_sel_axi4_stream_video_slave_vporch_1_1 == 1'b0 ? decode_rd_axi4_stream_video_slave_hporch_1_1 :
              data_slice_axi4_stream_video_slave_vporch_1);



  always @(posedge clk or posedge reset)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp_1_1 = (decode_sel_ip_timestamp_1_1 == 1'b0 ? decode_rd_axi4_stream_video_slave_vporch_1_1 :
              read_reg_ip_timestamp);



  assign data_read = decode_rd_ip_timestamp_1_1;

  assign write_axi_enable = write_concats_axi_enable_1;

  assign write_axi4_stream_video_slave_image_width = data_reg_axi4_stream_video_slave_image_width_1_1;

  assign write_axi4_stream_video_slave_image_height = data_reg_axi4_stream_video_slave_image_height_1_1;

  assign write_axi4_stream_video_slave_hporch = data_reg_axi4_stream_video_slave_hporch_1_1;

  assign write_axi4_stream_video_slave_vporch = data_reg_axi4_stream_video_slave_vporch_1_1;

endmodule  // RGB2Gray_ip_addr_decoder

