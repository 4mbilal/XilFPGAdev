1- Open Vivado 2020.2 and create a new ‘RTL’ project using the wizard. Select "Do not specify sources at this time". Select Zedboard as the board. 

2- In the newly created project, click on ‘Flow’ and then "create new Block Design" with the name ‘system’. This will create an empty block.

3- Click '+' sign to add IP. Select ZYNQ7 Processsing System. Click ‘Run Block Automation’. Press OK with default settings.

4- Add an ‘AXI GPIO’ core. Select 'LEDs 8 bits' for 'Board Interface' (GPIO). Add another ‘AXI GPIO’ core and similarly attach it to switches (GPIO) and buttons (GPIO2). Run Connection automation and AXI interconnects + reset system etc. will appear automatically. 

5- Validate design by right clicking on ‘system’ in block design pane. Validation successful message will appear. There should be no errors. 

6- Go to sources tab in Block Design Window, right click on ‘system.bd’ in 'Design Sources' and create HDL wrapper. Choose the ‘copy’ option so that it could be manually edited later on for further customization.

7- Minimal system is ready for testing. If VDMA is required, then follow the steps at the end before continuing to the next step. 

8- Generate ‘bitstream’. This should take around 5 minutes. This minimal system takes only 1% LUT resources. Clocking requirements are met for 100 MHz system clock. Worst Negative Slack is +3.5 ns.

9- Click File and then 'Export'. Select 'Export Hardware'. Select 'Include Bitstream'. Click 'Next' with default paths and names. Exported hardware file 'system_wrapper.xsa' will be generated at the default project path. 

--------------------------------------------------------------------------------------------------
Further steps to include VDMA.

1- Add VDMA IP core. Frame Buffer = 1. Memory Map Data Width = 32. Enable Write Channel (32-bit). Stream Data Width = 32 (4 Bytes per pixel-RGBA). This option depends on the IP core. Matlab Vision HDL Coder IP uses 4 bytes by default. 3 Bytes per pixel is also not suitable for aligned memory accesses and leads to significant increase in resources (warning is displayed). In advanced tab, turn off Fsync option (Free running).

2- Enable “High performance AXI interface” HP0 with 32-bit in Zynq7 Processing System.

3- Run Block Automation to automatically connect various reset, clock and AXI interface signals. 

4- PS7's HP0 cannot be directly connected to VDMA's M_AXI_S2MM port. Thus, Block Automation inserts an AXI Interconnect to translate between AXI4 and AXI3. Configure this AXI Interconnect to have two slaves and one master. The two slaves are connected to MM2S and S2MM ports of VDMA. One is connected automatically by block automation. Other has to be manually done after enabling two slaves. Use auto-address assignment. This gives the full 512 MB address range of the external DDR-RAM at its disposal for both reading and writing. 

5- AXI Interconnect will be connected to S_AXI_Lite port of the VDMA IP by block automation. Auto-generate address for this connection using Address Editor. This address will be used to configure VDMA IP core by writing to its registers. 

6- The streaming interfaces of VDMA, AXIS_MM2S and AXIS_S2MM, source and sink the video streams respectively. Connect them together to make a video loopback. Else, connect a video filter.

7- Most of the signals are automatically connected by Block Automation as discussed above. Check if any signal is left unconnected. 

8- To add IPs, create a folder 'CustomIPs' in the main project folder and add this to 'IP Catalog' > Right click > Add repository. 
