// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_popSubsystem.v
// Created: 2021-04-19 19:46:13
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_popSubsystem
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/MatchingCost/CensusTransform/zeroPadding/popSubsystem
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_popSubsystem
          (clk,
           reset,
           enb,
           enable,
           reset_1,
           Enable_1,
           done,
           pop,
           lastRowOut);


  input   clk;
  input   reset;
  input   enb;
  input   enable;
  input   reset_1;
  input   Enable_1;
  output  done;
  output  pop;
  output  lastRowOut;


  wire enb_gated;
  reg [9:0] HDLC1_out1;  // ufix10
  wire CC_out1;
  reg [8:0] HDLC2_out1;  // ufix9
  wire CC6_out1;
  wire LO4_out1;
  wire LO4_out1_bypass;
  reg  LO4_out1_last_value;
  wire CC1_out1;
  wire CC4_out1;
  wire CC2_out1;
  wire CC3_out1;
  wire LO2_out1;
  wire LO2_out1_bypass;
  reg  LO2_out1_last_value;
  wire CC8_out1;
  wire CC8_out1_bypass;
  reg  CC8_out1_last_value;


  assign enb_gated = Enable_1 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 647
  always @(posedge clk or posedge reset)
    begin : HDLC1_process
      if (reset == 1'b1) begin
        HDLC1_out1 <= 10'b0000000000;
      end
      else begin
        if (enb_gated) begin
          if (reset_1 == 1'b1) begin
            HDLC1_out1 <= 10'b0000000000;
          end
          else if (enable == 1'b1) begin
            if (HDLC1_out1 >= 10'b1010000111) begin
              HDLC1_out1 <= 10'b0000000000;
            end
            else begin
              HDLC1_out1 <= HDLC1_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign CC_out1 = HDLC1_out1 == 10'b1010000111;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 486
  always @(posedge clk or posedge reset)
    begin : HDLC2_process
      if (reset == 1'b1) begin
        HDLC2_out1 <= 9'b000000000;
      end
      else begin
        if (enb_gated) begin
          if (reset_1 == 1'b1) begin
            HDLC2_out1 <= 9'b000000000;
          end
          else if (CC_out1 == 1'b1) begin
            if (HDLC2_out1 >= 9'b111100110) begin
              HDLC2_out1 <= 9'b000000000;
            end
            else begin
              HDLC2_out1 <= HDLC2_out1 + 9'b000000001;
            end
          end
        end
      end
    end



  assign CC6_out1 = HDLC2_out1 == 9'b111100101;



  assign LO4_out1 = CC_out1 & CC6_out1;



  always @(posedge clk or posedge reset)
    begin : done_bypass_process
      if (reset == 1'b1) begin
        LO4_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_gated) begin
          LO4_out1_last_value <= LO4_out1_bypass;
        end
      end
    end



  assign LO4_out1_bypass = (Enable_1 == 1'b0 ? LO4_out1_last_value :
              LO4_out1);



  assign done = LO4_out1_bypass;

  assign CC1_out1 = HDLC2_out1 >= 9'b000000011;



  assign CC4_out1 = HDLC2_out1 < 9'b111100011;



  assign CC2_out1 = HDLC1_out1 >= 10'b0000000100;



  assign CC3_out1 = HDLC1_out1 < 10'b1010000100;



  assign LO2_out1 = CC3_out1 & (CC2_out1 & (CC1_out1 & CC4_out1));



  always @(posedge clk or posedge reset)
    begin : pop_bypass_process
      if (reset == 1'b1) begin
        LO2_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_gated) begin
          LO2_out1_last_value <= LO2_out1_bypass;
        end
      end
    end



  assign LO2_out1_bypass = (Enable_1 == 1'b0 ? LO2_out1_last_value :
              LO2_out1);



  assign pop = LO2_out1_bypass;

  assign CC8_out1 = HDLC2_out1 >= 9'b111100010;



  always @(posedge clk or posedge reset)
    begin : lastRowOut_bypass_process
      if (reset == 1'b1) begin
        CC8_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_gated) begin
          CC8_out1_last_value <= CC8_out1_bypass;
        end
      end
    end



  assign CC8_out1_bypass = (Enable_1 == 1'b0 ? CC8_out1_last_value :
              CC8_out1);



  assign lastRowOut = CC8_out1_bypass;

endmodule  // SGBMHDLAl_ip_src_popSubsystem

