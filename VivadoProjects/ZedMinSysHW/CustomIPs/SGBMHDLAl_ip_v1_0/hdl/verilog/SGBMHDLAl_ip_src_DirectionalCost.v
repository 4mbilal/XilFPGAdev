// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_DirectionalCost.v
// Created: 2021-04-19 19:46:13
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_DirectionalCost
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/DirectionalCost
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_DirectionalCost
          (clk,
           reset,
           enb,
           matchCostA_0,
           matchCostA_1,
           matchCostA_2,
           matchCostA_3,
           matchCostA_4,
           matchCostA_5,
           matchCostA_6,
           matchCostA_7,
           matchCostA_8,
           matchCostA_9,
           matchCostA_10,
           matchCostA_11,
           matchCostA_12,
           matchCostA_13,
           matchCostA_14,
           matchCostA_15,
           busA_vStart,
           busA_valid,
           matchCostRL_0,
           matchCostRL_1,
           matchCostRL_2,
           matchCostRL_3,
           matchCostRL_4,
           matchCostRL_5,
           matchCostRL_6,
           matchCostRL_7,
           matchCostRL_8,
           matchCostRL_9,
           matchCostRL_10,
           matchCostRL_11,
           matchCostRL_12,
           matchCostRL_13,
           matchCostRL_14,
           matchCostRL_15,
           busRL_hStart,
           busRL_hEnd,
           busRL_vStart,
           busRL_vEnd,
           busRL_valid,
           totalCostOut_0,
           totalCostOut_1,
           totalCostOut_2,
           totalCostOut_3,
           totalCostOut_4,
           totalCostOut_5,
           totalCostOut_6,
           totalCostOut_7,
           totalCostOut_8,
           totalCostOut_9,
           totalCostOut_10,
           totalCostOut_11,
           totalCostOut_12,
           totalCostOut_13,
           totalCostOut_14,
           totalCostOut_15,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   [4:0] matchCostA_0;  // ufix5
  input   [4:0] matchCostA_1;  // ufix5
  input   [4:0] matchCostA_2;  // ufix5
  input   [4:0] matchCostA_3;  // ufix5
  input   [4:0] matchCostA_4;  // ufix5
  input   [4:0] matchCostA_5;  // ufix5
  input   [4:0] matchCostA_6;  // ufix5
  input   [4:0] matchCostA_7;  // ufix5
  input   [4:0] matchCostA_8;  // ufix5
  input   [4:0] matchCostA_9;  // ufix5
  input   [4:0] matchCostA_10;  // ufix5
  input   [4:0] matchCostA_11;  // ufix5
  input   [4:0] matchCostA_12;  // ufix5
  input   [4:0] matchCostA_13;  // ufix5
  input   [4:0] matchCostA_14;  // ufix5
  input   [4:0] matchCostA_15;  // ufix5
  input   busA_vStart;
  input   busA_valid;
  input   [4:0] matchCostRL_0;  // ufix5
  input   [4:0] matchCostRL_1;  // ufix5
  input   [4:0] matchCostRL_2;  // ufix5
  input   [4:0] matchCostRL_3;  // ufix5
  input   [4:0] matchCostRL_4;  // ufix5
  input   [4:0] matchCostRL_5;  // ufix5
  input   [4:0] matchCostRL_6;  // ufix5
  input   [4:0] matchCostRL_7;  // ufix5
  input   [4:0] matchCostRL_8;  // ufix5
  input   [4:0] matchCostRL_9;  // ufix5
  input   [4:0] matchCostRL_10;  // ufix5
  input   [4:0] matchCostRL_11;  // ufix5
  input   [4:0] matchCostRL_12;  // ufix5
  input   [4:0] matchCostRL_13;  // ufix5
  input   [4:0] matchCostRL_14;  // ufix5
  input   [4:0] matchCostRL_15;  // ufix5
  input   busRL_hStart;
  input   busRL_hEnd;
  input   busRL_vStart;
  input   busRL_vEnd;
  input   busRL_valid;
  output  signed [12:0] totalCostOut_0;  // sfix13
  output  signed [12:0] totalCostOut_1;  // sfix13
  output  signed [12:0] totalCostOut_2;  // sfix13
  output  signed [12:0] totalCostOut_3;  // sfix13
  output  signed [12:0] totalCostOut_4;  // sfix13
  output  signed [12:0] totalCostOut_5;  // sfix13
  output  signed [12:0] totalCostOut_6;  // sfix13
  output  signed [12:0] totalCostOut_7;  // sfix13
  output  signed [12:0] totalCostOut_8;  // sfix13
  output  signed [12:0] totalCostOut_9;  // sfix13
  output  signed [12:0] totalCostOut_10;  // sfix13
  output  signed [12:0] totalCostOut_11;  // sfix13
  output  signed [12:0] totalCostOut_12;  // sfix13
  output  signed [12:0] totalCostOut_13;  // sfix13
  output  signed [12:0] totalCostOut_14;  // sfix13
  output  signed [12:0] totalCostOut_15;  // sfix13
  output  validOut;


  wire signed [9:0] LeftToRight_out1_0;  // sfix10
  wire signed [9:0] LeftToRight_out1_1;  // sfix10
  wire signed [9:0] LeftToRight_out1_2;  // sfix10
  wire signed [9:0] LeftToRight_out1_3;  // sfix10
  wire signed [9:0] LeftToRight_out1_4;  // sfix10
  wire signed [9:0] LeftToRight_out1_5;  // sfix10
  wire signed [9:0] LeftToRight_out1_6;  // sfix10
  wire signed [9:0] LeftToRight_out1_7;  // sfix10
  wire signed [9:0] LeftToRight_out1_8;  // sfix10
  wire signed [9:0] LeftToRight_out1_9;  // sfix10
  wire signed [9:0] LeftToRight_out1_10;  // sfix10
  wire signed [9:0] LeftToRight_out1_11;  // sfix10
  wire signed [9:0] LeftToRight_out1_12;  // sfix10
  wire signed [9:0] LeftToRight_out1_13;  // sfix10
  wire signed [9:0] LeftToRight_out1_14;  // sfix10
  wire signed [9:0] LeftToRight_out1_15;  // sfix10
  wire LeftToRight_out2_valid;
  wire signed [9:0] Delay_out_1;  // sfix10
  reg signed [9:0] Delay_1_reg [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_out_2;  // sfix10
  wire signed [9:0] Delay_out_3;  // sfix10
  wire signed [9:0] Delay_out_4;  // sfix10
  wire signed [9:0] Delay_out_5;  // sfix10
  wire signed [9:0] Delay_out_6;  // sfix10
  wire signed [9:0] Delay_out_7;  // sfix10
  wire signed [9:0] Delay_out_8;  // sfix10
  wire signed [9:0] Delay_out_9;  // sfix10
  wire signed [9:0] Delay_out_10;  // sfix10
  wire signed [9:0] Delay_out_11;  // sfix10
  wire signed [9:0] Delay_out_12;  // sfix10
  wire signed [9:0] Delay_out_13;  // sfix10
  wire signed [9:0] Delay_out_14;  // sfix10
  wire signed [9:0] Delay_out_15;  // sfix10
  wire signed [9:0] Delay_out_16;  // sfix10
  reg signed [9:0] Delay_1_reg_1 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_2 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_3 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_4 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_5 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_6 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_7 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_8 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_9 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_10 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_11 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_12 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_13 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_14 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay_1_reg_15 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_1 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_2 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_3 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_4 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_5 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_6 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_7 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_8 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_9 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_10 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_11 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_12 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_13 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_14 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_1_reg_next_15 [0:5];  // sfix10 [6]
  wire signed [9:0] TopLeftToBottomRight_out1_0;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_1;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_2;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_3;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_4;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_5;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_6;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_7;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_8;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_9;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_10;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_11;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_12;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_13;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_14;  // sfix10
  wire signed [9:0] TopLeftToBottomRight_out1_15;  // sfix10
  wire TopLeftToBottomRight_out2_valid;
  wire signed [9:0] Delay4_out_1;  // sfix10
  reg signed [9:0] Delay4_1_reg [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_out_2;  // sfix10
  wire signed [9:0] Delay4_out_3;  // sfix10
  wire signed [9:0] Delay4_out_4;  // sfix10
  wire signed [9:0] Delay4_out_5;  // sfix10
  wire signed [9:0] Delay4_out_6;  // sfix10
  wire signed [9:0] Delay4_out_7;  // sfix10
  wire signed [9:0] Delay4_out_8;  // sfix10
  wire signed [9:0] Delay4_out_9;  // sfix10
  wire signed [9:0] Delay4_out_10;  // sfix10
  wire signed [9:0] Delay4_out_11;  // sfix10
  wire signed [9:0] Delay4_out_12;  // sfix10
  wire signed [9:0] Delay4_out_13;  // sfix10
  wire signed [9:0] Delay4_out_14;  // sfix10
  wire signed [9:0] Delay4_out_15;  // sfix10
  wire signed [9:0] Delay4_out_16;  // sfix10
  reg signed [9:0] Delay4_1_reg_1 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_2 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_3 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_4 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_5 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_6 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_7 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_8 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_9 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_10 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_11 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_12 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_13 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_14 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay4_1_reg_15 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_1 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_2 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_3 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_4 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_5 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_6 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_7 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_8 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_9 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_10 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_11 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_12 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_13 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_14 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay4_1_reg_next_15 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay_out1 [0:15];  // sfix10 [16]
  wire signed [9:0] Delay4_out1 [0:15];  // sfix10 [16]
  wire signed [10:0] Sum_1;  // sfix11
  wire signed [10:0] Sum_2;  // sfix11
  wire signed [10:0] Sum_3;  // sfix11
  wire signed [10:0] Sum_4;  // sfix11
  wire signed [10:0] Sum_5;  // sfix11
  wire signed [10:0] Sum_6;  // sfix11
  wire signed [10:0] Sum_7;  // sfix11
  wire signed [10:0] Sum_8;  // sfix11
  wire signed [10:0] Sum_9;  // sfix11
  wire signed [10:0] Sum_10;  // sfix11
  wire signed [10:0] Sum_11;  // sfix11
  wire signed [10:0] Sum_12;  // sfix11
  wire signed [10:0] Sum_13;  // sfix11
  wire signed [10:0] Sum_14;  // sfix11
  wire signed [10:0] Sum_15;  // sfix11
  wire signed [10:0] Sum_16;  // sfix11
  wire signed [10:0] Sum_17;  // sfix11
  wire signed [10:0] Sum_18;  // sfix11
  wire signed [10:0] Sum_19;  // sfix11
  wire signed [10:0] Sum_20;  // sfix11
  wire signed [10:0] Sum_21;  // sfix11
  wire signed [10:0] Sum_22;  // sfix11
  wire signed [10:0] Sum_23;  // sfix11
  wire signed [10:0] Sum_24;  // sfix11
  wire signed [10:0] Sum_25;  // sfix11
  wire signed [10:0] Sum_26;  // sfix11
  wire signed [10:0] Sum_27;  // sfix11
  wire signed [10:0] Sum_28;  // sfix11
  wire signed [10:0] Sum_29;  // sfix11
  wire signed [10:0] Sum_30;  // sfix11
  wire signed [10:0] Sum_31;  // sfix11
  wire signed [10:0] Sum_32;  // sfix11
  wire signed [10:0] Sum_out1 [0:15];  // sfix11 [16]
  reg signed [10:0] Delay10_out1 [0:15];  // sfix11 [16]
  wire signed [9:0] TopToBottom_out1_0;  // sfix10
  wire signed [9:0] TopToBottom_out1_1;  // sfix10
  wire signed [9:0] TopToBottom_out1_2;  // sfix10
  wire signed [9:0] TopToBottom_out1_3;  // sfix10
  wire signed [9:0] TopToBottom_out1_4;  // sfix10
  wire signed [9:0] TopToBottom_out1_5;  // sfix10
  wire signed [9:0] TopToBottom_out1_6;  // sfix10
  wire signed [9:0] TopToBottom_out1_7;  // sfix10
  wire signed [9:0] TopToBottom_out1_8;  // sfix10
  wire signed [9:0] TopToBottom_out1_9;  // sfix10
  wire signed [9:0] TopToBottom_out1_10;  // sfix10
  wire signed [9:0] TopToBottom_out1_11;  // sfix10
  wire signed [9:0] TopToBottom_out1_12;  // sfix10
  wire signed [9:0] TopToBottom_out1_13;  // sfix10
  wire signed [9:0] TopToBottom_out1_14;  // sfix10
  wire signed [9:0] TopToBottom_out1_15;  // sfix10
  wire TopToBottom_out2_valid;
  wire signed [9:0] Delay1_out_1;  // sfix10
  reg signed [9:0] Delay1_1_reg [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_out_2;  // sfix10
  wire signed [9:0] Delay1_out_3;  // sfix10
  wire signed [9:0] Delay1_out_4;  // sfix10
  wire signed [9:0] Delay1_out_5;  // sfix10
  wire signed [9:0] Delay1_out_6;  // sfix10
  wire signed [9:0] Delay1_out_7;  // sfix10
  wire signed [9:0] Delay1_out_8;  // sfix10
  wire signed [9:0] Delay1_out_9;  // sfix10
  wire signed [9:0] Delay1_out_10;  // sfix10
  wire signed [9:0] Delay1_out_11;  // sfix10
  wire signed [9:0] Delay1_out_12;  // sfix10
  wire signed [9:0] Delay1_out_13;  // sfix10
  wire signed [9:0] Delay1_out_14;  // sfix10
  wire signed [9:0] Delay1_out_15;  // sfix10
  wire signed [9:0] Delay1_out_16;  // sfix10
  reg signed [9:0] Delay1_1_reg_1 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_2 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_3 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_4 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_5 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_6 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_7 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_8 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_9 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_10 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_11 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_12 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_13 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_14 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay1_1_reg_15 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_1 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_2 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_3 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_4 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_5 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_6 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_7 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_8 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_9 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_10 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_11 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_12 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_13 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_14 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_1_reg_next_15 [0:5];  // sfix10 [6]
  wire signed [9:0] TopRightToBottomLeft_out1_0;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_1;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_2;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_3;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_4;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_5;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_6;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_7;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_8;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_9;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_10;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_11;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_12;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_13;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_14;  // sfix10
  wire signed [9:0] TopRightToBottomLeft_out1_15;  // sfix10
  wire TopRightToBottomLeft_out2_valid;
  wire signed [9:0] Delay16_out_1;  // sfix10
  reg signed [9:0] Delay16_1_reg [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_out_2;  // sfix10
  wire signed [9:0] Delay16_out_3;  // sfix10
  wire signed [9:0] Delay16_out_4;  // sfix10
  wire signed [9:0] Delay16_out_5;  // sfix10
  wire signed [9:0] Delay16_out_6;  // sfix10
  wire signed [9:0] Delay16_out_7;  // sfix10
  wire signed [9:0] Delay16_out_8;  // sfix10
  wire signed [9:0] Delay16_out_9;  // sfix10
  wire signed [9:0] Delay16_out_10;  // sfix10
  wire signed [9:0] Delay16_out_11;  // sfix10
  wire signed [9:0] Delay16_out_12;  // sfix10
  wire signed [9:0] Delay16_out_13;  // sfix10
  wire signed [9:0] Delay16_out_14;  // sfix10
  wire signed [9:0] Delay16_out_15;  // sfix10
  wire signed [9:0] Delay16_out_16;  // sfix10
  reg signed [9:0] Delay16_1_reg_1 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_2 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_3 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_4 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_5 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_6 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_7 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_8 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_9 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_10 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_11 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_12 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_13 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_14 [0:5];  // sfix10 [6]
  reg signed [9:0] Delay16_1_reg_15 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_1 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_2 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_3 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_4 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_5 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_6 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_7 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_8 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_9 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_10 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_11 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_12 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_13 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_14 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay16_1_reg_next_15 [0:5];  // sfix10 [6]
  wire signed [9:0] Delay1_out1 [0:15];  // sfix10 [16]
  wire signed [9:0] Delay16_out1 [0:15];  // sfix10 [16]
  wire signed [10:0] Sum1_1;  // sfix11
  wire signed [10:0] Sum1_2;  // sfix11
  wire signed [10:0] Sum1_3;  // sfix11
  wire signed [10:0] Sum1_4;  // sfix11
  wire signed [10:0] Sum1_5;  // sfix11
  wire signed [10:0] Sum1_6;  // sfix11
  wire signed [10:0] Sum1_7;  // sfix11
  wire signed [10:0] Sum1_8;  // sfix11
  wire signed [10:0] Sum1_9;  // sfix11
  wire signed [10:0] Sum1_10;  // sfix11
  wire signed [10:0] Sum1_11;  // sfix11
  wire signed [10:0] Sum1_12;  // sfix11
  wire signed [10:0] Sum1_13;  // sfix11
  wire signed [10:0] Sum1_14;  // sfix11
  wire signed [10:0] Sum1_15;  // sfix11
  wire signed [10:0] Sum1_16;  // sfix11
  wire signed [10:0] Sum1_17;  // sfix11
  wire signed [10:0] Sum1_18;  // sfix11
  wire signed [10:0] Sum1_19;  // sfix11
  wire signed [10:0] Sum1_20;  // sfix11
  wire signed [10:0] Sum1_21;  // sfix11
  wire signed [10:0] Sum1_22;  // sfix11
  wire signed [10:0] Sum1_23;  // sfix11
  wire signed [10:0] Sum1_24;  // sfix11
  wire signed [10:0] Sum1_25;  // sfix11
  wire signed [10:0] Sum1_26;  // sfix11
  wire signed [10:0] Sum1_27;  // sfix11
  wire signed [10:0] Sum1_28;  // sfix11
  wire signed [10:0] Sum1_29;  // sfix11
  wire signed [10:0] Sum1_30;  // sfix11
  wire signed [10:0] Sum1_31;  // sfix11
  wire signed [10:0] Sum1_32;  // sfix11
  wire signed [10:0] Sum1_out1 [0:15];  // sfix11 [16]
  reg signed [10:0] Delay5_out1 [0:15];  // sfix11 [16]
  wire signed [11:0] Sum2_1;  // sfix12
  wire signed [11:0] Sum2_2;  // sfix12
  wire signed [11:0] Sum2_3;  // sfix12
  wire signed [11:0] Sum2_4;  // sfix12
  wire signed [11:0] Sum2_5;  // sfix12
  wire signed [11:0] Sum2_6;  // sfix12
  wire signed [11:0] Sum2_7;  // sfix12
  wire signed [11:0] Sum2_8;  // sfix12
  wire signed [11:0] Sum2_9;  // sfix12
  wire signed [11:0] Sum2_10;  // sfix12
  wire signed [11:0] Sum2_11;  // sfix12
  wire signed [11:0] Sum2_12;  // sfix12
  wire signed [11:0] Sum2_13;  // sfix12
  wire signed [11:0] Sum2_14;  // sfix12
  wire signed [11:0] Sum2_15;  // sfix12
  wire signed [11:0] Sum2_16;  // sfix12
  wire signed [11:0] Sum2_17;  // sfix12
  wire signed [11:0] Sum2_18;  // sfix12
  wire signed [11:0] Sum2_19;  // sfix12
  wire signed [11:0] Sum2_20;  // sfix12
  wire signed [11:0] Sum2_21;  // sfix12
  wire signed [11:0] Sum2_22;  // sfix12
  wire signed [11:0] Sum2_23;  // sfix12
  wire signed [11:0] Sum2_24;  // sfix12
  wire signed [11:0] Sum2_25;  // sfix12
  wire signed [11:0] Sum2_26;  // sfix12
  wire signed [11:0] Sum2_27;  // sfix12
  wire signed [11:0] Sum2_28;  // sfix12
  wire signed [11:0] Sum2_29;  // sfix12
  wire signed [11:0] Sum2_30;  // sfix12
  wire signed [11:0] Sum2_31;  // sfix12
  wire signed [11:0] Sum2_32;  // sfix12
  wire signed [11:0] Sum2_out1 [0:15];  // sfix12 [16]
  wire signed [9:0] RightToLeft_out1_0;  // sfix10
  wire signed [9:0] RightToLeft_out1_1;  // sfix10
  wire signed [9:0] RightToLeft_out1_2;  // sfix10
  wire signed [9:0] RightToLeft_out1_3;  // sfix10
  wire signed [9:0] RightToLeft_out1_4;  // sfix10
  wire signed [9:0] RightToLeft_out1_5;  // sfix10
  wire signed [9:0] RightToLeft_out1_6;  // sfix10
  wire signed [9:0] RightToLeft_out1_7;  // sfix10
  wire signed [9:0] RightToLeft_out1_8;  // sfix10
  wire signed [9:0] RightToLeft_out1_9;  // sfix10
  wire signed [9:0] RightToLeft_out1_10;  // sfix10
  wire signed [9:0] RightToLeft_out1_11;  // sfix10
  wire signed [9:0] RightToLeft_out1_12;  // sfix10
  wire signed [9:0] RightToLeft_out1_13;  // sfix10
  wire signed [9:0] RightToLeft_out1_14;  // sfix10
  wire signed [9:0] RightToLeft_out1_15;  // sfix10
  wire RightToLeft_out2_valid;
  wire signed [9:0] RightToLeft_out1 [0:15];  // sfix10 [16]
  reg signed [9:0] Delay14_out1 [0:15];  // sfix10 [16]
  wire signed [9:0] Delay14_out1_0;  // sfix10
  wire signed [9:0] Delay14_out1_1;  // sfix10
  wire signed [9:0] Delay14_out1_2;  // sfix10
  wire signed [9:0] Delay14_out1_3;  // sfix10
  wire signed [9:0] Delay14_out1_4;  // sfix10
  wire signed [9:0] Delay14_out1_5;  // sfix10
  wire signed [9:0] Delay14_out1_6;  // sfix10
  wire signed [9:0] Delay14_out1_7;  // sfix10
  wire signed [9:0] Delay14_out1_8;  // sfix10
  wire signed [9:0] Delay14_out1_9;  // sfix10
  wire signed [9:0] Delay14_out1_10;  // sfix10
  wire signed [9:0] Delay14_out1_11;  // sfix10
  wire signed [9:0] Delay14_out1_12;  // sfix10
  wire signed [9:0] Delay14_out1_13;  // sfix10
  wire signed [9:0] Delay14_out1_14;  // sfix10
  wire signed [9:0] Delay14_out1_15;  // sfix10
  wire signed [9:0] Delay12_out_1;  // sfix10
  reg signed [9:0] Delay12_1_reg [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_out_2;  // sfix10
  wire signed [9:0] Delay12_out_3;  // sfix10
  wire signed [9:0] Delay12_out_4;  // sfix10
  wire signed [9:0] Delay12_out_5;  // sfix10
  wire signed [9:0] Delay12_out_6;  // sfix10
  wire signed [9:0] Delay12_out_7;  // sfix10
  wire signed [9:0] Delay12_out_8;  // sfix10
  wire signed [9:0] Delay12_out_9;  // sfix10
  wire signed [9:0] Delay12_out_10;  // sfix10
  wire signed [9:0] Delay12_out_11;  // sfix10
  wire signed [9:0] Delay12_out_12;  // sfix10
  wire signed [9:0] Delay12_out_13;  // sfix10
  wire signed [9:0] Delay12_out_14;  // sfix10
  wire signed [9:0] Delay12_out_15;  // sfix10
  wire signed [9:0] Delay12_out_16;  // sfix10
  reg signed [9:0] Delay12_1_reg_1 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_2 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_3 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_4 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_5 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_6 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_7 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_8 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_9 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_10 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_11 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_12 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_13 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_14 [0:1];  // sfix10 [2]
  reg signed [9:0] Delay12_1_reg_15 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_1 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_2 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_3 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_4 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_5 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_6 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_7 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_8 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_9 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_10 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_11 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_12 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_13 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_14 [0:1];  // sfix10 [2]
  wire signed [9:0] Delay12_1_reg_next_15 [0:1];  // sfix10 [2]
  reg signed [11:0] Delay18_out1 [0:15];  // sfix12 [16]
  wire signed [9:0] Delay12_out1 [0:15];  // sfix10 [16]
  wire signed [12:0] Sum3_1;  // sfix13
  wire signed [12:0] Sum3_2;  // sfix13
  wire signed [12:0] Sum3_3;  // sfix13
  wire signed [12:0] Sum3_4;  // sfix13
  wire signed [12:0] Sum3_5;  // sfix13
  wire signed [12:0] Sum3_6;  // sfix13
  wire signed [12:0] Sum3_7;  // sfix13
  wire signed [12:0] Sum3_8;  // sfix13
  wire signed [12:0] Sum3_9;  // sfix13
  wire signed [12:0] Sum3_10;  // sfix13
  wire signed [12:0] Sum3_11;  // sfix13
  wire signed [12:0] Sum3_12;  // sfix13
  wire signed [12:0] Sum3_13;  // sfix13
  wire signed [12:0] Sum3_14;  // sfix13
  wire signed [12:0] Sum3_15;  // sfix13
  wire signed [12:0] Sum3_16;  // sfix13
  wire signed [12:0] Sum3_17;  // sfix13
  wire signed [12:0] Sum3_18;  // sfix13
  wire signed [12:0] Sum3_19;  // sfix13
  wire signed [12:0] Sum3_20;  // sfix13
  wire signed [12:0] Sum3_21;  // sfix13
  wire signed [12:0] Sum3_22;  // sfix13
  wire signed [12:0] Sum3_23;  // sfix13
  wire signed [12:0] Sum3_24;  // sfix13
  wire signed [12:0] Sum3_25;  // sfix13
  wire signed [12:0] Sum3_26;  // sfix13
  wire signed [12:0] Sum3_27;  // sfix13
  wire signed [12:0] Sum3_28;  // sfix13
  wire signed [12:0] Sum3_29;  // sfix13
  wire signed [12:0] Sum3_30;  // sfix13
  wire signed [12:0] Sum3_31;  // sfix13
  wire signed [12:0] Sum3_32;  // sfix13
  wire signed [12:0] Sum3_out1 [0:15];  // sfix13 [16]
  reg signed [12:0] Delay8_out1 [0:15];  // sfix13 [16]
  reg  [0:5] alpha_reg;  // ufix1 [6]
  wire [0:5] alpha_reg_next;  // ufix1 [6]
  wire Delay2_out1_valid;
  wire valid;
  reg  [0:5] alpha_reg_1;  // ufix1 [6]
  wire [0:5] alpha_reg_next_1;  // ufix1 [6]
  wire Delay6_out1_valid;
  wire valid_1;
  wire Logical_Operator_out1;
  reg  Delay11_out1;
  reg  [0:5] alpha_reg_2;  // ufix1 [6]
  wire [0:5] alpha_reg_next_2;  // ufix1 [6]
  wire Delay3_out1_valid;
  wire valid_2;
  reg  [0:5] alpha_reg_3;  // ufix1 [6]
  wire [0:5] alpha_reg_next_3;  // ufix1 [6]
  wire Delay17_out1_valid;
  wire valid_3;
  wire Logical_Operator1_out1;
  reg  Delay7_out1;
  wire Logical_Operator2_out1;
  reg  Delay19_out1;
  reg  Delay15_out1_valid;
  wire valid_4;
  reg  [0:1] Delay13_reg;  // ufix1 [2]
  wire [0:1] Delay13_reg_next;  // ufix1 [2]
  wire Delay13_out1;
  wire Logical_Operator3_out1;
  reg  Delay9_out1;


  SGBMHDLAl_ip_src_LeftToRight u_LeftToRight (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .matchCostIn_0(matchCostA_0),  // ufix5
                                              .matchCostIn_1(matchCostA_1),  // ufix5
                                              .matchCostIn_2(matchCostA_2),  // ufix5
                                              .matchCostIn_3(matchCostA_3),  // ufix5
                                              .matchCostIn_4(matchCostA_4),  // ufix5
                                              .matchCostIn_5(matchCostA_5),  // ufix5
                                              .matchCostIn_6(matchCostA_6),  // ufix5
                                              .matchCostIn_7(matchCostA_7),  // ufix5
                                              .matchCostIn_8(matchCostA_8),  // ufix5
                                              .matchCostIn_9(matchCostA_9),  // ufix5
                                              .matchCostIn_10(matchCostA_10),  // ufix5
                                              .matchCostIn_11(matchCostA_11),  // ufix5
                                              .matchCostIn_12(matchCostA_12),  // ufix5
                                              .matchCostIn_13(matchCostA_13),  // ufix5
                                              .matchCostIn_14(matchCostA_14),  // ufix5
                                              .matchCostIn_15(matchCostA_15),  // ufix5
                                              .busIn_vStart(busA_vStart),
                                              .busIn_valid(busA_valid),
                                              .lrCost_0(LeftToRight_out1_0),  // sfix10
                                              .lrCost_1(LeftToRight_out1_1),  // sfix10
                                              .lrCost_2(LeftToRight_out1_2),  // sfix10
                                              .lrCost_3(LeftToRight_out1_3),  // sfix10
                                              .lrCost_4(LeftToRight_out1_4),  // sfix10
                                              .lrCost_5(LeftToRight_out1_5),  // sfix10
                                              .lrCost_6(LeftToRight_out1_6),  // sfix10
                                              .lrCost_7(LeftToRight_out1_7),  // sfix10
                                              .lrCost_8(LeftToRight_out1_8),  // sfix10
                                              .lrCost_9(LeftToRight_out1_9),  // sfix10
                                              .lrCost_10(LeftToRight_out1_10),  // sfix10
                                              .lrCost_11(LeftToRight_out1_11),  // sfix10
                                              .lrCost_12(LeftToRight_out1_12),  // sfix10
                                              .lrCost_13(LeftToRight_out1_13),  // sfix10
                                              .lrCost_14(LeftToRight_out1_14),  // sfix10
                                              .lrCost_15(LeftToRight_out1_15),  // sfix10
                                              .lrBus_valid(LeftToRight_out2_valid)
                                              );

  always @(posedge clk or posedge reset)
    begin : Delay_1_process
      if (reset == 1'b1) begin
        Delay_1_reg[0] <= 10'sb0000000000;
        Delay_1_reg[1] <= 10'sb0000000000;
        Delay_1_reg[2] <= 10'sb0000000000;
        Delay_1_reg[3] <= 10'sb0000000000;
        Delay_1_reg[4] <= 10'sb0000000000;
        Delay_1_reg[5] <= 10'sb0000000000;
        Delay_1_reg_1[0] <= 10'sb0000000000;
        Delay_1_reg_1[1] <= 10'sb0000000000;
        Delay_1_reg_1[2] <= 10'sb0000000000;
        Delay_1_reg_1[3] <= 10'sb0000000000;
        Delay_1_reg_1[4] <= 10'sb0000000000;
        Delay_1_reg_1[5] <= 10'sb0000000000;
        Delay_1_reg_2[0] <= 10'sb0000000000;
        Delay_1_reg_2[1] <= 10'sb0000000000;
        Delay_1_reg_2[2] <= 10'sb0000000000;
        Delay_1_reg_2[3] <= 10'sb0000000000;
        Delay_1_reg_2[4] <= 10'sb0000000000;
        Delay_1_reg_2[5] <= 10'sb0000000000;
        Delay_1_reg_3[0] <= 10'sb0000000000;
        Delay_1_reg_3[1] <= 10'sb0000000000;
        Delay_1_reg_3[2] <= 10'sb0000000000;
        Delay_1_reg_3[3] <= 10'sb0000000000;
        Delay_1_reg_3[4] <= 10'sb0000000000;
        Delay_1_reg_3[5] <= 10'sb0000000000;
        Delay_1_reg_4[0] <= 10'sb0000000000;
        Delay_1_reg_4[1] <= 10'sb0000000000;
        Delay_1_reg_4[2] <= 10'sb0000000000;
        Delay_1_reg_4[3] <= 10'sb0000000000;
        Delay_1_reg_4[4] <= 10'sb0000000000;
        Delay_1_reg_4[5] <= 10'sb0000000000;
        Delay_1_reg_5[0] <= 10'sb0000000000;
        Delay_1_reg_5[1] <= 10'sb0000000000;
        Delay_1_reg_5[2] <= 10'sb0000000000;
        Delay_1_reg_5[3] <= 10'sb0000000000;
        Delay_1_reg_5[4] <= 10'sb0000000000;
        Delay_1_reg_5[5] <= 10'sb0000000000;
        Delay_1_reg_6[0] <= 10'sb0000000000;
        Delay_1_reg_6[1] <= 10'sb0000000000;
        Delay_1_reg_6[2] <= 10'sb0000000000;
        Delay_1_reg_6[3] <= 10'sb0000000000;
        Delay_1_reg_6[4] <= 10'sb0000000000;
        Delay_1_reg_6[5] <= 10'sb0000000000;
        Delay_1_reg_7[0] <= 10'sb0000000000;
        Delay_1_reg_7[1] <= 10'sb0000000000;
        Delay_1_reg_7[2] <= 10'sb0000000000;
        Delay_1_reg_7[3] <= 10'sb0000000000;
        Delay_1_reg_7[4] <= 10'sb0000000000;
        Delay_1_reg_7[5] <= 10'sb0000000000;
        Delay_1_reg_8[0] <= 10'sb0000000000;
        Delay_1_reg_8[1] <= 10'sb0000000000;
        Delay_1_reg_8[2] <= 10'sb0000000000;
        Delay_1_reg_8[3] <= 10'sb0000000000;
        Delay_1_reg_8[4] <= 10'sb0000000000;
        Delay_1_reg_8[5] <= 10'sb0000000000;
        Delay_1_reg_9[0] <= 10'sb0000000000;
        Delay_1_reg_9[1] <= 10'sb0000000000;
        Delay_1_reg_9[2] <= 10'sb0000000000;
        Delay_1_reg_9[3] <= 10'sb0000000000;
        Delay_1_reg_9[4] <= 10'sb0000000000;
        Delay_1_reg_9[5] <= 10'sb0000000000;
        Delay_1_reg_10[0] <= 10'sb0000000000;
        Delay_1_reg_10[1] <= 10'sb0000000000;
        Delay_1_reg_10[2] <= 10'sb0000000000;
        Delay_1_reg_10[3] <= 10'sb0000000000;
        Delay_1_reg_10[4] <= 10'sb0000000000;
        Delay_1_reg_10[5] <= 10'sb0000000000;
        Delay_1_reg_11[0] <= 10'sb0000000000;
        Delay_1_reg_11[1] <= 10'sb0000000000;
        Delay_1_reg_11[2] <= 10'sb0000000000;
        Delay_1_reg_11[3] <= 10'sb0000000000;
        Delay_1_reg_11[4] <= 10'sb0000000000;
        Delay_1_reg_11[5] <= 10'sb0000000000;
        Delay_1_reg_12[0] <= 10'sb0000000000;
        Delay_1_reg_12[1] <= 10'sb0000000000;
        Delay_1_reg_12[2] <= 10'sb0000000000;
        Delay_1_reg_12[3] <= 10'sb0000000000;
        Delay_1_reg_12[4] <= 10'sb0000000000;
        Delay_1_reg_12[5] <= 10'sb0000000000;
        Delay_1_reg_13[0] <= 10'sb0000000000;
        Delay_1_reg_13[1] <= 10'sb0000000000;
        Delay_1_reg_13[2] <= 10'sb0000000000;
        Delay_1_reg_13[3] <= 10'sb0000000000;
        Delay_1_reg_13[4] <= 10'sb0000000000;
        Delay_1_reg_13[5] <= 10'sb0000000000;
        Delay_1_reg_14[0] <= 10'sb0000000000;
        Delay_1_reg_14[1] <= 10'sb0000000000;
        Delay_1_reg_14[2] <= 10'sb0000000000;
        Delay_1_reg_14[3] <= 10'sb0000000000;
        Delay_1_reg_14[4] <= 10'sb0000000000;
        Delay_1_reg_14[5] <= 10'sb0000000000;
        Delay_1_reg_15[0] <= 10'sb0000000000;
        Delay_1_reg_15[1] <= 10'sb0000000000;
        Delay_1_reg_15[2] <= 10'sb0000000000;
        Delay_1_reg_15[3] <= 10'sb0000000000;
        Delay_1_reg_15[4] <= 10'sb0000000000;
        Delay_1_reg_15[5] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay_1_reg[0] <= Delay_1_reg_next[0];
          Delay_1_reg[1] <= Delay_1_reg_next[1];
          Delay_1_reg[2] <= Delay_1_reg_next[2];
          Delay_1_reg[3] <= Delay_1_reg_next[3];
          Delay_1_reg[4] <= Delay_1_reg_next[4];
          Delay_1_reg[5] <= Delay_1_reg_next[5];
          Delay_1_reg_1[0] <= Delay_1_reg_next_1[0];
          Delay_1_reg_1[1] <= Delay_1_reg_next_1[1];
          Delay_1_reg_1[2] <= Delay_1_reg_next_1[2];
          Delay_1_reg_1[3] <= Delay_1_reg_next_1[3];
          Delay_1_reg_1[4] <= Delay_1_reg_next_1[4];
          Delay_1_reg_1[5] <= Delay_1_reg_next_1[5];
          Delay_1_reg_2[0] <= Delay_1_reg_next_2[0];
          Delay_1_reg_2[1] <= Delay_1_reg_next_2[1];
          Delay_1_reg_2[2] <= Delay_1_reg_next_2[2];
          Delay_1_reg_2[3] <= Delay_1_reg_next_2[3];
          Delay_1_reg_2[4] <= Delay_1_reg_next_2[4];
          Delay_1_reg_2[5] <= Delay_1_reg_next_2[5];
          Delay_1_reg_3[0] <= Delay_1_reg_next_3[0];
          Delay_1_reg_3[1] <= Delay_1_reg_next_3[1];
          Delay_1_reg_3[2] <= Delay_1_reg_next_3[2];
          Delay_1_reg_3[3] <= Delay_1_reg_next_3[3];
          Delay_1_reg_3[4] <= Delay_1_reg_next_3[4];
          Delay_1_reg_3[5] <= Delay_1_reg_next_3[5];
          Delay_1_reg_4[0] <= Delay_1_reg_next_4[0];
          Delay_1_reg_4[1] <= Delay_1_reg_next_4[1];
          Delay_1_reg_4[2] <= Delay_1_reg_next_4[2];
          Delay_1_reg_4[3] <= Delay_1_reg_next_4[3];
          Delay_1_reg_4[4] <= Delay_1_reg_next_4[4];
          Delay_1_reg_4[5] <= Delay_1_reg_next_4[5];
          Delay_1_reg_5[0] <= Delay_1_reg_next_5[0];
          Delay_1_reg_5[1] <= Delay_1_reg_next_5[1];
          Delay_1_reg_5[2] <= Delay_1_reg_next_5[2];
          Delay_1_reg_5[3] <= Delay_1_reg_next_5[3];
          Delay_1_reg_5[4] <= Delay_1_reg_next_5[4];
          Delay_1_reg_5[5] <= Delay_1_reg_next_5[5];
          Delay_1_reg_6[0] <= Delay_1_reg_next_6[0];
          Delay_1_reg_6[1] <= Delay_1_reg_next_6[1];
          Delay_1_reg_6[2] <= Delay_1_reg_next_6[2];
          Delay_1_reg_6[3] <= Delay_1_reg_next_6[3];
          Delay_1_reg_6[4] <= Delay_1_reg_next_6[4];
          Delay_1_reg_6[5] <= Delay_1_reg_next_6[5];
          Delay_1_reg_7[0] <= Delay_1_reg_next_7[0];
          Delay_1_reg_7[1] <= Delay_1_reg_next_7[1];
          Delay_1_reg_7[2] <= Delay_1_reg_next_7[2];
          Delay_1_reg_7[3] <= Delay_1_reg_next_7[3];
          Delay_1_reg_7[4] <= Delay_1_reg_next_7[4];
          Delay_1_reg_7[5] <= Delay_1_reg_next_7[5];
          Delay_1_reg_8[0] <= Delay_1_reg_next_8[0];
          Delay_1_reg_8[1] <= Delay_1_reg_next_8[1];
          Delay_1_reg_8[2] <= Delay_1_reg_next_8[2];
          Delay_1_reg_8[3] <= Delay_1_reg_next_8[3];
          Delay_1_reg_8[4] <= Delay_1_reg_next_8[4];
          Delay_1_reg_8[5] <= Delay_1_reg_next_8[5];
          Delay_1_reg_9[0] <= Delay_1_reg_next_9[0];
          Delay_1_reg_9[1] <= Delay_1_reg_next_9[1];
          Delay_1_reg_9[2] <= Delay_1_reg_next_9[2];
          Delay_1_reg_9[3] <= Delay_1_reg_next_9[3];
          Delay_1_reg_9[4] <= Delay_1_reg_next_9[4];
          Delay_1_reg_9[5] <= Delay_1_reg_next_9[5];
          Delay_1_reg_10[0] <= Delay_1_reg_next_10[0];
          Delay_1_reg_10[1] <= Delay_1_reg_next_10[1];
          Delay_1_reg_10[2] <= Delay_1_reg_next_10[2];
          Delay_1_reg_10[3] <= Delay_1_reg_next_10[3];
          Delay_1_reg_10[4] <= Delay_1_reg_next_10[4];
          Delay_1_reg_10[5] <= Delay_1_reg_next_10[5];
          Delay_1_reg_11[0] <= Delay_1_reg_next_11[0];
          Delay_1_reg_11[1] <= Delay_1_reg_next_11[1];
          Delay_1_reg_11[2] <= Delay_1_reg_next_11[2];
          Delay_1_reg_11[3] <= Delay_1_reg_next_11[3];
          Delay_1_reg_11[4] <= Delay_1_reg_next_11[4];
          Delay_1_reg_11[5] <= Delay_1_reg_next_11[5];
          Delay_1_reg_12[0] <= Delay_1_reg_next_12[0];
          Delay_1_reg_12[1] <= Delay_1_reg_next_12[1];
          Delay_1_reg_12[2] <= Delay_1_reg_next_12[2];
          Delay_1_reg_12[3] <= Delay_1_reg_next_12[3];
          Delay_1_reg_12[4] <= Delay_1_reg_next_12[4];
          Delay_1_reg_12[5] <= Delay_1_reg_next_12[5];
          Delay_1_reg_13[0] <= Delay_1_reg_next_13[0];
          Delay_1_reg_13[1] <= Delay_1_reg_next_13[1];
          Delay_1_reg_13[2] <= Delay_1_reg_next_13[2];
          Delay_1_reg_13[3] <= Delay_1_reg_next_13[3];
          Delay_1_reg_13[4] <= Delay_1_reg_next_13[4];
          Delay_1_reg_13[5] <= Delay_1_reg_next_13[5];
          Delay_1_reg_14[0] <= Delay_1_reg_next_14[0];
          Delay_1_reg_14[1] <= Delay_1_reg_next_14[1];
          Delay_1_reg_14[2] <= Delay_1_reg_next_14[2];
          Delay_1_reg_14[3] <= Delay_1_reg_next_14[3];
          Delay_1_reg_14[4] <= Delay_1_reg_next_14[4];
          Delay_1_reg_14[5] <= Delay_1_reg_next_14[5];
          Delay_1_reg_15[0] <= Delay_1_reg_next_15[0];
          Delay_1_reg_15[1] <= Delay_1_reg_next_15[1];
          Delay_1_reg_15[2] <= Delay_1_reg_next_15[2];
          Delay_1_reg_15[3] <= Delay_1_reg_next_15[3];
          Delay_1_reg_15[4] <= Delay_1_reg_next_15[4];
          Delay_1_reg_15[5] <= Delay_1_reg_next_15[5];
        end
      end
    end

  assign Delay_1_reg_next[0] = LeftToRight_out1_0;
  assign Delay_1_reg_next[1] = Delay_1_reg[0];
  assign Delay_1_reg_next[2] = Delay_1_reg[1];
  assign Delay_1_reg_next[3] = Delay_1_reg[2];
  assign Delay_1_reg_next[4] = Delay_1_reg[3];
  assign Delay_1_reg_next[5] = Delay_1_reg[4];
  assign Delay_out_1 = Delay_1_reg[5];
  assign Delay_1_reg_next_1[0] = LeftToRight_out1_1;
  assign Delay_1_reg_next_1[1] = Delay_1_reg_1[0];
  assign Delay_1_reg_next_1[2] = Delay_1_reg_1[1];
  assign Delay_1_reg_next_1[3] = Delay_1_reg_1[2];
  assign Delay_1_reg_next_1[4] = Delay_1_reg_1[3];
  assign Delay_1_reg_next_1[5] = Delay_1_reg_1[4];
  assign Delay_out_2 = Delay_1_reg_1[5];
  assign Delay_1_reg_next_2[0] = LeftToRight_out1_2;
  assign Delay_1_reg_next_2[1] = Delay_1_reg_2[0];
  assign Delay_1_reg_next_2[2] = Delay_1_reg_2[1];
  assign Delay_1_reg_next_2[3] = Delay_1_reg_2[2];
  assign Delay_1_reg_next_2[4] = Delay_1_reg_2[3];
  assign Delay_1_reg_next_2[5] = Delay_1_reg_2[4];
  assign Delay_out_3 = Delay_1_reg_2[5];
  assign Delay_1_reg_next_3[0] = LeftToRight_out1_3;
  assign Delay_1_reg_next_3[1] = Delay_1_reg_3[0];
  assign Delay_1_reg_next_3[2] = Delay_1_reg_3[1];
  assign Delay_1_reg_next_3[3] = Delay_1_reg_3[2];
  assign Delay_1_reg_next_3[4] = Delay_1_reg_3[3];
  assign Delay_1_reg_next_3[5] = Delay_1_reg_3[4];
  assign Delay_out_4 = Delay_1_reg_3[5];
  assign Delay_1_reg_next_4[0] = LeftToRight_out1_4;
  assign Delay_1_reg_next_4[1] = Delay_1_reg_4[0];
  assign Delay_1_reg_next_4[2] = Delay_1_reg_4[1];
  assign Delay_1_reg_next_4[3] = Delay_1_reg_4[2];
  assign Delay_1_reg_next_4[4] = Delay_1_reg_4[3];
  assign Delay_1_reg_next_4[5] = Delay_1_reg_4[4];
  assign Delay_out_5 = Delay_1_reg_4[5];
  assign Delay_1_reg_next_5[0] = LeftToRight_out1_5;
  assign Delay_1_reg_next_5[1] = Delay_1_reg_5[0];
  assign Delay_1_reg_next_5[2] = Delay_1_reg_5[1];
  assign Delay_1_reg_next_5[3] = Delay_1_reg_5[2];
  assign Delay_1_reg_next_5[4] = Delay_1_reg_5[3];
  assign Delay_1_reg_next_5[5] = Delay_1_reg_5[4];
  assign Delay_out_6 = Delay_1_reg_5[5];
  assign Delay_1_reg_next_6[0] = LeftToRight_out1_6;
  assign Delay_1_reg_next_6[1] = Delay_1_reg_6[0];
  assign Delay_1_reg_next_6[2] = Delay_1_reg_6[1];
  assign Delay_1_reg_next_6[3] = Delay_1_reg_6[2];
  assign Delay_1_reg_next_6[4] = Delay_1_reg_6[3];
  assign Delay_1_reg_next_6[5] = Delay_1_reg_6[4];
  assign Delay_out_7 = Delay_1_reg_6[5];
  assign Delay_1_reg_next_7[0] = LeftToRight_out1_7;
  assign Delay_1_reg_next_7[1] = Delay_1_reg_7[0];
  assign Delay_1_reg_next_7[2] = Delay_1_reg_7[1];
  assign Delay_1_reg_next_7[3] = Delay_1_reg_7[2];
  assign Delay_1_reg_next_7[4] = Delay_1_reg_7[3];
  assign Delay_1_reg_next_7[5] = Delay_1_reg_7[4];
  assign Delay_out_8 = Delay_1_reg_7[5];
  assign Delay_1_reg_next_8[0] = LeftToRight_out1_8;
  assign Delay_1_reg_next_8[1] = Delay_1_reg_8[0];
  assign Delay_1_reg_next_8[2] = Delay_1_reg_8[1];
  assign Delay_1_reg_next_8[3] = Delay_1_reg_8[2];
  assign Delay_1_reg_next_8[4] = Delay_1_reg_8[3];
  assign Delay_1_reg_next_8[5] = Delay_1_reg_8[4];
  assign Delay_out_9 = Delay_1_reg_8[5];
  assign Delay_1_reg_next_9[0] = LeftToRight_out1_9;
  assign Delay_1_reg_next_9[1] = Delay_1_reg_9[0];
  assign Delay_1_reg_next_9[2] = Delay_1_reg_9[1];
  assign Delay_1_reg_next_9[3] = Delay_1_reg_9[2];
  assign Delay_1_reg_next_9[4] = Delay_1_reg_9[3];
  assign Delay_1_reg_next_9[5] = Delay_1_reg_9[4];
  assign Delay_out_10 = Delay_1_reg_9[5];
  assign Delay_1_reg_next_10[0] = LeftToRight_out1_10;
  assign Delay_1_reg_next_10[1] = Delay_1_reg_10[0];
  assign Delay_1_reg_next_10[2] = Delay_1_reg_10[1];
  assign Delay_1_reg_next_10[3] = Delay_1_reg_10[2];
  assign Delay_1_reg_next_10[4] = Delay_1_reg_10[3];
  assign Delay_1_reg_next_10[5] = Delay_1_reg_10[4];
  assign Delay_out_11 = Delay_1_reg_10[5];
  assign Delay_1_reg_next_11[0] = LeftToRight_out1_11;
  assign Delay_1_reg_next_11[1] = Delay_1_reg_11[0];
  assign Delay_1_reg_next_11[2] = Delay_1_reg_11[1];
  assign Delay_1_reg_next_11[3] = Delay_1_reg_11[2];
  assign Delay_1_reg_next_11[4] = Delay_1_reg_11[3];
  assign Delay_1_reg_next_11[5] = Delay_1_reg_11[4];
  assign Delay_out_12 = Delay_1_reg_11[5];
  assign Delay_1_reg_next_12[0] = LeftToRight_out1_12;
  assign Delay_1_reg_next_12[1] = Delay_1_reg_12[0];
  assign Delay_1_reg_next_12[2] = Delay_1_reg_12[1];
  assign Delay_1_reg_next_12[3] = Delay_1_reg_12[2];
  assign Delay_1_reg_next_12[4] = Delay_1_reg_12[3];
  assign Delay_1_reg_next_12[5] = Delay_1_reg_12[4];
  assign Delay_out_13 = Delay_1_reg_12[5];
  assign Delay_1_reg_next_13[0] = LeftToRight_out1_13;
  assign Delay_1_reg_next_13[1] = Delay_1_reg_13[0];
  assign Delay_1_reg_next_13[2] = Delay_1_reg_13[1];
  assign Delay_1_reg_next_13[3] = Delay_1_reg_13[2];
  assign Delay_1_reg_next_13[4] = Delay_1_reg_13[3];
  assign Delay_1_reg_next_13[5] = Delay_1_reg_13[4];
  assign Delay_out_14 = Delay_1_reg_13[5];
  assign Delay_1_reg_next_14[0] = LeftToRight_out1_14;
  assign Delay_1_reg_next_14[1] = Delay_1_reg_14[0];
  assign Delay_1_reg_next_14[2] = Delay_1_reg_14[1];
  assign Delay_1_reg_next_14[3] = Delay_1_reg_14[2];
  assign Delay_1_reg_next_14[4] = Delay_1_reg_14[3];
  assign Delay_1_reg_next_14[5] = Delay_1_reg_14[4];
  assign Delay_out_15 = Delay_1_reg_14[5];
  assign Delay_1_reg_next_15[0] = LeftToRight_out1_15;
  assign Delay_1_reg_next_15[1] = Delay_1_reg_15[0];
  assign Delay_1_reg_next_15[2] = Delay_1_reg_15[1];
  assign Delay_1_reg_next_15[3] = Delay_1_reg_15[2];
  assign Delay_1_reg_next_15[4] = Delay_1_reg_15[3];
  assign Delay_1_reg_next_15[5] = Delay_1_reg_15[4];
  assign Delay_out_16 = Delay_1_reg_15[5];



  SGBMHDLAl_ip_src_TopLeftToBottomRight u_TopLeftToBottomRight (.clk(clk),
                                                                .reset(reset),
                                                                .enb(enb),
                                                                .matchCostIn_0(matchCostA_0),  // ufix5
                                                                .matchCostIn_1(matchCostA_1),  // ufix5
                                                                .matchCostIn_2(matchCostA_2),  // ufix5
                                                                .matchCostIn_3(matchCostA_3),  // ufix5
                                                                .matchCostIn_4(matchCostA_4),  // ufix5
                                                                .matchCostIn_5(matchCostA_5),  // ufix5
                                                                .matchCostIn_6(matchCostA_6),  // ufix5
                                                                .matchCostIn_7(matchCostA_7),  // ufix5
                                                                .matchCostIn_8(matchCostA_8),  // ufix5
                                                                .matchCostIn_9(matchCostA_9),  // ufix5
                                                                .matchCostIn_10(matchCostA_10),  // ufix5
                                                                .matchCostIn_11(matchCostA_11),  // ufix5
                                                                .matchCostIn_12(matchCostA_12),  // ufix5
                                                                .matchCostIn_13(matchCostA_13),  // ufix5
                                                                .matchCostIn_14(matchCostA_14),  // ufix5
                                                                .matchCostIn_15(matchCostA_15),  // ufix5
                                                                .busIn_vStart(busA_vStart),
                                                                .busIn_valid(busA_valid),
                                                                .tlbrCost_0(TopLeftToBottomRight_out1_0),  // sfix10
                                                                .tlbrCost_1(TopLeftToBottomRight_out1_1),  // sfix10
                                                                .tlbrCost_2(TopLeftToBottomRight_out1_2),  // sfix10
                                                                .tlbrCost_3(TopLeftToBottomRight_out1_3),  // sfix10
                                                                .tlbrCost_4(TopLeftToBottomRight_out1_4),  // sfix10
                                                                .tlbrCost_5(TopLeftToBottomRight_out1_5),  // sfix10
                                                                .tlbrCost_6(TopLeftToBottomRight_out1_6),  // sfix10
                                                                .tlbrCost_7(TopLeftToBottomRight_out1_7),  // sfix10
                                                                .tlbrCost_8(TopLeftToBottomRight_out1_8),  // sfix10
                                                                .tlbrCost_9(TopLeftToBottomRight_out1_9),  // sfix10
                                                                .tlbrCost_10(TopLeftToBottomRight_out1_10),  // sfix10
                                                                .tlbrCost_11(TopLeftToBottomRight_out1_11),  // sfix10
                                                                .tlbrCost_12(TopLeftToBottomRight_out1_12),  // sfix10
                                                                .tlbrCost_13(TopLeftToBottomRight_out1_13),  // sfix10
                                                                .tlbrCost_14(TopLeftToBottomRight_out1_14),  // sfix10
                                                                .tlbrCost_15(TopLeftToBottomRight_out1_15),  // sfix10
                                                                .tlbrBus_valid(TopLeftToBottomRight_out2_valid)
                                                                );

  always @(posedge clk or posedge reset)
    begin : Delay4_1_process
      if (reset == 1'b1) begin
        Delay4_1_reg[0] <= 10'sb0000000000;
        Delay4_1_reg[1] <= 10'sb0000000000;
        Delay4_1_reg[2] <= 10'sb0000000000;
        Delay4_1_reg[3] <= 10'sb0000000000;
        Delay4_1_reg[4] <= 10'sb0000000000;
        Delay4_1_reg[5] <= 10'sb0000000000;
        Delay4_1_reg_1[0] <= 10'sb0000000000;
        Delay4_1_reg_1[1] <= 10'sb0000000000;
        Delay4_1_reg_1[2] <= 10'sb0000000000;
        Delay4_1_reg_1[3] <= 10'sb0000000000;
        Delay4_1_reg_1[4] <= 10'sb0000000000;
        Delay4_1_reg_1[5] <= 10'sb0000000000;
        Delay4_1_reg_2[0] <= 10'sb0000000000;
        Delay4_1_reg_2[1] <= 10'sb0000000000;
        Delay4_1_reg_2[2] <= 10'sb0000000000;
        Delay4_1_reg_2[3] <= 10'sb0000000000;
        Delay4_1_reg_2[4] <= 10'sb0000000000;
        Delay4_1_reg_2[5] <= 10'sb0000000000;
        Delay4_1_reg_3[0] <= 10'sb0000000000;
        Delay4_1_reg_3[1] <= 10'sb0000000000;
        Delay4_1_reg_3[2] <= 10'sb0000000000;
        Delay4_1_reg_3[3] <= 10'sb0000000000;
        Delay4_1_reg_3[4] <= 10'sb0000000000;
        Delay4_1_reg_3[5] <= 10'sb0000000000;
        Delay4_1_reg_4[0] <= 10'sb0000000000;
        Delay4_1_reg_4[1] <= 10'sb0000000000;
        Delay4_1_reg_4[2] <= 10'sb0000000000;
        Delay4_1_reg_4[3] <= 10'sb0000000000;
        Delay4_1_reg_4[4] <= 10'sb0000000000;
        Delay4_1_reg_4[5] <= 10'sb0000000000;
        Delay4_1_reg_5[0] <= 10'sb0000000000;
        Delay4_1_reg_5[1] <= 10'sb0000000000;
        Delay4_1_reg_5[2] <= 10'sb0000000000;
        Delay4_1_reg_5[3] <= 10'sb0000000000;
        Delay4_1_reg_5[4] <= 10'sb0000000000;
        Delay4_1_reg_5[5] <= 10'sb0000000000;
        Delay4_1_reg_6[0] <= 10'sb0000000000;
        Delay4_1_reg_6[1] <= 10'sb0000000000;
        Delay4_1_reg_6[2] <= 10'sb0000000000;
        Delay4_1_reg_6[3] <= 10'sb0000000000;
        Delay4_1_reg_6[4] <= 10'sb0000000000;
        Delay4_1_reg_6[5] <= 10'sb0000000000;
        Delay4_1_reg_7[0] <= 10'sb0000000000;
        Delay4_1_reg_7[1] <= 10'sb0000000000;
        Delay4_1_reg_7[2] <= 10'sb0000000000;
        Delay4_1_reg_7[3] <= 10'sb0000000000;
        Delay4_1_reg_7[4] <= 10'sb0000000000;
        Delay4_1_reg_7[5] <= 10'sb0000000000;
        Delay4_1_reg_8[0] <= 10'sb0000000000;
        Delay4_1_reg_8[1] <= 10'sb0000000000;
        Delay4_1_reg_8[2] <= 10'sb0000000000;
        Delay4_1_reg_8[3] <= 10'sb0000000000;
        Delay4_1_reg_8[4] <= 10'sb0000000000;
        Delay4_1_reg_8[5] <= 10'sb0000000000;
        Delay4_1_reg_9[0] <= 10'sb0000000000;
        Delay4_1_reg_9[1] <= 10'sb0000000000;
        Delay4_1_reg_9[2] <= 10'sb0000000000;
        Delay4_1_reg_9[3] <= 10'sb0000000000;
        Delay4_1_reg_9[4] <= 10'sb0000000000;
        Delay4_1_reg_9[5] <= 10'sb0000000000;
        Delay4_1_reg_10[0] <= 10'sb0000000000;
        Delay4_1_reg_10[1] <= 10'sb0000000000;
        Delay4_1_reg_10[2] <= 10'sb0000000000;
        Delay4_1_reg_10[3] <= 10'sb0000000000;
        Delay4_1_reg_10[4] <= 10'sb0000000000;
        Delay4_1_reg_10[5] <= 10'sb0000000000;
        Delay4_1_reg_11[0] <= 10'sb0000000000;
        Delay4_1_reg_11[1] <= 10'sb0000000000;
        Delay4_1_reg_11[2] <= 10'sb0000000000;
        Delay4_1_reg_11[3] <= 10'sb0000000000;
        Delay4_1_reg_11[4] <= 10'sb0000000000;
        Delay4_1_reg_11[5] <= 10'sb0000000000;
        Delay4_1_reg_12[0] <= 10'sb0000000000;
        Delay4_1_reg_12[1] <= 10'sb0000000000;
        Delay4_1_reg_12[2] <= 10'sb0000000000;
        Delay4_1_reg_12[3] <= 10'sb0000000000;
        Delay4_1_reg_12[4] <= 10'sb0000000000;
        Delay4_1_reg_12[5] <= 10'sb0000000000;
        Delay4_1_reg_13[0] <= 10'sb0000000000;
        Delay4_1_reg_13[1] <= 10'sb0000000000;
        Delay4_1_reg_13[2] <= 10'sb0000000000;
        Delay4_1_reg_13[3] <= 10'sb0000000000;
        Delay4_1_reg_13[4] <= 10'sb0000000000;
        Delay4_1_reg_13[5] <= 10'sb0000000000;
        Delay4_1_reg_14[0] <= 10'sb0000000000;
        Delay4_1_reg_14[1] <= 10'sb0000000000;
        Delay4_1_reg_14[2] <= 10'sb0000000000;
        Delay4_1_reg_14[3] <= 10'sb0000000000;
        Delay4_1_reg_14[4] <= 10'sb0000000000;
        Delay4_1_reg_14[5] <= 10'sb0000000000;
        Delay4_1_reg_15[0] <= 10'sb0000000000;
        Delay4_1_reg_15[1] <= 10'sb0000000000;
        Delay4_1_reg_15[2] <= 10'sb0000000000;
        Delay4_1_reg_15[3] <= 10'sb0000000000;
        Delay4_1_reg_15[4] <= 10'sb0000000000;
        Delay4_1_reg_15[5] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay4_1_reg[0] <= Delay4_1_reg_next[0];
          Delay4_1_reg[1] <= Delay4_1_reg_next[1];
          Delay4_1_reg[2] <= Delay4_1_reg_next[2];
          Delay4_1_reg[3] <= Delay4_1_reg_next[3];
          Delay4_1_reg[4] <= Delay4_1_reg_next[4];
          Delay4_1_reg[5] <= Delay4_1_reg_next[5];
          Delay4_1_reg_1[0] <= Delay4_1_reg_next_1[0];
          Delay4_1_reg_1[1] <= Delay4_1_reg_next_1[1];
          Delay4_1_reg_1[2] <= Delay4_1_reg_next_1[2];
          Delay4_1_reg_1[3] <= Delay4_1_reg_next_1[3];
          Delay4_1_reg_1[4] <= Delay4_1_reg_next_1[4];
          Delay4_1_reg_1[5] <= Delay4_1_reg_next_1[5];
          Delay4_1_reg_2[0] <= Delay4_1_reg_next_2[0];
          Delay4_1_reg_2[1] <= Delay4_1_reg_next_2[1];
          Delay4_1_reg_2[2] <= Delay4_1_reg_next_2[2];
          Delay4_1_reg_2[3] <= Delay4_1_reg_next_2[3];
          Delay4_1_reg_2[4] <= Delay4_1_reg_next_2[4];
          Delay4_1_reg_2[5] <= Delay4_1_reg_next_2[5];
          Delay4_1_reg_3[0] <= Delay4_1_reg_next_3[0];
          Delay4_1_reg_3[1] <= Delay4_1_reg_next_3[1];
          Delay4_1_reg_3[2] <= Delay4_1_reg_next_3[2];
          Delay4_1_reg_3[3] <= Delay4_1_reg_next_3[3];
          Delay4_1_reg_3[4] <= Delay4_1_reg_next_3[4];
          Delay4_1_reg_3[5] <= Delay4_1_reg_next_3[5];
          Delay4_1_reg_4[0] <= Delay4_1_reg_next_4[0];
          Delay4_1_reg_4[1] <= Delay4_1_reg_next_4[1];
          Delay4_1_reg_4[2] <= Delay4_1_reg_next_4[2];
          Delay4_1_reg_4[3] <= Delay4_1_reg_next_4[3];
          Delay4_1_reg_4[4] <= Delay4_1_reg_next_4[4];
          Delay4_1_reg_4[5] <= Delay4_1_reg_next_4[5];
          Delay4_1_reg_5[0] <= Delay4_1_reg_next_5[0];
          Delay4_1_reg_5[1] <= Delay4_1_reg_next_5[1];
          Delay4_1_reg_5[2] <= Delay4_1_reg_next_5[2];
          Delay4_1_reg_5[3] <= Delay4_1_reg_next_5[3];
          Delay4_1_reg_5[4] <= Delay4_1_reg_next_5[4];
          Delay4_1_reg_5[5] <= Delay4_1_reg_next_5[5];
          Delay4_1_reg_6[0] <= Delay4_1_reg_next_6[0];
          Delay4_1_reg_6[1] <= Delay4_1_reg_next_6[1];
          Delay4_1_reg_6[2] <= Delay4_1_reg_next_6[2];
          Delay4_1_reg_6[3] <= Delay4_1_reg_next_6[3];
          Delay4_1_reg_6[4] <= Delay4_1_reg_next_6[4];
          Delay4_1_reg_6[5] <= Delay4_1_reg_next_6[5];
          Delay4_1_reg_7[0] <= Delay4_1_reg_next_7[0];
          Delay4_1_reg_7[1] <= Delay4_1_reg_next_7[1];
          Delay4_1_reg_7[2] <= Delay4_1_reg_next_7[2];
          Delay4_1_reg_7[3] <= Delay4_1_reg_next_7[3];
          Delay4_1_reg_7[4] <= Delay4_1_reg_next_7[4];
          Delay4_1_reg_7[5] <= Delay4_1_reg_next_7[5];
          Delay4_1_reg_8[0] <= Delay4_1_reg_next_8[0];
          Delay4_1_reg_8[1] <= Delay4_1_reg_next_8[1];
          Delay4_1_reg_8[2] <= Delay4_1_reg_next_8[2];
          Delay4_1_reg_8[3] <= Delay4_1_reg_next_8[3];
          Delay4_1_reg_8[4] <= Delay4_1_reg_next_8[4];
          Delay4_1_reg_8[5] <= Delay4_1_reg_next_8[5];
          Delay4_1_reg_9[0] <= Delay4_1_reg_next_9[0];
          Delay4_1_reg_9[1] <= Delay4_1_reg_next_9[1];
          Delay4_1_reg_9[2] <= Delay4_1_reg_next_9[2];
          Delay4_1_reg_9[3] <= Delay4_1_reg_next_9[3];
          Delay4_1_reg_9[4] <= Delay4_1_reg_next_9[4];
          Delay4_1_reg_9[5] <= Delay4_1_reg_next_9[5];
          Delay4_1_reg_10[0] <= Delay4_1_reg_next_10[0];
          Delay4_1_reg_10[1] <= Delay4_1_reg_next_10[1];
          Delay4_1_reg_10[2] <= Delay4_1_reg_next_10[2];
          Delay4_1_reg_10[3] <= Delay4_1_reg_next_10[3];
          Delay4_1_reg_10[4] <= Delay4_1_reg_next_10[4];
          Delay4_1_reg_10[5] <= Delay4_1_reg_next_10[5];
          Delay4_1_reg_11[0] <= Delay4_1_reg_next_11[0];
          Delay4_1_reg_11[1] <= Delay4_1_reg_next_11[1];
          Delay4_1_reg_11[2] <= Delay4_1_reg_next_11[2];
          Delay4_1_reg_11[3] <= Delay4_1_reg_next_11[3];
          Delay4_1_reg_11[4] <= Delay4_1_reg_next_11[4];
          Delay4_1_reg_11[5] <= Delay4_1_reg_next_11[5];
          Delay4_1_reg_12[0] <= Delay4_1_reg_next_12[0];
          Delay4_1_reg_12[1] <= Delay4_1_reg_next_12[1];
          Delay4_1_reg_12[2] <= Delay4_1_reg_next_12[2];
          Delay4_1_reg_12[3] <= Delay4_1_reg_next_12[3];
          Delay4_1_reg_12[4] <= Delay4_1_reg_next_12[4];
          Delay4_1_reg_12[5] <= Delay4_1_reg_next_12[5];
          Delay4_1_reg_13[0] <= Delay4_1_reg_next_13[0];
          Delay4_1_reg_13[1] <= Delay4_1_reg_next_13[1];
          Delay4_1_reg_13[2] <= Delay4_1_reg_next_13[2];
          Delay4_1_reg_13[3] <= Delay4_1_reg_next_13[3];
          Delay4_1_reg_13[4] <= Delay4_1_reg_next_13[4];
          Delay4_1_reg_13[5] <= Delay4_1_reg_next_13[5];
          Delay4_1_reg_14[0] <= Delay4_1_reg_next_14[0];
          Delay4_1_reg_14[1] <= Delay4_1_reg_next_14[1];
          Delay4_1_reg_14[2] <= Delay4_1_reg_next_14[2];
          Delay4_1_reg_14[3] <= Delay4_1_reg_next_14[3];
          Delay4_1_reg_14[4] <= Delay4_1_reg_next_14[4];
          Delay4_1_reg_14[5] <= Delay4_1_reg_next_14[5];
          Delay4_1_reg_15[0] <= Delay4_1_reg_next_15[0];
          Delay4_1_reg_15[1] <= Delay4_1_reg_next_15[1];
          Delay4_1_reg_15[2] <= Delay4_1_reg_next_15[2];
          Delay4_1_reg_15[3] <= Delay4_1_reg_next_15[3];
          Delay4_1_reg_15[4] <= Delay4_1_reg_next_15[4];
          Delay4_1_reg_15[5] <= Delay4_1_reg_next_15[5];
        end
      end
    end

  assign Delay4_1_reg_next[0] = TopLeftToBottomRight_out1_0;
  assign Delay4_1_reg_next[1] = Delay4_1_reg[0];
  assign Delay4_1_reg_next[2] = Delay4_1_reg[1];
  assign Delay4_1_reg_next[3] = Delay4_1_reg[2];
  assign Delay4_1_reg_next[4] = Delay4_1_reg[3];
  assign Delay4_1_reg_next[5] = Delay4_1_reg[4];
  assign Delay4_out_1 = Delay4_1_reg[5];
  assign Delay4_1_reg_next_1[0] = TopLeftToBottomRight_out1_1;
  assign Delay4_1_reg_next_1[1] = Delay4_1_reg_1[0];
  assign Delay4_1_reg_next_1[2] = Delay4_1_reg_1[1];
  assign Delay4_1_reg_next_1[3] = Delay4_1_reg_1[2];
  assign Delay4_1_reg_next_1[4] = Delay4_1_reg_1[3];
  assign Delay4_1_reg_next_1[5] = Delay4_1_reg_1[4];
  assign Delay4_out_2 = Delay4_1_reg_1[5];
  assign Delay4_1_reg_next_2[0] = TopLeftToBottomRight_out1_2;
  assign Delay4_1_reg_next_2[1] = Delay4_1_reg_2[0];
  assign Delay4_1_reg_next_2[2] = Delay4_1_reg_2[1];
  assign Delay4_1_reg_next_2[3] = Delay4_1_reg_2[2];
  assign Delay4_1_reg_next_2[4] = Delay4_1_reg_2[3];
  assign Delay4_1_reg_next_2[5] = Delay4_1_reg_2[4];
  assign Delay4_out_3 = Delay4_1_reg_2[5];
  assign Delay4_1_reg_next_3[0] = TopLeftToBottomRight_out1_3;
  assign Delay4_1_reg_next_3[1] = Delay4_1_reg_3[0];
  assign Delay4_1_reg_next_3[2] = Delay4_1_reg_3[1];
  assign Delay4_1_reg_next_3[3] = Delay4_1_reg_3[2];
  assign Delay4_1_reg_next_3[4] = Delay4_1_reg_3[3];
  assign Delay4_1_reg_next_3[5] = Delay4_1_reg_3[4];
  assign Delay4_out_4 = Delay4_1_reg_3[5];
  assign Delay4_1_reg_next_4[0] = TopLeftToBottomRight_out1_4;
  assign Delay4_1_reg_next_4[1] = Delay4_1_reg_4[0];
  assign Delay4_1_reg_next_4[2] = Delay4_1_reg_4[1];
  assign Delay4_1_reg_next_4[3] = Delay4_1_reg_4[2];
  assign Delay4_1_reg_next_4[4] = Delay4_1_reg_4[3];
  assign Delay4_1_reg_next_4[5] = Delay4_1_reg_4[4];
  assign Delay4_out_5 = Delay4_1_reg_4[5];
  assign Delay4_1_reg_next_5[0] = TopLeftToBottomRight_out1_5;
  assign Delay4_1_reg_next_5[1] = Delay4_1_reg_5[0];
  assign Delay4_1_reg_next_5[2] = Delay4_1_reg_5[1];
  assign Delay4_1_reg_next_5[3] = Delay4_1_reg_5[2];
  assign Delay4_1_reg_next_5[4] = Delay4_1_reg_5[3];
  assign Delay4_1_reg_next_5[5] = Delay4_1_reg_5[4];
  assign Delay4_out_6 = Delay4_1_reg_5[5];
  assign Delay4_1_reg_next_6[0] = TopLeftToBottomRight_out1_6;
  assign Delay4_1_reg_next_6[1] = Delay4_1_reg_6[0];
  assign Delay4_1_reg_next_6[2] = Delay4_1_reg_6[1];
  assign Delay4_1_reg_next_6[3] = Delay4_1_reg_6[2];
  assign Delay4_1_reg_next_6[4] = Delay4_1_reg_6[3];
  assign Delay4_1_reg_next_6[5] = Delay4_1_reg_6[4];
  assign Delay4_out_7 = Delay4_1_reg_6[5];
  assign Delay4_1_reg_next_7[0] = TopLeftToBottomRight_out1_7;
  assign Delay4_1_reg_next_7[1] = Delay4_1_reg_7[0];
  assign Delay4_1_reg_next_7[2] = Delay4_1_reg_7[1];
  assign Delay4_1_reg_next_7[3] = Delay4_1_reg_7[2];
  assign Delay4_1_reg_next_7[4] = Delay4_1_reg_7[3];
  assign Delay4_1_reg_next_7[5] = Delay4_1_reg_7[4];
  assign Delay4_out_8 = Delay4_1_reg_7[5];
  assign Delay4_1_reg_next_8[0] = TopLeftToBottomRight_out1_8;
  assign Delay4_1_reg_next_8[1] = Delay4_1_reg_8[0];
  assign Delay4_1_reg_next_8[2] = Delay4_1_reg_8[1];
  assign Delay4_1_reg_next_8[3] = Delay4_1_reg_8[2];
  assign Delay4_1_reg_next_8[4] = Delay4_1_reg_8[3];
  assign Delay4_1_reg_next_8[5] = Delay4_1_reg_8[4];
  assign Delay4_out_9 = Delay4_1_reg_8[5];
  assign Delay4_1_reg_next_9[0] = TopLeftToBottomRight_out1_9;
  assign Delay4_1_reg_next_9[1] = Delay4_1_reg_9[0];
  assign Delay4_1_reg_next_9[2] = Delay4_1_reg_9[1];
  assign Delay4_1_reg_next_9[3] = Delay4_1_reg_9[2];
  assign Delay4_1_reg_next_9[4] = Delay4_1_reg_9[3];
  assign Delay4_1_reg_next_9[5] = Delay4_1_reg_9[4];
  assign Delay4_out_10 = Delay4_1_reg_9[5];
  assign Delay4_1_reg_next_10[0] = TopLeftToBottomRight_out1_10;
  assign Delay4_1_reg_next_10[1] = Delay4_1_reg_10[0];
  assign Delay4_1_reg_next_10[2] = Delay4_1_reg_10[1];
  assign Delay4_1_reg_next_10[3] = Delay4_1_reg_10[2];
  assign Delay4_1_reg_next_10[4] = Delay4_1_reg_10[3];
  assign Delay4_1_reg_next_10[5] = Delay4_1_reg_10[4];
  assign Delay4_out_11 = Delay4_1_reg_10[5];
  assign Delay4_1_reg_next_11[0] = TopLeftToBottomRight_out1_11;
  assign Delay4_1_reg_next_11[1] = Delay4_1_reg_11[0];
  assign Delay4_1_reg_next_11[2] = Delay4_1_reg_11[1];
  assign Delay4_1_reg_next_11[3] = Delay4_1_reg_11[2];
  assign Delay4_1_reg_next_11[4] = Delay4_1_reg_11[3];
  assign Delay4_1_reg_next_11[5] = Delay4_1_reg_11[4];
  assign Delay4_out_12 = Delay4_1_reg_11[5];
  assign Delay4_1_reg_next_12[0] = TopLeftToBottomRight_out1_12;
  assign Delay4_1_reg_next_12[1] = Delay4_1_reg_12[0];
  assign Delay4_1_reg_next_12[2] = Delay4_1_reg_12[1];
  assign Delay4_1_reg_next_12[3] = Delay4_1_reg_12[2];
  assign Delay4_1_reg_next_12[4] = Delay4_1_reg_12[3];
  assign Delay4_1_reg_next_12[5] = Delay4_1_reg_12[4];
  assign Delay4_out_13 = Delay4_1_reg_12[5];
  assign Delay4_1_reg_next_13[0] = TopLeftToBottomRight_out1_13;
  assign Delay4_1_reg_next_13[1] = Delay4_1_reg_13[0];
  assign Delay4_1_reg_next_13[2] = Delay4_1_reg_13[1];
  assign Delay4_1_reg_next_13[3] = Delay4_1_reg_13[2];
  assign Delay4_1_reg_next_13[4] = Delay4_1_reg_13[3];
  assign Delay4_1_reg_next_13[5] = Delay4_1_reg_13[4];
  assign Delay4_out_14 = Delay4_1_reg_13[5];
  assign Delay4_1_reg_next_14[0] = TopLeftToBottomRight_out1_14;
  assign Delay4_1_reg_next_14[1] = Delay4_1_reg_14[0];
  assign Delay4_1_reg_next_14[2] = Delay4_1_reg_14[1];
  assign Delay4_1_reg_next_14[3] = Delay4_1_reg_14[2];
  assign Delay4_1_reg_next_14[4] = Delay4_1_reg_14[3];
  assign Delay4_1_reg_next_14[5] = Delay4_1_reg_14[4];
  assign Delay4_out_15 = Delay4_1_reg_14[5];
  assign Delay4_1_reg_next_15[0] = TopLeftToBottomRight_out1_15;
  assign Delay4_1_reg_next_15[1] = Delay4_1_reg_15[0];
  assign Delay4_1_reg_next_15[2] = Delay4_1_reg_15[1];
  assign Delay4_1_reg_next_15[3] = Delay4_1_reg_15[2];
  assign Delay4_1_reg_next_15[4] = Delay4_1_reg_15[3];
  assign Delay4_1_reg_next_15[5] = Delay4_1_reg_15[4];
  assign Delay4_out_16 = Delay4_1_reg_15[5];



  assign Delay_out1[0] = Delay_out_1;
  assign Delay_out1[1] = Delay_out_2;
  assign Delay_out1[2] = Delay_out_3;
  assign Delay_out1[3] = Delay_out_4;
  assign Delay_out1[4] = Delay_out_5;
  assign Delay_out1[5] = Delay_out_6;
  assign Delay_out1[6] = Delay_out_7;
  assign Delay_out1[7] = Delay_out_8;
  assign Delay_out1[8] = Delay_out_9;
  assign Delay_out1[9] = Delay_out_10;
  assign Delay_out1[10] = Delay_out_11;
  assign Delay_out1[11] = Delay_out_12;
  assign Delay_out1[12] = Delay_out_13;
  assign Delay_out1[13] = Delay_out_14;
  assign Delay_out1[14] = Delay_out_15;
  assign Delay_out1[15] = Delay_out_16;

  assign Delay4_out1[0] = Delay4_out_1;
  assign Delay4_out1[1] = Delay4_out_2;
  assign Delay4_out1[2] = Delay4_out_3;
  assign Delay4_out1[3] = Delay4_out_4;
  assign Delay4_out1[4] = Delay4_out_5;
  assign Delay4_out1[5] = Delay4_out_6;
  assign Delay4_out1[6] = Delay4_out_7;
  assign Delay4_out1[7] = Delay4_out_8;
  assign Delay4_out1[8] = Delay4_out_9;
  assign Delay4_out1[9] = Delay4_out_10;
  assign Delay4_out1[10] = Delay4_out_11;
  assign Delay4_out1[11] = Delay4_out_12;
  assign Delay4_out1[12] = Delay4_out_13;
  assign Delay4_out1[13] = Delay4_out_14;
  assign Delay4_out1[14] = Delay4_out_15;
  assign Delay4_out1[15] = Delay4_out_16;

  assign Sum_1 = {Delay_out1[0][9], Delay_out1[0]};
  assign Sum_2 = {Delay4_out1[0][9], Delay4_out1[0]};
  assign Sum_out1[0] = Sum_1 + Sum_2;
  assign Sum_3 = {Delay_out1[1][9], Delay_out1[1]};
  assign Sum_4 = {Delay4_out1[1][9], Delay4_out1[1]};
  assign Sum_out1[1] = Sum_3 + Sum_4;
  assign Sum_5 = {Delay_out1[2][9], Delay_out1[2]};
  assign Sum_6 = {Delay4_out1[2][9], Delay4_out1[2]};
  assign Sum_out1[2] = Sum_5 + Sum_6;
  assign Sum_7 = {Delay_out1[3][9], Delay_out1[3]};
  assign Sum_8 = {Delay4_out1[3][9], Delay4_out1[3]};
  assign Sum_out1[3] = Sum_7 + Sum_8;
  assign Sum_9 = {Delay_out1[4][9], Delay_out1[4]};
  assign Sum_10 = {Delay4_out1[4][9], Delay4_out1[4]};
  assign Sum_out1[4] = Sum_9 + Sum_10;
  assign Sum_11 = {Delay_out1[5][9], Delay_out1[5]};
  assign Sum_12 = {Delay4_out1[5][9], Delay4_out1[5]};
  assign Sum_out1[5] = Sum_11 + Sum_12;
  assign Sum_13 = {Delay_out1[6][9], Delay_out1[6]};
  assign Sum_14 = {Delay4_out1[6][9], Delay4_out1[6]};
  assign Sum_out1[6] = Sum_13 + Sum_14;
  assign Sum_15 = {Delay_out1[7][9], Delay_out1[7]};
  assign Sum_16 = {Delay4_out1[7][9], Delay4_out1[7]};
  assign Sum_out1[7] = Sum_15 + Sum_16;
  assign Sum_17 = {Delay_out1[8][9], Delay_out1[8]};
  assign Sum_18 = {Delay4_out1[8][9], Delay4_out1[8]};
  assign Sum_out1[8] = Sum_17 + Sum_18;
  assign Sum_19 = {Delay_out1[9][9], Delay_out1[9]};
  assign Sum_20 = {Delay4_out1[9][9], Delay4_out1[9]};
  assign Sum_out1[9] = Sum_19 + Sum_20;
  assign Sum_21 = {Delay_out1[10][9], Delay_out1[10]};
  assign Sum_22 = {Delay4_out1[10][9], Delay4_out1[10]};
  assign Sum_out1[10] = Sum_21 + Sum_22;
  assign Sum_23 = {Delay_out1[11][9], Delay_out1[11]};
  assign Sum_24 = {Delay4_out1[11][9], Delay4_out1[11]};
  assign Sum_out1[11] = Sum_23 + Sum_24;
  assign Sum_25 = {Delay_out1[12][9], Delay_out1[12]};
  assign Sum_26 = {Delay4_out1[12][9], Delay4_out1[12]};
  assign Sum_out1[12] = Sum_25 + Sum_26;
  assign Sum_27 = {Delay_out1[13][9], Delay_out1[13]};
  assign Sum_28 = {Delay4_out1[13][9], Delay4_out1[13]};
  assign Sum_out1[13] = Sum_27 + Sum_28;
  assign Sum_29 = {Delay_out1[14][9], Delay_out1[14]};
  assign Sum_30 = {Delay4_out1[14][9], Delay4_out1[14]};
  assign Sum_out1[14] = Sum_29 + Sum_30;
  assign Sum_31 = {Delay_out1[15][9], Delay_out1[15]};
  assign Sum_32 = {Delay4_out1[15][9], Delay4_out1[15]};
  assign Sum_out1[15] = Sum_31 + Sum_32;



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1[0] <= 11'sb00000000000;
        Delay10_out1[1] <= 11'sb00000000000;
        Delay10_out1[2] <= 11'sb00000000000;
        Delay10_out1[3] <= 11'sb00000000000;
        Delay10_out1[4] <= 11'sb00000000000;
        Delay10_out1[5] <= 11'sb00000000000;
        Delay10_out1[6] <= 11'sb00000000000;
        Delay10_out1[7] <= 11'sb00000000000;
        Delay10_out1[8] <= 11'sb00000000000;
        Delay10_out1[9] <= 11'sb00000000000;
        Delay10_out1[10] <= 11'sb00000000000;
        Delay10_out1[11] <= 11'sb00000000000;
        Delay10_out1[12] <= 11'sb00000000000;
        Delay10_out1[13] <= 11'sb00000000000;
        Delay10_out1[14] <= 11'sb00000000000;
        Delay10_out1[15] <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1[0] <= Sum_out1[0];
          Delay10_out1[1] <= Sum_out1[1];
          Delay10_out1[2] <= Sum_out1[2];
          Delay10_out1[3] <= Sum_out1[3];
          Delay10_out1[4] <= Sum_out1[4];
          Delay10_out1[5] <= Sum_out1[5];
          Delay10_out1[6] <= Sum_out1[6];
          Delay10_out1[7] <= Sum_out1[7];
          Delay10_out1[8] <= Sum_out1[8];
          Delay10_out1[9] <= Sum_out1[9];
          Delay10_out1[10] <= Sum_out1[10];
          Delay10_out1[11] <= Sum_out1[11];
          Delay10_out1[12] <= Sum_out1[12];
          Delay10_out1[13] <= Sum_out1[13];
          Delay10_out1[14] <= Sum_out1[14];
          Delay10_out1[15] <= Sum_out1[15];
        end
      end
    end



  SGBMHDLAl_ip_src_TopToBottom u_TopToBottom (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .matchCostIn_0(matchCostA_0),  // ufix5
                                              .matchCostIn_1(matchCostA_1),  // ufix5
                                              .matchCostIn_2(matchCostA_2),  // ufix5
                                              .matchCostIn_3(matchCostA_3),  // ufix5
                                              .matchCostIn_4(matchCostA_4),  // ufix5
                                              .matchCostIn_5(matchCostA_5),  // ufix5
                                              .matchCostIn_6(matchCostA_6),  // ufix5
                                              .matchCostIn_7(matchCostA_7),  // ufix5
                                              .matchCostIn_8(matchCostA_8),  // ufix5
                                              .matchCostIn_9(matchCostA_9),  // ufix5
                                              .matchCostIn_10(matchCostA_10),  // ufix5
                                              .matchCostIn_11(matchCostA_11),  // ufix5
                                              .matchCostIn_12(matchCostA_12),  // ufix5
                                              .matchCostIn_13(matchCostA_13),  // ufix5
                                              .matchCostIn_14(matchCostA_14),  // ufix5
                                              .matchCostIn_15(matchCostA_15),  // ufix5
                                              .busIn_valid(busA_valid),
                                              .tbOut_0(TopToBottom_out1_0),  // sfix10
                                              .tbOut_1(TopToBottom_out1_1),  // sfix10
                                              .tbOut_2(TopToBottom_out1_2),  // sfix10
                                              .tbOut_3(TopToBottom_out1_3),  // sfix10
                                              .tbOut_4(TopToBottom_out1_4),  // sfix10
                                              .tbOut_5(TopToBottom_out1_5),  // sfix10
                                              .tbOut_6(TopToBottom_out1_6),  // sfix10
                                              .tbOut_7(TopToBottom_out1_7),  // sfix10
                                              .tbOut_8(TopToBottom_out1_8),  // sfix10
                                              .tbOut_9(TopToBottom_out1_9),  // sfix10
                                              .tbOut_10(TopToBottom_out1_10),  // sfix10
                                              .tbOut_11(TopToBottom_out1_11),  // sfix10
                                              .tbOut_12(TopToBottom_out1_12),  // sfix10
                                              .tbOut_13(TopToBottom_out1_13),  // sfix10
                                              .tbOut_14(TopToBottom_out1_14),  // sfix10
                                              .tbOut_15(TopToBottom_out1_15),  // sfix10
                                              .tbBus_valid(TopToBottom_out2_valid)
                                              );

  always @(posedge clk or posedge reset)
    begin : Delay1_1_process
      if (reset == 1'b1) begin
        Delay1_1_reg[0] <= 10'sb0000000000;
        Delay1_1_reg[1] <= 10'sb0000000000;
        Delay1_1_reg[2] <= 10'sb0000000000;
        Delay1_1_reg[3] <= 10'sb0000000000;
        Delay1_1_reg[4] <= 10'sb0000000000;
        Delay1_1_reg[5] <= 10'sb0000000000;
        Delay1_1_reg_1[0] <= 10'sb0000000000;
        Delay1_1_reg_1[1] <= 10'sb0000000000;
        Delay1_1_reg_1[2] <= 10'sb0000000000;
        Delay1_1_reg_1[3] <= 10'sb0000000000;
        Delay1_1_reg_1[4] <= 10'sb0000000000;
        Delay1_1_reg_1[5] <= 10'sb0000000000;
        Delay1_1_reg_2[0] <= 10'sb0000000000;
        Delay1_1_reg_2[1] <= 10'sb0000000000;
        Delay1_1_reg_2[2] <= 10'sb0000000000;
        Delay1_1_reg_2[3] <= 10'sb0000000000;
        Delay1_1_reg_2[4] <= 10'sb0000000000;
        Delay1_1_reg_2[5] <= 10'sb0000000000;
        Delay1_1_reg_3[0] <= 10'sb0000000000;
        Delay1_1_reg_3[1] <= 10'sb0000000000;
        Delay1_1_reg_3[2] <= 10'sb0000000000;
        Delay1_1_reg_3[3] <= 10'sb0000000000;
        Delay1_1_reg_3[4] <= 10'sb0000000000;
        Delay1_1_reg_3[5] <= 10'sb0000000000;
        Delay1_1_reg_4[0] <= 10'sb0000000000;
        Delay1_1_reg_4[1] <= 10'sb0000000000;
        Delay1_1_reg_4[2] <= 10'sb0000000000;
        Delay1_1_reg_4[3] <= 10'sb0000000000;
        Delay1_1_reg_4[4] <= 10'sb0000000000;
        Delay1_1_reg_4[5] <= 10'sb0000000000;
        Delay1_1_reg_5[0] <= 10'sb0000000000;
        Delay1_1_reg_5[1] <= 10'sb0000000000;
        Delay1_1_reg_5[2] <= 10'sb0000000000;
        Delay1_1_reg_5[3] <= 10'sb0000000000;
        Delay1_1_reg_5[4] <= 10'sb0000000000;
        Delay1_1_reg_5[5] <= 10'sb0000000000;
        Delay1_1_reg_6[0] <= 10'sb0000000000;
        Delay1_1_reg_6[1] <= 10'sb0000000000;
        Delay1_1_reg_6[2] <= 10'sb0000000000;
        Delay1_1_reg_6[3] <= 10'sb0000000000;
        Delay1_1_reg_6[4] <= 10'sb0000000000;
        Delay1_1_reg_6[5] <= 10'sb0000000000;
        Delay1_1_reg_7[0] <= 10'sb0000000000;
        Delay1_1_reg_7[1] <= 10'sb0000000000;
        Delay1_1_reg_7[2] <= 10'sb0000000000;
        Delay1_1_reg_7[3] <= 10'sb0000000000;
        Delay1_1_reg_7[4] <= 10'sb0000000000;
        Delay1_1_reg_7[5] <= 10'sb0000000000;
        Delay1_1_reg_8[0] <= 10'sb0000000000;
        Delay1_1_reg_8[1] <= 10'sb0000000000;
        Delay1_1_reg_8[2] <= 10'sb0000000000;
        Delay1_1_reg_8[3] <= 10'sb0000000000;
        Delay1_1_reg_8[4] <= 10'sb0000000000;
        Delay1_1_reg_8[5] <= 10'sb0000000000;
        Delay1_1_reg_9[0] <= 10'sb0000000000;
        Delay1_1_reg_9[1] <= 10'sb0000000000;
        Delay1_1_reg_9[2] <= 10'sb0000000000;
        Delay1_1_reg_9[3] <= 10'sb0000000000;
        Delay1_1_reg_9[4] <= 10'sb0000000000;
        Delay1_1_reg_9[5] <= 10'sb0000000000;
        Delay1_1_reg_10[0] <= 10'sb0000000000;
        Delay1_1_reg_10[1] <= 10'sb0000000000;
        Delay1_1_reg_10[2] <= 10'sb0000000000;
        Delay1_1_reg_10[3] <= 10'sb0000000000;
        Delay1_1_reg_10[4] <= 10'sb0000000000;
        Delay1_1_reg_10[5] <= 10'sb0000000000;
        Delay1_1_reg_11[0] <= 10'sb0000000000;
        Delay1_1_reg_11[1] <= 10'sb0000000000;
        Delay1_1_reg_11[2] <= 10'sb0000000000;
        Delay1_1_reg_11[3] <= 10'sb0000000000;
        Delay1_1_reg_11[4] <= 10'sb0000000000;
        Delay1_1_reg_11[5] <= 10'sb0000000000;
        Delay1_1_reg_12[0] <= 10'sb0000000000;
        Delay1_1_reg_12[1] <= 10'sb0000000000;
        Delay1_1_reg_12[2] <= 10'sb0000000000;
        Delay1_1_reg_12[3] <= 10'sb0000000000;
        Delay1_1_reg_12[4] <= 10'sb0000000000;
        Delay1_1_reg_12[5] <= 10'sb0000000000;
        Delay1_1_reg_13[0] <= 10'sb0000000000;
        Delay1_1_reg_13[1] <= 10'sb0000000000;
        Delay1_1_reg_13[2] <= 10'sb0000000000;
        Delay1_1_reg_13[3] <= 10'sb0000000000;
        Delay1_1_reg_13[4] <= 10'sb0000000000;
        Delay1_1_reg_13[5] <= 10'sb0000000000;
        Delay1_1_reg_14[0] <= 10'sb0000000000;
        Delay1_1_reg_14[1] <= 10'sb0000000000;
        Delay1_1_reg_14[2] <= 10'sb0000000000;
        Delay1_1_reg_14[3] <= 10'sb0000000000;
        Delay1_1_reg_14[4] <= 10'sb0000000000;
        Delay1_1_reg_14[5] <= 10'sb0000000000;
        Delay1_1_reg_15[0] <= 10'sb0000000000;
        Delay1_1_reg_15[1] <= 10'sb0000000000;
        Delay1_1_reg_15[2] <= 10'sb0000000000;
        Delay1_1_reg_15[3] <= 10'sb0000000000;
        Delay1_1_reg_15[4] <= 10'sb0000000000;
        Delay1_1_reg_15[5] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay1_1_reg[0] <= Delay1_1_reg_next[0];
          Delay1_1_reg[1] <= Delay1_1_reg_next[1];
          Delay1_1_reg[2] <= Delay1_1_reg_next[2];
          Delay1_1_reg[3] <= Delay1_1_reg_next[3];
          Delay1_1_reg[4] <= Delay1_1_reg_next[4];
          Delay1_1_reg[5] <= Delay1_1_reg_next[5];
          Delay1_1_reg_1[0] <= Delay1_1_reg_next_1[0];
          Delay1_1_reg_1[1] <= Delay1_1_reg_next_1[1];
          Delay1_1_reg_1[2] <= Delay1_1_reg_next_1[2];
          Delay1_1_reg_1[3] <= Delay1_1_reg_next_1[3];
          Delay1_1_reg_1[4] <= Delay1_1_reg_next_1[4];
          Delay1_1_reg_1[5] <= Delay1_1_reg_next_1[5];
          Delay1_1_reg_2[0] <= Delay1_1_reg_next_2[0];
          Delay1_1_reg_2[1] <= Delay1_1_reg_next_2[1];
          Delay1_1_reg_2[2] <= Delay1_1_reg_next_2[2];
          Delay1_1_reg_2[3] <= Delay1_1_reg_next_2[3];
          Delay1_1_reg_2[4] <= Delay1_1_reg_next_2[4];
          Delay1_1_reg_2[5] <= Delay1_1_reg_next_2[5];
          Delay1_1_reg_3[0] <= Delay1_1_reg_next_3[0];
          Delay1_1_reg_3[1] <= Delay1_1_reg_next_3[1];
          Delay1_1_reg_3[2] <= Delay1_1_reg_next_3[2];
          Delay1_1_reg_3[3] <= Delay1_1_reg_next_3[3];
          Delay1_1_reg_3[4] <= Delay1_1_reg_next_3[4];
          Delay1_1_reg_3[5] <= Delay1_1_reg_next_3[5];
          Delay1_1_reg_4[0] <= Delay1_1_reg_next_4[0];
          Delay1_1_reg_4[1] <= Delay1_1_reg_next_4[1];
          Delay1_1_reg_4[2] <= Delay1_1_reg_next_4[2];
          Delay1_1_reg_4[3] <= Delay1_1_reg_next_4[3];
          Delay1_1_reg_4[4] <= Delay1_1_reg_next_4[4];
          Delay1_1_reg_4[5] <= Delay1_1_reg_next_4[5];
          Delay1_1_reg_5[0] <= Delay1_1_reg_next_5[0];
          Delay1_1_reg_5[1] <= Delay1_1_reg_next_5[1];
          Delay1_1_reg_5[2] <= Delay1_1_reg_next_5[2];
          Delay1_1_reg_5[3] <= Delay1_1_reg_next_5[3];
          Delay1_1_reg_5[4] <= Delay1_1_reg_next_5[4];
          Delay1_1_reg_5[5] <= Delay1_1_reg_next_5[5];
          Delay1_1_reg_6[0] <= Delay1_1_reg_next_6[0];
          Delay1_1_reg_6[1] <= Delay1_1_reg_next_6[1];
          Delay1_1_reg_6[2] <= Delay1_1_reg_next_6[2];
          Delay1_1_reg_6[3] <= Delay1_1_reg_next_6[3];
          Delay1_1_reg_6[4] <= Delay1_1_reg_next_6[4];
          Delay1_1_reg_6[5] <= Delay1_1_reg_next_6[5];
          Delay1_1_reg_7[0] <= Delay1_1_reg_next_7[0];
          Delay1_1_reg_7[1] <= Delay1_1_reg_next_7[1];
          Delay1_1_reg_7[2] <= Delay1_1_reg_next_7[2];
          Delay1_1_reg_7[3] <= Delay1_1_reg_next_7[3];
          Delay1_1_reg_7[4] <= Delay1_1_reg_next_7[4];
          Delay1_1_reg_7[5] <= Delay1_1_reg_next_7[5];
          Delay1_1_reg_8[0] <= Delay1_1_reg_next_8[0];
          Delay1_1_reg_8[1] <= Delay1_1_reg_next_8[1];
          Delay1_1_reg_8[2] <= Delay1_1_reg_next_8[2];
          Delay1_1_reg_8[3] <= Delay1_1_reg_next_8[3];
          Delay1_1_reg_8[4] <= Delay1_1_reg_next_8[4];
          Delay1_1_reg_8[5] <= Delay1_1_reg_next_8[5];
          Delay1_1_reg_9[0] <= Delay1_1_reg_next_9[0];
          Delay1_1_reg_9[1] <= Delay1_1_reg_next_9[1];
          Delay1_1_reg_9[2] <= Delay1_1_reg_next_9[2];
          Delay1_1_reg_9[3] <= Delay1_1_reg_next_9[3];
          Delay1_1_reg_9[4] <= Delay1_1_reg_next_9[4];
          Delay1_1_reg_9[5] <= Delay1_1_reg_next_9[5];
          Delay1_1_reg_10[0] <= Delay1_1_reg_next_10[0];
          Delay1_1_reg_10[1] <= Delay1_1_reg_next_10[1];
          Delay1_1_reg_10[2] <= Delay1_1_reg_next_10[2];
          Delay1_1_reg_10[3] <= Delay1_1_reg_next_10[3];
          Delay1_1_reg_10[4] <= Delay1_1_reg_next_10[4];
          Delay1_1_reg_10[5] <= Delay1_1_reg_next_10[5];
          Delay1_1_reg_11[0] <= Delay1_1_reg_next_11[0];
          Delay1_1_reg_11[1] <= Delay1_1_reg_next_11[1];
          Delay1_1_reg_11[2] <= Delay1_1_reg_next_11[2];
          Delay1_1_reg_11[3] <= Delay1_1_reg_next_11[3];
          Delay1_1_reg_11[4] <= Delay1_1_reg_next_11[4];
          Delay1_1_reg_11[5] <= Delay1_1_reg_next_11[5];
          Delay1_1_reg_12[0] <= Delay1_1_reg_next_12[0];
          Delay1_1_reg_12[1] <= Delay1_1_reg_next_12[1];
          Delay1_1_reg_12[2] <= Delay1_1_reg_next_12[2];
          Delay1_1_reg_12[3] <= Delay1_1_reg_next_12[3];
          Delay1_1_reg_12[4] <= Delay1_1_reg_next_12[4];
          Delay1_1_reg_12[5] <= Delay1_1_reg_next_12[5];
          Delay1_1_reg_13[0] <= Delay1_1_reg_next_13[0];
          Delay1_1_reg_13[1] <= Delay1_1_reg_next_13[1];
          Delay1_1_reg_13[2] <= Delay1_1_reg_next_13[2];
          Delay1_1_reg_13[3] <= Delay1_1_reg_next_13[3];
          Delay1_1_reg_13[4] <= Delay1_1_reg_next_13[4];
          Delay1_1_reg_13[5] <= Delay1_1_reg_next_13[5];
          Delay1_1_reg_14[0] <= Delay1_1_reg_next_14[0];
          Delay1_1_reg_14[1] <= Delay1_1_reg_next_14[1];
          Delay1_1_reg_14[2] <= Delay1_1_reg_next_14[2];
          Delay1_1_reg_14[3] <= Delay1_1_reg_next_14[3];
          Delay1_1_reg_14[4] <= Delay1_1_reg_next_14[4];
          Delay1_1_reg_14[5] <= Delay1_1_reg_next_14[5];
          Delay1_1_reg_15[0] <= Delay1_1_reg_next_15[0];
          Delay1_1_reg_15[1] <= Delay1_1_reg_next_15[1];
          Delay1_1_reg_15[2] <= Delay1_1_reg_next_15[2];
          Delay1_1_reg_15[3] <= Delay1_1_reg_next_15[3];
          Delay1_1_reg_15[4] <= Delay1_1_reg_next_15[4];
          Delay1_1_reg_15[5] <= Delay1_1_reg_next_15[5];
        end
      end
    end

  assign Delay1_1_reg_next[0] = TopToBottom_out1_0;
  assign Delay1_1_reg_next[1] = Delay1_1_reg[0];
  assign Delay1_1_reg_next[2] = Delay1_1_reg[1];
  assign Delay1_1_reg_next[3] = Delay1_1_reg[2];
  assign Delay1_1_reg_next[4] = Delay1_1_reg[3];
  assign Delay1_1_reg_next[5] = Delay1_1_reg[4];
  assign Delay1_out_1 = Delay1_1_reg[5];
  assign Delay1_1_reg_next_1[0] = TopToBottom_out1_1;
  assign Delay1_1_reg_next_1[1] = Delay1_1_reg_1[0];
  assign Delay1_1_reg_next_1[2] = Delay1_1_reg_1[1];
  assign Delay1_1_reg_next_1[3] = Delay1_1_reg_1[2];
  assign Delay1_1_reg_next_1[4] = Delay1_1_reg_1[3];
  assign Delay1_1_reg_next_1[5] = Delay1_1_reg_1[4];
  assign Delay1_out_2 = Delay1_1_reg_1[5];
  assign Delay1_1_reg_next_2[0] = TopToBottom_out1_2;
  assign Delay1_1_reg_next_2[1] = Delay1_1_reg_2[0];
  assign Delay1_1_reg_next_2[2] = Delay1_1_reg_2[1];
  assign Delay1_1_reg_next_2[3] = Delay1_1_reg_2[2];
  assign Delay1_1_reg_next_2[4] = Delay1_1_reg_2[3];
  assign Delay1_1_reg_next_2[5] = Delay1_1_reg_2[4];
  assign Delay1_out_3 = Delay1_1_reg_2[5];
  assign Delay1_1_reg_next_3[0] = TopToBottom_out1_3;
  assign Delay1_1_reg_next_3[1] = Delay1_1_reg_3[0];
  assign Delay1_1_reg_next_3[2] = Delay1_1_reg_3[1];
  assign Delay1_1_reg_next_3[3] = Delay1_1_reg_3[2];
  assign Delay1_1_reg_next_3[4] = Delay1_1_reg_3[3];
  assign Delay1_1_reg_next_3[5] = Delay1_1_reg_3[4];
  assign Delay1_out_4 = Delay1_1_reg_3[5];
  assign Delay1_1_reg_next_4[0] = TopToBottom_out1_4;
  assign Delay1_1_reg_next_4[1] = Delay1_1_reg_4[0];
  assign Delay1_1_reg_next_4[2] = Delay1_1_reg_4[1];
  assign Delay1_1_reg_next_4[3] = Delay1_1_reg_4[2];
  assign Delay1_1_reg_next_4[4] = Delay1_1_reg_4[3];
  assign Delay1_1_reg_next_4[5] = Delay1_1_reg_4[4];
  assign Delay1_out_5 = Delay1_1_reg_4[5];
  assign Delay1_1_reg_next_5[0] = TopToBottom_out1_5;
  assign Delay1_1_reg_next_5[1] = Delay1_1_reg_5[0];
  assign Delay1_1_reg_next_5[2] = Delay1_1_reg_5[1];
  assign Delay1_1_reg_next_5[3] = Delay1_1_reg_5[2];
  assign Delay1_1_reg_next_5[4] = Delay1_1_reg_5[3];
  assign Delay1_1_reg_next_5[5] = Delay1_1_reg_5[4];
  assign Delay1_out_6 = Delay1_1_reg_5[5];
  assign Delay1_1_reg_next_6[0] = TopToBottom_out1_6;
  assign Delay1_1_reg_next_6[1] = Delay1_1_reg_6[0];
  assign Delay1_1_reg_next_6[2] = Delay1_1_reg_6[1];
  assign Delay1_1_reg_next_6[3] = Delay1_1_reg_6[2];
  assign Delay1_1_reg_next_6[4] = Delay1_1_reg_6[3];
  assign Delay1_1_reg_next_6[5] = Delay1_1_reg_6[4];
  assign Delay1_out_7 = Delay1_1_reg_6[5];
  assign Delay1_1_reg_next_7[0] = TopToBottom_out1_7;
  assign Delay1_1_reg_next_7[1] = Delay1_1_reg_7[0];
  assign Delay1_1_reg_next_7[2] = Delay1_1_reg_7[1];
  assign Delay1_1_reg_next_7[3] = Delay1_1_reg_7[2];
  assign Delay1_1_reg_next_7[4] = Delay1_1_reg_7[3];
  assign Delay1_1_reg_next_7[5] = Delay1_1_reg_7[4];
  assign Delay1_out_8 = Delay1_1_reg_7[5];
  assign Delay1_1_reg_next_8[0] = TopToBottom_out1_8;
  assign Delay1_1_reg_next_8[1] = Delay1_1_reg_8[0];
  assign Delay1_1_reg_next_8[2] = Delay1_1_reg_8[1];
  assign Delay1_1_reg_next_8[3] = Delay1_1_reg_8[2];
  assign Delay1_1_reg_next_8[4] = Delay1_1_reg_8[3];
  assign Delay1_1_reg_next_8[5] = Delay1_1_reg_8[4];
  assign Delay1_out_9 = Delay1_1_reg_8[5];
  assign Delay1_1_reg_next_9[0] = TopToBottom_out1_9;
  assign Delay1_1_reg_next_9[1] = Delay1_1_reg_9[0];
  assign Delay1_1_reg_next_9[2] = Delay1_1_reg_9[1];
  assign Delay1_1_reg_next_9[3] = Delay1_1_reg_9[2];
  assign Delay1_1_reg_next_9[4] = Delay1_1_reg_9[3];
  assign Delay1_1_reg_next_9[5] = Delay1_1_reg_9[4];
  assign Delay1_out_10 = Delay1_1_reg_9[5];
  assign Delay1_1_reg_next_10[0] = TopToBottom_out1_10;
  assign Delay1_1_reg_next_10[1] = Delay1_1_reg_10[0];
  assign Delay1_1_reg_next_10[2] = Delay1_1_reg_10[1];
  assign Delay1_1_reg_next_10[3] = Delay1_1_reg_10[2];
  assign Delay1_1_reg_next_10[4] = Delay1_1_reg_10[3];
  assign Delay1_1_reg_next_10[5] = Delay1_1_reg_10[4];
  assign Delay1_out_11 = Delay1_1_reg_10[5];
  assign Delay1_1_reg_next_11[0] = TopToBottom_out1_11;
  assign Delay1_1_reg_next_11[1] = Delay1_1_reg_11[0];
  assign Delay1_1_reg_next_11[2] = Delay1_1_reg_11[1];
  assign Delay1_1_reg_next_11[3] = Delay1_1_reg_11[2];
  assign Delay1_1_reg_next_11[4] = Delay1_1_reg_11[3];
  assign Delay1_1_reg_next_11[5] = Delay1_1_reg_11[4];
  assign Delay1_out_12 = Delay1_1_reg_11[5];
  assign Delay1_1_reg_next_12[0] = TopToBottom_out1_12;
  assign Delay1_1_reg_next_12[1] = Delay1_1_reg_12[0];
  assign Delay1_1_reg_next_12[2] = Delay1_1_reg_12[1];
  assign Delay1_1_reg_next_12[3] = Delay1_1_reg_12[2];
  assign Delay1_1_reg_next_12[4] = Delay1_1_reg_12[3];
  assign Delay1_1_reg_next_12[5] = Delay1_1_reg_12[4];
  assign Delay1_out_13 = Delay1_1_reg_12[5];
  assign Delay1_1_reg_next_13[0] = TopToBottom_out1_13;
  assign Delay1_1_reg_next_13[1] = Delay1_1_reg_13[0];
  assign Delay1_1_reg_next_13[2] = Delay1_1_reg_13[1];
  assign Delay1_1_reg_next_13[3] = Delay1_1_reg_13[2];
  assign Delay1_1_reg_next_13[4] = Delay1_1_reg_13[3];
  assign Delay1_1_reg_next_13[5] = Delay1_1_reg_13[4];
  assign Delay1_out_14 = Delay1_1_reg_13[5];
  assign Delay1_1_reg_next_14[0] = TopToBottom_out1_14;
  assign Delay1_1_reg_next_14[1] = Delay1_1_reg_14[0];
  assign Delay1_1_reg_next_14[2] = Delay1_1_reg_14[1];
  assign Delay1_1_reg_next_14[3] = Delay1_1_reg_14[2];
  assign Delay1_1_reg_next_14[4] = Delay1_1_reg_14[3];
  assign Delay1_1_reg_next_14[5] = Delay1_1_reg_14[4];
  assign Delay1_out_15 = Delay1_1_reg_14[5];
  assign Delay1_1_reg_next_15[0] = TopToBottom_out1_15;
  assign Delay1_1_reg_next_15[1] = Delay1_1_reg_15[0];
  assign Delay1_1_reg_next_15[2] = Delay1_1_reg_15[1];
  assign Delay1_1_reg_next_15[3] = Delay1_1_reg_15[2];
  assign Delay1_1_reg_next_15[4] = Delay1_1_reg_15[3];
  assign Delay1_1_reg_next_15[5] = Delay1_1_reg_15[4];
  assign Delay1_out_16 = Delay1_1_reg_15[5];



  SGBMHDLAl_ip_src_TopRightToBottomLeft u_TopRightToBottomLeft (.clk(clk),
                                                                .reset(reset),
                                                                .enb(enb),
                                                                .matchCostIn_0(matchCostA_0),  // ufix5
                                                                .matchCostIn_1(matchCostA_1),  // ufix5
                                                                .matchCostIn_2(matchCostA_2),  // ufix5
                                                                .matchCostIn_3(matchCostA_3),  // ufix5
                                                                .matchCostIn_4(matchCostA_4),  // ufix5
                                                                .matchCostIn_5(matchCostA_5),  // ufix5
                                                                .matchCostIn_6(matchCostA_6),  // ufix5
                                                                .matchCostIn_7(matchCostA_7),  // ufix5
                                                                .matchCostIn_8(matchCostA_8),  // ufix5
                                                                .matchCostIn_9(matchCostA_9),  // ufix5
                                                                .matchCostIn_10(matchCostA_10),  // ufix5
                                                                .matchCostIn_11(matchCostA_11),  // ufix5
                                                                .matchCostIn_12(matchCostA_12),  // ufix5
                                                                .matchCostIn_13(matchCostA_13),  // ufix5
                                                                .matchCostIn_14(matchCostA_14),  // ufix5
                                                                .matchCostIn_15(matchCostA_15),  // ufix5
                                                                .busIn_vStart(busA_vStart),
                                                                .busIn_valid(busA_valid),
                                                                .trblOut_0(TopRightToBottomLeft_out1_0),  // sfix10
                                                                .trblOut_1(TopRightToBottomLeft_out1_1),  // sfix10
                                                                .trblOut_2(TopRightToBottomLeft_out1_2),  // sfix10
                                                                .trblOut_3(TopRightToBottomLeft_out1_3),  // sfix10
                                                                .trblOut_4(TopRightToBottomLeft_out1_4),  // sfix10
                                                                .trblOut_5(TopRightToBottomLeft_out1_5),  // sfix10
                                                                .trblOut_6(TopRightToBottomLeft_out1_6),  // sfix10
                                                                .trblOut_7(TopRightToBottomLeft_out1_7),  // sfix10
                                                                .trblOut_8(TopRightToBottomLeft_out1_8),  // sfix10
                                                                .trblOut_9(TopRightToBottomLeft_out1_9),  // sfix10
                                                                .trblOut_10(TopRightToBottomLeft_out1_10),  // sfix10
                                                                .trblOut_11(TopRightToBottomLeft_out1_11),  // sfix10
                                                                .trblOut_12(TopRightToBottomLeft_out1_12),  // sfix10
                                                                .trblOut_13(TopRightToBottomLeft_out1_13),  // sfix10
                                                                .trblOut_14(TopRightToBottomLeft_out1_14),  // sfix10
                                                                .trblOut_15(TopRightToBottomLeft_out1_15),  // sfix10
                                                                .trblBus_valid(TopRightToBottomLeft_out2_valid)
                                                                );

  always @(posedge clk or posedge reset)
    begin : Delay16_1_process
      if (reset == 1'b1) begin
        Delay16_1_reg[0] <= 10'sb0000000000;
        Delay16_1_reg[1] <= 10'sb0000000000;
        Delay16_1_reg[2] <= 10'sb0000000000;
        Delay16_1_reg[3] <= 10'sb0000000000;
        Delay16_1_reg[4] <= 10'sb0000000000;
        Delay16_1_reg[5] <= 10'sb0000000000;
        Delay16_1_reg_1[0] <= 10'sb0000000000;
        Delay16_1_reg_1[1] <= 10'sb0000000000;
        Delay16_1_reg_1[2] <= 10'sb0000000000;
        Delay16_1_reg_1[3] <= 10'sb0000000000;
        Delay16_1_reg_1[4] <= 10'sb0000000000;
        Delay16_1_reg_1[5] <= 10'sb0000000000;
        Delay16_1_reg_2[0] <= 10'sb0000000000;
        Delay16_1_reg_2[1] <= 10'sb0000000000;
        Delay16_1_reg_2[2] <= 10'sb0000000000;
        Delay16_1_reg_2[3] <= 10'sb0000000000;
        Delay16_1_reg_2[4] <= 10'sb0000000000;
        Delay16_1_reg_2[5] <= 10'sb0000000000;
        Delay16_1_reg_3[0] <= 10'sb0000000000;
        Delay16_1_reg_3[1] <= 10'sb0000000000;
        Delay16_1_reg_3[2] <= 10'sb0000000000;
        Delay16_1_reg_3[3] <= 10'sb0000000000;
        Delay16_1_reg_3[4] <= 10'sb0000000000;
        Delay16_1_reg_3[5] <= 10'sb0000000000;
        Delay16_1_reg_4[0] <= 10'sb0000000000;
        Delay16_1_reg_4[1] <= 10'sb0000000000;
        Delay16_1_reg_4[2] <= 10'sb0000000000;
        Delay16_1_reg_4[3] <= 10'sb0000000000;
        Delay16_1_reg_4[4] <= 10'sb0000000000;
        Delay16_1_reg_4[5] <= 10'sb0000000000;
        Delay16_1_reg_5[0] <= 10'sb0000000000;
        Delay16_1_reg_5[1] <= 10'sb0000000000;
        Delay16_1_reg_5[2] <= 10'sb0000000000;
        Delay16_1_reg_5[3] <= 10'sb0000000000;
        Delay16_1_reg_5[4] <= 10'sb0000000000;
        Delay16_1_reg_5[5] <= 10'sb0000000000;
        Delay16_1_reg_6[0] <= 10'sb0000000000;
        Delay16_1_reg_6[1] <= 10'sb0000000000;
        Delay16_1_reg_6[2] <= 10'sb0000000000;
        Delay16_1_reg_6[3] <= 10'sb0000000000;
        Delay16_1_reg_6[4] <= 10'sb0000000000;
        Delay16_1_reg_6[5] <= 10'sb0000000000;
        Delay16_1_reg_7[0] <= 10'sb0000000000;
        Delay16_1_reg_7[1] <= 10'sb0000000000;
        Delay16_1_reg_7[2] <= 10'sb0000000000;
        Delay16_1_reg_7[3] <= 10'sb0000000000;
        Delay16_1_reg_7[4] <= 10'sb0000000000;
        Delay16_1_reg_7[5] <= 10'sb0000000000;
        Delay16_1_reg_8[0] <= 10'sb0000000000;
        Delay16_1_reg_8[1] <= 10'sb0000000000;
        Delay16_1_reg_8[2] <= 10'sb0000000000;
        Delay16_1_reg_8[3] <= 10'sb0000000000;
        Delay16_1_reg_8[4] <= 10'sb0000000000;
        Delay16_1_reg_8[5] <= 10'sb0000000000;
        Delay16_1_reg_9[0] <= 10'sb0000000000;
        Delay16_1_reg_9[1] <= 10'sb0000000000;
        Delay16_1_reg_9[2] <= 10'sb0000000000;
        Delay16_1_reg_9[3] <= 10'sb0000000000;
        Delay16_1_reg_9[4] <= 10'sb0000000000;
        Delay16_1_reg_9[5] <= 10'sb0000000000;
        Delay16_1_reg_10[0] <= 10'sb0000000000;
        Delay16_1_reg_10[1] <= 10'sb0000000000;
        Delay16_1_reg_10[2] <= 10'sb0000000000;
        Delay16_1_reg_10[3] <= 10'sb0000000000;
        Delay16_1_reg_10[4] <= 10'sb0000000000;
        Delay16_1_reg_10[5] <= 10'sb0000000000;
        Delay16_1_reg_11[0] <= 10'sb0000000000;
        Delay16_1_reg_11[1] <= 10'sb0000000000;
        Delay16_1_reg_11[2] <= 10'sb0000000000;
        Delay16_1_reg_11[3] <= 10'sb0000000000;
        Delay16_1_reg_11[4] <= 10'sb0000000000;
        Delay16_1_reg_11[5] <= 10'sb0000000000;
        Delay16_1_reg_12[0] <= 10'sb0000000000;
        Delay16_1_reg_12[1] <= 10'sb0000000000;
        Delay16_1_reg_12[2] <= 10'sb0000000000;
        Delay16_1_reg_12[3] <= 10'sb0000000000;
        Delay16_1_reg_12[4] <= 10'sb0000000000;
        Delay16_1_reg_12[5] <= 10'sb0000000000;
        Delay16_1_reg_13[0] <= 10'sb0000000000;
        Delay16_1_reg_13[1] <= 10'sb0000000000;
        Delay16_1_reg_13[2] <= 10'sb0000000000;
        Delay16_1_reg_13[3] <= 10'sb0000000000;
        Delay16_1_reg_13[4] <= 10'sb0000000000;
        Delay16_1_reg_13[5] <= 10'sb0000000000;
        Delay16_1_reg_14[0] <= 10'sb0000000000;
        Delay16_1_reg_14[1] <= 10'sb0000000000;
        Delay16_1_reg_14[2] <= 10'sb0000000000;
        Delay16_1_reg_14[3] <= 10'sb0000000000;
        Delay16_1_reg_14[4] <= 10'sb0000000000;
        Delay16_1_reg_14[5] <= 10'sb0000000000;
        Delay16_1_reg_15[0] <= 10'sb0000000000;
        Delay16_1_reg_15[1] <= 10'sb0000000000;
        Delay16_1_reg_15[2] <= 10'sb0000000000;
        Delay16_1_reg_15[3] <= 10'sb0000000000;
        Delay16_1_reg_15[4] <= 10'sb0000000000;
        Delay16_1_reg_15[5] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay16_1_reg[0] <= Delay16_1_reg_next[0];
          Delay16_1_reg[1] <= Delay16_1_reg_next[1];
          Delay16_1_reg[2] <= Delay16_1_reg_next[2];
          Delay16_1_reg[3] <= Delay16_1_reg_next[3];
          Delay16_1_reg[4] <= Delay16_1_reg_next[4];
          Delay16_1_reg[5] <= Delay16_1_reg_next[5];
          Delay16_1_reg_1[0] <= Delay16_1_reg_next_1[0];
          Delay16_1_reg_1[1] <= Delay16_1_reg_next_1[1];
          Delay16_1_reg_1[2] <= Delay16_1_reg_next_1[2];
          Delay16_1_reg_1[3] <= Delay16_1_reg_next_1[3];
          Delay16_1_reg_1[4] <= Delay16_1_reg_next_1[4];
          Delay16_1_reg_1[5] <= Delay16_1_reg_next_1[5];
          Delay16_1_reg_2[0] <= Delay16_1_reg_next_2[0];
          Delay16_1_reg_2[1] <= Delay16_1_reg_next_2[1];
          Delay16_1_reg_2[2] <= Delay16_1_reg_next_2[2];
          Delay16_1_reg_2[3] <= Delay16_1_reg_next_2[3];
          Delay16_1_reg_2[4] <= Delay16_1_reg_next_2[4];
          Delay16_1_reg_2[5] <= Delay16_1_reg_next_2[5];
          Delay16_1_reg_3[0] <= Delay16_1_reg_next_3[0];
          Delay16_1_reg_3[1] <= Delay16_1_reg_next_3[1];
          Delay16_1_reg_3[2] <= Delay16_1_reg_next_3[2];
          Delay16_1_reg_3[3] <= Delay16_1_reg_next_3[3];
          Delay16_1_reg_3[4] <= Delay16_1_reg_next_3[4];
          Delay16_1_reg_3[5] <= Delay16_1_reg_next_3[5];
          Delay16_1_reg_4[0] <= Delay16_1_reg_next_4[0];
          Delay16_1_reg_4[1] <= Delay16_1_reg_next_4[1];
          Delay16_1_reg_4[2] <= Delay16_1_reg_next_4[2];
          Delay16_1_reg_4[3] <= Delay16_1_reg_next_4[3];
          Delay16_1_reg_4[4] <= Delay16_1_reg_next_4[4];
          Delay16_1_reg_4[5] <= Delay16_1_reg_next_4[5];
          Delay16_1_reg_5[0] <= Delay16_1_reg_next_5[0];
          Delay16_1_reg_5[1] <= Delay16_1_reg_next_5[1];
          Delay16_1_reg_5[2] <= Delay16_1_reg_next_5[2];
          Delay16_1_reg_5[3] <= Delay16_1_reg_next_5[3];
          Delay16_1_reg_5[4] <= Delay16_1_reg_next_5[4];
          Delay16_1_reg_5[5] <= Delay16_1_reg_next_5[5];
          Delay16_1_reg_6[0] <= Delay16_1_reg_next_6[0];
          Delay16_1_reg_6[1] <= Delay16_1_reg_next_6[1];
          Delay16_1_reg_6[2] <= Delay16_1_reg_next_6[2];
          Delay16_1_reg_6[3] <= Delay16_1_reg_next_6[3];
          Delay16_1_reg_6[4] <= Delay16_1_reg_next_6[4];
          Delay16_1_reg_6[5] <= Delay16_1_reg_next_6[5];
          Delay16_1_reg_7[0] <= Delay16_1_reg_next_7[0];
          Delay16_1_reg_7[1] <= Delay16_1_reg_next_7[1];
          Delay16_1_reg_7[2] <= Delay16_1_reg_next_7[2];
          Delay16_1_reg_7[3] <= Delay16_1_reg_next_7[3];
          Delay16_1_reg_7[4] <= Delay16_1_reg_next_7[4];
          Delay16_1_reg_7[5] <= Delay16_1_reg_next_7[5];
          Delay16_1_reg_8[0] <= Delay16_1_reg_next_8[0];
          Delay16_1_reg_8[1] <= Delay16_1_reg_next_8[1];
          Delay16_1_reg_8[2] <= Delay16_1_reg_next_8[2];
          Delay16_1_reg_8[3] <= Delay16_1_reg_next_8[3];
          Delay16_1_reg_8[4] <= Delay16_1_reg_next_8[4];
          Delay16_1_reg_8[5] <= Delay16_1_reg_next_8[5];
          Delay16_1_reg_9[0] <= Delay16_1_reg_next_9[0];
          Delay16_1_reg_9[1] <= Delay16_1_reg_next_9[1];
          Delay16_1_reg_9[2] <= Delay16_1_reg_next_9[2];
          Delay16_1_reg_9[3] <= Delay16_1_reg_next_9[3];
          Delay16_1_reg_9[4] <= Delay16_1_reg_next_9[4];
          Delay16_1_reg_9[5] <= Delay16_1_reg_next_9[5];
          Delay16_1_reg_10[0] <= Delay16_1_reg_next_10[0];
          Delay16_1_reg_10[1] <= Delay16_1_reg_next_10[1];
          Delay16_1_reg_10[2] <= Delay16_1_reg_next_10[2];
          Delay16_1_reg_10[3] <= Delay16_1_reg_next_10[3];
          Delay16_1_reg_10[4] <= Delay16_1_reg_next_10[4];
          Delay16_1_reg_10[5] <= Delay16_1_reg_next_10[5];
          Delay16_1_reg_11[0] <= Delay16_1_reg_next_11[0];
          Delay16_1_reg_11[1] <= Delay16_1_reg_next_11[1];
          Delay16_1_reg_11[2] <= Delay16_1_reg_next_11[2];
          Delay16_1_reg_11[3] <= Delay16_1_reg_next_11[3];
          Delay16_1_reg_11[4] <= Delay16_1_reg_next_11[4];
          Delay16_1_reg_11[5] <= Delay16_1_reg_next_11[5];
          Delay16_1_reg_12[0] <= Delay16_1_reg_next_12[0];
          Delay16_1_reg_12[1] <= Delay16_1_reg_next_12[1];
          Delay16_1_reg_12[2] <= Delay16_1_reg_next_12[2];
          Delay16_1_reg_12[3] <= Delay16_1_reg_next_12[3];
          Delay16_1_reg_12[4] <= Delay16_1_reg_next_12[4];
          Delay16_1_reg_12[5] <= Delay16_1_reg_next_12[5];
          Delay16_1_reg_13[0] <= Delay16_1_reg_next_13[0];
          Delay16_1_reg_13[1] <= Delay16_1_reg_next_13[1];
          Delay16_1_reg_13[2] <= Delay16_1_reg_next_13[2];
          Delay16_1_reg_13[3] <= Delay16_1_reg_next_13[3];
          Delay16_1_reg_13[4] <= Delay16_1_reg_next_13[4];
          Delay16_1_reg_13[5] <= Delay16_1_reg_next_13[5];
          Delay16_1_reg_14[0] <= Delay16_1_reg_next_14[0];
          Delay16_1_reg_14[1] <= Delay16_1_reg_next_14[1];
          Delay16_1_reg_14[2] <= Delay16_1_reg_next_14[2];
          Delay16_1_reg_14[3] <= Delay16_1_reg_next_14[3];
          Delay16_1_reg_14[4] <= Delay16_1_reg_next_14[4];
          Delay16_1_reg_14[5] <= Delay16_1_reg_next_14[5];
          Delay16_1_reg_15[0] <= Delay16_1_reg_next_15[0];
          Delay16_1_reg_15[1] <= Delay16_1_reg_next_15[1];
          Delay16_1_reg_15[2] <= Delay16_1_reg_next_15[2];
          Delay16_1_reg_15[3] <= Delay16_1_reg_next_15[3];
          Delay16_1_reg_15[4] <= Delay16_1_reg_next_15[4];
          Delay16_1_reg_15[5] <= Delay16_1_reg_next_15[5];
        end
      end
    end

  assign Delay16_1_reg_next[0] = TopRightToBottomLeft_out1_0;
  assign Delay16_1_reg_next[1] = Delay16_1_reg[0];
  assign Delay16_1_reg_next[2] = Delay16_1_reg[1];
  assign Delay16_1_reg_next[3] = Delay16_1_reg[2];
  assign Delay16_1_reg_next[4] = Delay16_1_reg[3];
  assign Delay16_1_reg_next[5] = Delay16_1_reg[4];
  assign Delay16_out_1 = Delay16_1_reg[5];
  assign Delay16_1_reg_next_1[0] = TopRightToBottomLeft_out1_1;
  assign Delay16_1_reg_next_1[1] = Delay16_1_reg_1[0];
  assign Delay16_1_reg_next_1[2] = Delay16_1_reg_1[1];
  assign Delay16_1_reg_next_1[3] = Delay16_1_reg_1[2];
  assign Delay16_1_reg_next_1[4] = Delay16_1_reg_1[3];
  assign Delay16_1_reg_next_1[5] = Delay16_1_reg_1[4];
  assign Delay16_out_2 = Delay16_1_reg_1[5];
  assign Delay16_1_reg_next_2[0] = TopRightToBottomLeft_out1_2;
  assign Delay16_1_reg_next_2[1] = Delay16_1_reg_2[0];
  assign Delay16_1_reg_next_2[2] = Delay16_1_reg_2[1];
  assign Delay16_1_reg_next_2[3] = Delay16_1_reg_2[2];
  assign Delay16_1_reg_next_2[4] = Delay16_1_reg_2[3];
  assign Delay16_1_reg_next_2[5] = Delay16_1_reg_2[4];
  assign Delay16_out_3 = Delay16_1_reg_2[5];
  assign Delay16_1_reg_next_3[0] = TopRightToBottomLeft_out1_3;
  assign Delay16_1_reg_next_3[1] = Delay16_1_reg_3[0];
  assign Delay16_1_reg_next_3[2] = Delay16_1_reg_3[1];
  assign Delay16_1_reg_next_3[3] = Delay16_1_reg_3[2];
  assign Delay16_1_reg_next_3[4] = Delay16_1_reg_3[3];
  assign Delay16_1_reg_next_3[5] = Delay16_1_reg_3[4];
  assign Delay16_out_4 = Delay16_1_reg_3[5];
  assign Delay16_1_reg_next_4[0] = TopRightToBottomLeft_out1_4;
  assign Delay16_1_reg_next_4[1] = Delay16_1_reg_4[0];
  assign Delay16_1_reg_next_4[2] = Delay16_1_reg_4[1];
  assign Delay16_1_reg_next_4[3] = Delay16_1_reg_4[2];
  assign Delay16_1_reg_next_4[4] = Delay16_1_reg_4[3];
  assign Delay16_1_reg_next_4[5] = Delay16_1_reg_4[4];
  assign Delay16_out_5 = Delay16_1_reg_4[5];
  assign Delay16_1_reg_next_5[0] = TopRightToBottomLeft_out1_5;
  assign Delay16_1_reg_next_5[1] = Delay16_1_reg_5[0];
  assign Delay16_1_reg_next_5[2] = Delay16_1_reg_5[1];
  assign Delay16_1_reg_next_5[3] = Delay16_1_reg_5[2];
  assign Delay16_1_reg_next_5[4] = Delay16_1_reg_5[3];
  assign Delay16_1_reg_next_5[5] = Delay16_1_reg_5[4];
  assign Delay16_out_6 = Delay16_1_reg_5[5];
  assign Delay16_1_reg_next_6[0] = TopRightToBottomLeft_out1_6;
  assign Delay16_1_reg_next_6[1] = Delay16_1_reg_6[0];
  assign Delay16_1_reg_next_6[2] = Delay16_1_reg_6[1];
  assign Delay16_1_reg_next_6[3] = Delay16_1_reg_6[2];
  assign Delay16_1_reg_next_6[4] = Delay16_1_reg_6[3];
  assign Delay16_1_reg_next_6[5] = Delay16_1_reg_6[4];
  assign Delay16_out_7 = Delay16_1_reg_6[5];
  assign Delay16_1_reg_next_7[0] = TopRightToBottomLeft_out1_7;
  assign Delay16_1_reg_next_7[1] = Delay16_1_reg_7[0];
  assign Delay16_1_reg_next_7[2] = Delay16_1_reg_7[1];
  assign Delay16_1_reg_next_7[3] = Delay16_1_reg_7[2];
  assign Delay16_1_reg_next_7[4] = Delay16_1_reg_7[3];
  assign Delay16_1_reg_next_7[5] = Delay16_1_reg_7[4];
  assign Delay16_out_8 = Delay16_1_reg_7[5];
  assign Delay16_1_reg_next_8[0] = TopRightToBottomLeft_out1_8;
  assign Delay16_1_reg_next_8[1] = Delay16_1_reg_8[0];
  assign Delay16_1_reg_next_8[2] = Delay16_1_reg_8[1];
  assign Delay16_1_reg_next_8[3] = Delay16_1_reg_8[2];
  assign Delay16_1_reg_next_8[4] = Delay16_1_reg_8[3];
  assign Delay16_1_reg_next_8[5] = Delay16_1_reg_8[4];
  assign Delay16_out_9 = Delay16_1_reg_8[5];
  assign Delay16_1_reg_next_9[0] = TopRightToBottomLeft_out1_9;
  assign Delay16_1_reg_next_9[1] = Delay16_1_reg_9[0];
  assign Delay16_1_reg_next_9[2] = Delay16_1_reg_9[1];
  assign Delay16_1_reg_next_9[3] = Delay16_1_reg_9[2];
  assign Delay16_1_reg_next_9[4] = Delay16_1_reg_9[3];
  assign Delay16_1_reg_next_9[5] = Delay16_1_reg_9[4];
  assign Delay16_out_10 = Delay16_1_reg_9[5];
  assign Delay16_1_reg_next_10[0] = TopRightToBottomLeft_out1_10;
  assign Delay16_1_reg_next_10[1] = Delay16_1_reg_10[0];
  assign Delay16_1_reg_next_10[2] = Delay16_1_reg_10[1];
  assign Delay16_1_reg_next_10[3] = Delay16_1_reg_10[2];
  assign Delay16_1_reg_next_10[4] = Delay16_1_reg_10[3];
  assign Delay16_1_reg_next_10[5] = Delay16_1_reg_10[4];
  assign Delay16_out_11 = Delay16_1_reg_10[5];
  assign Delay16_1_reg_next_11[0] = TopRightToBottomLeft_out1_11;
  assign Delay16_1_reg_next_11[1] = Delay16_1_reg_11[0];
  assign Delay16_1_reg_next_11[2] = Delay16_1_reg_11[1];
  assign Delay16_1_reg_next_11[3] = Delay16_1_reg_11[2];
  assign Delay16_1_reg_next_11[4] = Delay16_1_reg_11[3];
  assign Delay16_1_reg_next_11[5] = Delay16_1_reg_11[4];
  assign Delay16_out_12 = Delay16_1_reg_11[5];
  assign Delay16_1_reg_next_12[0] = TopRightToBottomLeft_out1_12;
  assign Delay16_1_reg_next_12[1] = Delay16_1_reg_12[0];
  assign Delay16_1_reg_next_12[2] = Delay16_1_reg_12[1];
  assign Delay16_1_reg_next_12[3] = Delay16_1_reg_12[2];
  assign Delay16_1_reg_next_12[4] = Delay16_1_reg_12[3];
  assign Delay16_1_reg_next_12[5] = Delay16_1_reg_12[4];
  assign Delay16_out_13 = Delay16_1_reg_12[5];
  assign Delay16_1_reg_next_13[0] = TopRightToBottomLeft_out1_13;
  assign Delay16_1_reg_next_13[1] = Delay16_1_reg_13[0];
  assign Delay16_1_reg_next_13[2] = Delay16_1_reg_13[1];
  assign Delay16_1_reg_next_13[3] = Delay16_1_reg_13[2];
  assign Delay16_1_reg_next_13[4] = Delay16_1_reg_13[3];
  assign Delay16_1_reg_next_13[5] = Delay16_1_reg_13[4];
  assign Delay16_out_14 = Delay16_1_reg_13[5];
  assign Delay16_1_reg_next_14[0] = TopRightToBottomLeft_out1_14;
  assign Delay16_1_reg_next_14[1] = Delay16_1_reg_14[0];
  assign Delay16_1_reg_next_14[2] = Delay16_1_reg_14[1];
  assign Delay16_1_reg_next_14[3] = Delay16_1_reg_14[2];
  assign Delay16_1_reg_next_14[4] = Delay16_1_reg_14[3];
  assign Delay16_1_reg_next_14[5] = Delay16_1_reg_14[4];
  assign Delay16_out_15 = Delay16_1_reg_14[5];
  assign Delay16_1_reg_next_15[0] = TopRightToBottomLeft_out1_15;
  assign Delay16_1_reg_next_15[1] = Delay16_1_reg_15[0];
  assign Delay16_1_reg_next_15[2] = Delay16_1_reg_15[1];
  assign Delay16_1_reg_next_15[3] = Delay16_1_reg_15[2];
  assign Delay16_1_reg_next_15[4] = Delay16_1_reg_15[3];
  assign Delay16_1_reg_next_15[5] = Delay16_1_reg_15[4];
  assign Delay16_out_16 = Delay16_1_reg_15[5];



  assign Delay1_out1[0] = Delay1_out_1;
  assign Delay1_out1[1] = Delay1_out_2;
  assign Delay1_out1[2] = Delay1_out_3;
  assign Delay1_out1[3] = Delay1_out_4;
  assign Delay1_out1[4] = Delay1_out_5;
  assign Delay1_out1[5] = Delay1_out_6;
  assign Delay1_out1[6] = Delay1_out_7;
  assign Delay1_out1[7] = Delay1_out_8;
  assign Delay1_out1[8] = Delay1_out_9;
  assign Delay1_out1[9] = Delay1_out_10;
  assign Delay1_out1[10] = Delay1_out_11;
  assign Delay1_out1[11] = Delay1_out_12;
  assign Delay1_out1[12] = Delay1_out_13;
  assign Delay1_out1[13] = Delay1_out_14;
  assign Delay1_out1[14] = Delay1_out_15;
  assign Delay1_out1[15] = Delay1_out_16;

  assign Delay16_out1[0] = Delay16_out_1;
  assign Delay16_out1[1] = Delay16_out_2;
  assign Delay16_out1[2] = Delay16_out_3;
  assign Delay16_out1[3] = Delay16_out_4;
  assign Delay16_out1[4] = Delay16_out_5;
  assign Delay16_out1[5] = Delay16_out_6;
  assign Delay16_out1[6] = Delay16_out_7;
  assign Delay16_out1[7] = Delay16_out_8;
  assign Delay16_out1[8] = Delay16_out_9;
  assign Delay16_out1[9] = Delay16_out_10;
  assign Delay16_out1[10] = Delay16_out_11;
  assign Delay16_out1[11] = Delay16_out_12;
  assign Delay16_out1[12] = Delay16_out_13;
  assign Delay16_out1[13] = Delay16_out_14;
  assign Delay16_out1[14] = Delay16_out_15;
  assign Delay16_out1[15] = Delay16_out_16;

  assign Sum1_1 = {Delay1_out1[0][9], Delay1_out1[0]};
  assign Sum1_2 = {Delay16_out1[0][9], Delay16_out1[0]};
  assign Sum1_out1[0] = Sum1_1 + Sum1_2;
  assign Sum1_3 = {Delay1_out1[1][9], Delay1_out1[1]};
  assign Sum1_4 = {Delay16_out1[1][9], Delay16_out1[1]};
  assign Sum1_out1[1] = Sum1_3 + Sum1_4;
  assign Sum1_5 = {Delay1_out1[2][9], Delay1_out1[2]};
  assign Sum1_6 = {Delay16_out1[2][9], Delay16_out1[2]};
  assign Sum1_out1[2] = Sum1_5 + Sum1_6;
  assign Sum1_7 = {Delay1_out1[3][9], Delay1_out1[3]};
  assign Sum1_8 = {Delay16_out1[3][9], Delay16_out1[3]};
  assign Sum1_out1[3] = Sum1_7 + Sum1_8;
  assign Sum1_9 = {Delay1_out1[4][9], Delay1_out1[4]};
  assign Sum1_10 = {Delay16_out1[4][9], Delay16_out1[4]};
  assign Sum1_out1[4] = Sum1_9 + Sum1_10;
  assign Sum1_11 = {Delay1_out1[5][9], Delay1_out1[5]};
  assign Sum1_12 = {Delay16_out1[5][9], Delay16_out1[5]};
  assign Sum1_out1[5] = Sum1_11 + Sum1_12;
  assign Sum1_13 = {Delay1_out1[6][9], Delay1_out1[6]};
  assign Sum1_14 = {Delay16_out1[6][9], Delay16_out1[6]};
  assign Sum1_out1[6] = Sum1_13 + Sum1_14;
  assign Sum1_15 = {Delay1_out1[7][9], Delay1_out1[7]};
  assign Sum1_16 = {Delay16_out1[7][9], Delay16_out1[7]};
  assign Sum1_out1[7] = Sum1_15 + Sum1_16;
  assign Sum1_17 = {Delay1_out1[8][9], Delay1_out1[8]};
  assign Sum1_18 = {Delay16_out1[8][9], Delay16_out1[8]};
  assign Sum1_out1[8] = Sum1_17 + Sum1_18;
  assign Sum1_19 = {Delay1_out1[9][9], Delay1_out1[9]};
  assign Sum1_20 = {Delay16_out1[9][9], Delay16_out1[9]};
  assign Sum1_out1[9] = Sum1_19 + Sum1_20;
  assign Sum1_21 = {Delay1_out1[10][9], Delay1_out1[10]};
  assign Sum1_22 = {Delay16_out1[10][9], Delay16_out1[10]};
  assign Sum1_out1[10] = Sum1_21 + Sum1_22;
  assign Sum1_23 = {Delay1_out1[11][9], Delay1_out1[11]};
  assign Sum1_24 = {Delay16_out1[11][9], Delay16_out1[11]};
  assign Sum1_out1[11] = Sum1_23 + Sum1_24;
  assign Sum1_25 = {Delay1_out1[12][9], Delay1_out1[12]};
  assign Sum1_26 = {Delay16_out1[12][9], Delay16_out1[12]};
  assign Sum1_out1[12] = Sum1_25 + Sum1_26;
  assign Sum1_27 = {Delay1_out1[13][9], Delay1_out1[13]};
  assign Sum1_28 = {Delay16_out1[13][9], Delay16_out1[13]};
  assign Sum1_out1[13] = Sum1_27 + Sum1_28;
  assign Sum1_29 = {Delay1_out1[14][9], Delay1_out1[14]};
  assign Sum1_30 = {Delay16_out1[14][9], Delay16_out1[14]};
  assign Sum1_out1[14] = Sum1_29 + Sum1_30;
  assign Sum1_31 = {Delay1_out1[15][9], Delay1_out1[15]};
  assign Sum1_32 = {Delay16_out1[15][9], Delay16_out1[15]};
  assign Sum1_out1[15] = Sum1_31 + Sum1_32;



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1[0] <= 11'sb00000000000;
        Delay5_out1[1] <= 11'sb00000000000;
        Delay5_out1[2] <= 11'sb00000000000;
        Delay5_out1[3] <= 11'sb00000000000;
        Delay5_out1[4] <= 11'sb00000000000;
        Delay5_out1[5] <= 11'sb00000000000;
        Delay5_out1[6] <= 11'sb00000000000;
        Delay5_out1[7] <= 11'sb00000000000;
        Delay5_out1[8] <= 11'sb00000000000;
        Delay5_out1[9] <= 11'sb00000000000;
        Delay5_out1[10] <= 11'sb00000000000;
        Delay5_out1[11] <= 11'sb00000000000;
        Delay5_out1[12] <= 11'sb00000000000;
        Delay5_out1[13] <= 11'sb00000000000;
        Delay5_out1[14] <= 11'sb00000000000;
        Delay5_out1[15] <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1[0] <= Sum1_out1[0];
          Delay5_out1[1] <= Sum1_out1[1];
          Delay5_out1[2] <= Sum1_out1[2];
          Delay5_out1[3] <= Sum1_out1[3];
          Delay5_out1[4] <= Sum1_out1[4];
          Delay5_out1[5] <= Sum1_out1[5];
          Delay5_out1[6] <= Sum1_out1[6];
          Delay5_out1[7] <= Sum1_out1[7];
          Delay5_out1[8] <= Sum1_out1[8];
          Delay5_out1[9] <= Sum1_out1[9];
          Delay5_out1[10] <= Sum1_out1[10];
          Delay5_out1[11] <= Sum1_out1[11];
          Delay5_out1[12] <= Sum1_out1[12];
          Delay5_out1[13] <= Sum1_out1[13];
          Delay5_out1[14] <= Sum1_out1[14];
          Delay5_out1[15] <= Sum1_out1[15];
        end
      end
    end



  assign Sum2_1 = {Delay10_out1[0][10], Delay10_out1[0]};
  assign Sum2_2 = {Delay5_out1[0][10], Delay5_out1[0]};
  assign Sum2_out1[0] = Sum2_1 + Sum2_2;
  assign Sum2_3 = {Delay10_out1[1][10], Delay10_out1[1]};
  assign Sum2_4 = {Delay5_out1[1][10], Delay5_out1[1]};
  assign Sum2_out1[1] = Sum2_3 + Sum2_4;
  assign Sum2_5 = {Delay10_out1[2][10], Delay10_out1[2]};
  assign Sum2_6 = {Delay5_out1[2][10], Delay5_out1[2]};
  assign Sum2_out1[2] = Sum2_5 + Sum2_6;
  assign Sum2_7 = {Delay10_out1[3][10], Delay10_out1[3]};
  assign Sum2_8 = {Delay5_out1[3][10], Delay5_out1[3]};
  assign Sum2_out1[3] = Sum2_7 + Sum2_8;
  assign Sum2_9 = {Delay10_out1[4][10], Delay10_out1[4]};
  assign Sum2_10 = {Delay5_out1[4][10], Delay5_out1[4]};
  assign Sum2_out1[4] = Sum2_9 + Sum2_10;
  assign Sum2_11 = {Delay10_out1[5][10], Delay10_out1[5]};
  assign Sum2_12 = {Delay5_out1[5][10], Delay5_out1[5]};
  assign Sum2_out1[5] = Sum2_11 + Sum2_12;
  assign Sum2_13 = {Delay10_out1[6][10], Delay10_out1[6]};
  assign Sum2_14 = {Delay5_out1[6][10], Delay5_out1[6]};
  assign Sum2_out1[6] = Sum2_13 + Sum2_14;
  assign Sum2_15 = {Delay10_out1[7][10], Delay10_out1[7]};
  assign Sum2_16 = {Delay5_out1[7][10], Delay5_out1[7]};
  assign Sum2_out1[7] = Sum2_15 + Sum2_16;
  assign Sum2_17 = {Delay10_out1[8][10], Delay10_out1[8]};
  assign Sum2_18 = {Delay5_out1[8][10], Delay5_out1[8]};
  assign Sum2_out1[8] = Sum2_17 + Sum2_18;
  assign Sum2_19 = {Delay10_out1[9][10], Delay10_out1[9]};
  assign Sum2_20 = {Delay5_out1[9][10], Delay5_out1[9]};
  assign Sum2_out1[9] = Sum2_19 + Sum2_20;
  assign Sum2_21 = {Delay10_out1[10][10], Delay10_out1[10]};
  assign Sum2_22 = {Delay5_out1[10][10], Delay5_out1[10]};
  assign Sum2_out1[10] = Sum2_21 + Sum2_22;
  assign Sum2_23 = {Delay10_out1[11][10], Delay10_out1[11]};
  assign Sum2_24 = {Delay5_out1[11][10], Delay5_out1[11]};
  assign Sum2_out1[11] = Sum2_23 + Sum2_24;
  assign Sum2_25 = {Delay10_out1[12][10], Delay10_out1[12]};
  assign Sum2_26 = {Delay5_out1[12][10], Delay5_out1[12]};
  assign Sum2_out1[12] = Sum2_25 + Sum2_26;
  assign Sum2_27 = {Delay10_out1[13][10], Delay10_out1[13]};
  assign Sum2_28 = {Delay5_out1[13][10], Delay5_out1[13]};
  assign Sum2_out1[13] = Sum2_27 + Sum2_28;
  assign Sum2_29 = {Delay10_out1[14][10], Delay10_out1[14]};
  assign Sum2_30 = {Delay5_out1[14][10], Delay5_out1[14]};
  assign Sum2_out1[14] = Sum2_29 + Sum2_30;
  assign Sum2_31 = {Delay10_out1[15][10], Delay10_out1[15]};
  assign Sum2_32 = {Delay5_out1[15][10], Delay5_out1[15]};
  assign Sum2_out1[15] = Sum2_31 + Sum2_32;



  SGBMHDLAl_ip_src_RightToLeft u_RightToLeft (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .matchCostIn_0(matchCostRL_0),  // ufix5
                                              .matchCostIn_1(matchCostRL_1),  // ufix5
                                              .matchCostIn_2(matchCostRL_2),  // ufix5
                                              .matchCostIn_3(matchCostRL_3),  // ufix5
                                              .matchCostIn_4(matchCostRL_4),  // ufix5
                                              .matchCostIn_5(matchCostRL_5),  // ufix5
                                              .matchCostIn_6(matchCostRL_6),  // ufix5
                                              .matchCostIn_7(matchCostRL_7),  // ufix5
                                              .matchCostIn_8(matchCostRL_8),  // ufix5
                                              .matchCostIn_9(matchCostRL_9),  // ufix5
                                              .matchCostIn_10(matchCostRL_10),  // ufix5
                                              .matchCostIn_11(matchCostRL_11),  // ufix5
                                              .matchCostIn_12(matchCostRL_12),  // ufix5
                                              .matchCostIn_13(matchCostRL_13),  // ufix5
                                              .matchCostIn_14(matchCostRL_14),  // ufix5
                                              .matchCostIn_15(matchCostRL_15),  // ufix5
                                              .busIn_hStart(busRL_hStart),
                                              .busIn_hEnd(busRL_hEnd),
                                              .busIn_vStart(busRL_vStart),
                                              .busIn_vEnd(busRL_vEnd),
                                              .busIn_valid(busRL_valid),
                                              .rlCost_0(RightToLeft_out1_0),  // sfix10
                                              .rlCost_1(RightToLeft_out1_1),  // sfix10
                                              .rlCost_2(RightToLeft_out1_2),  // sfix10
                                              .rlCost_3(RightToLeft_out1_3),  // sfix10
                                              .rlCost_4(RightToLeft_out1_4),  // sfix10
                                              .rlCost_5(RightToLeft_out1_5),  // sfix10
                                              .rlCost_6(RightToLeft_out1_6),  // sfix10
                                              .rlCost_7(RightToLeft_out1_7),  // sfix10
                                              .rlCost_8(RightToLeft_out1_8),  // sfix10
                                              .rlCost_9(RightToLeft_out1_9),  // sfix10
                                              .rlCost_10(RightToLeft_out1_10),  // sfix10
                                              .rlCost_11(RightToLeft_out1_11),  // sfix10
                                              .rlCost_12(RightToLeft_out1_12),  // sfix10
                                              .rlCost_13(RightToLeft_out1_13),  // sfix10
                                              .rlCost_14(RightToLeft_out1_14),  // sfix10
                                              .rlCost_15(RightToLeft_out1_15),  // sfix10
                                              .rlBus_valid(RightToLeft_out2_valid)
                                              );

  assign RightToLeft_out1[0] = RightToLeft_out1_0;
  assign RightToLeft_out1[1] = RightToLeft_out1_1;
  assign RightToLeft_out1[2] = RightToLeft_out1_2;
  assign RightToLeft_out1[3] = RightToLeft_out1_3;
  assign RightToLeft_out1[4] = RightToLeft_out1_4;
  assign RightToLeft_out1[5] = RightToLeft_out1_5;
  assign RightToLeft_out1[6] = RightToLeft_out1_6;
  assign RightToLeft_out1[7] = RightToLeft_out1_7;
  assign RightToLeft_out1[8] = RightToLeft_out1_8;
  assign RightToLeft_out1[9] = RightToLeft_out1_9;
  assign RightToLeft_out1[10] = RightToLeft_out1_10;
  assign RightToLeft_out1[11] = RightToLeft_out1_11;
  assign RightToLeft_out1[12] = RightToLeft_out1_12;
  assign RightToLeft_out1[13] = RightToLeft_out1_13;
  assign RightToLeft_out1[14] = RightToLeft_out1_14;
  assign RightToLeft_out1[15] = RightToLeft_out1_15;

  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1[0] <= 10'sb0000000000;
        Delay14_out1[1] <= 10'sb0000000000;
        Delay14_out1[2] <= 10'sb0000000000;
        Delay14_out1[3] <= 10'sb0000000000;
        Delay14_out1[4] <= 10'sb0000000000;
        Delay14_out1[5] <= 10'sb0000000000;
        Delay14_out1[6] <= 10'sb0000000000;
        Delay14_out1[7] <= 10'sb0000000000;
        Delay14_out1[8] <= 10'sb0000000000;
        Delay14_out1[9] <= 10'sb0000000000;
        Delay14_out1[10] <= 10'sb0000000000;
        Delay14_out1[11] <= 10'sb0000000000;
        Delay14_out1[12] <= 10'sb0000000000;
        Delay14_out1[13] <= 10'sb0000000000;
        Delay14_out1[14] <= 10'sb0000000000;
        Delay14_out1[15] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1[0] <= RightToLeft_out1[0];
          Delay14_out1[1] <= RightToLeft_out1[1];
          Delay14_out1[2] <= RightToLeft_out1[2];
          Delay14_out1[3] <= RightToLeft_out1[3];
          Delay14_out1[4] <= RightToLeft_out1[4];
          Delay14_out1[5] <= RightToLeft_out1[5];
          Delay14_out1[6] <= RightToLeft_out1[6];
          Delay14_out1[7] <= RightToLeft_out1[7];
          Delay14_out1[8] <= RightToLeft_out1[8];
          Delay14_out1[9] <= RightToLeft_out1[9];
          Delay14_out1[10] <= RightToLeft_out1[10];
          Delay14_out1[11] <= RightToLeft_out1[11];
          Delay14_out1[12] <= RightToLeft_out1[12];
          Delay14_out1[13] <= RightToLeft_out1[13];
          Delay14_out1[14] <= RightToLeft_out1[14];
          Delay14_out1[15] <= RightToLeft_out1[15];
        end
      end
    end



  assign Delay14_out1_0 = Delay14_out1[0];

  always @(posedge clk or posedge reset)
    begin : Delay12_1_process
      if (reset == 1'b1) begin
        Delay12_1_reg[0] <= 10'sb0000000000;
        Delay12_1_reg[1] <= 10'sb0000000000;
        Delay12_1_reg_1[0] <= 10'sb0000000000;
        Delay12_1_reg_1[1] <= 10'sb0000000000;
        Delay12_1_reg_2[0] <= 10'sb0000000000;
        Delay12_1_reg_2[1] <= 10'sb0000000000;
        Delay12_1_reg_3[0] <= 10'sb0000000000;
        Delay12_1_reg_3[1] <= 10'sb0000000000;
        Delay12_1_reg_4[0] <= 10'sb0000000000;
        Delay12_1_reg_4[1] <= 10'sb0000000000;
        Delay12_1_reg_5[0] <= 10'sb0000000000;
        Delay12_1_reg_5[1] <= 10'sb0000000000;
        Delay12_1_reg_6[0] <= 10'sb0000000000;
        Delay12_1_reg_6[1] <= 10'sb0000000000;
        Delay12_1_reg_7[0] <= 10'sb0000000000;
        Delay12_1_reg_7[1] <= 10'sb0000000000;
        Delay12_1_reg_8[0] <= 10'sb0000000000;
        Delay12_1_reg_8[1] <= 10'sb0000000000;
        Delay12_1_reg_9[0] <= 10'sb0000000000;
        Delay12_1_reg_9[1] <= 10'sb0000000000;
        Delay12_1_reg_10[0] <= 10'sb0000000000;
        Delay12_1_reg_10[1] <= 10'sb0000000000;
        Delay12_1_reg_11[0] <= 10'sb0000000000;
        Delay12_1_reg_11[1] <= 10'sb0000000000;
        Delay12_1_reg_12[0] <= 10'sb0000000000;
        Delay12_1_reg_12[1] <= 10'sb0000000000;
        Delay12_1_reg_13[0] <= 10'sb0000000000;
        Delay12_1_reg_13[1] <= 10'sb0000000000;
        Delay12_1_reg_14[0] <= 10'sb0000000000;
        Delay12_1_reg_14[1] <= 10'sb0000000000;
        Delay12_1_reg_15[0] <= 10'sb0000000000;
        Delay12_1_reg_15[1] <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay12_1_reg[0] <= Delay12_1_reg_next[0];
          Delay12_1_reg[1] <= Delay12_1_reg_next[1];
          Delay12_1_reg_1[0] <= Delay12_1_reg_next_1[0];
          Delay12_1_reg_1[1] <= Delay12_1_reg_next_1[1];
          Delay12_1_reg_2[0] <= Delay12_1_reg_next_2[0];
          Delay12_1_reg_2[1] <= Delay12_1_reg_next_2[1];
          Delay12_1_reg_3[0] <= Delay12_1_reg_next_3[0];
          Delay12_1_reg_3[1] <= Delay12_1_reg_next_3[1];
          Delay12_1_reg_4[0] <= Delay12_1_reg_next_4[0];
          Delay12_1_reg_4[1] <= Delay12_1_reg_next_4[1];
          Delay12_1_reg_5[0] <= Delay12_1_reg_next_5[0];
          Delay12_1_reg_5[1] <= Delay12_1_reg_next_5[1];
          Delay12_1_reg_6[0] <= Delay12_1_reg_next_6[0];
          Delay12_1_reg_6[1] <= Delay12_1_reg_next_6[1];
          Delay12_1_reg_7[0] <= Delay12_1_reg_next_7[0];
          Delay12_1_reg_7[1] <= Delay12_1_reg_next_7[1];
          Delay12_1_reg_8[0] <= Delay12_1_reg_next_8[0];
          Delay12_1_reg_8[1] <= Delay12_1_reg_next_8[1];
          Delay12_1_reg_9[0] <= Delay12_1_reg_next_9[0];
          Delay12_1_reg_9[1] <= Delay12_1_reg_next_9[1];
          Delay12_1_reg_10[0] <= Delay12_1_reg_next_10[0];
          Delay12_1_reg_10[1] <= Delay12_1_reg_next_10[1];
          Delay12_1_reg_11[0] <= Delay12_1_reg_next_11[0];
          Delay12_1_reg_11[1] <= Delay12_1_reg_next_11[1];
          Delay12_1_reg_12[0] <= Delay12_1_reg_next_12[0];
          Delay12_1_reg_12[1] <= Delay12_1_reg_next_12[1];
          Delay12_1_reg_13[0] <= Delay12_1_reg_next_13[0];
          Delay12_1_reg_13[1] <= Delay12_1_reg_next_13[1];
          Delay12_1_reg_14[0] <= Delay12_1_reg_next_14[0];
          Delay12_1_reg_14[1] <= Delay12_1_reg_next_14[1];
          Delay12_1_reg_15[0] <= Delay12_1_reg_next_15[0];
          Delay12_1_reg_15[1] <= Delay12_1_reg_next_15[1];
        end
      end
    end

  assign Delay12_1_reg_next[0] = Delay14_out1_0;
  assign Delay12_1_reg_next[1] = Delay12_1_reg[0];
  assign Delay12_out_1 = Delay12_1_reg[1];
  assign Delay12_1_reg_next_1[0] = Delay14_out1_1;
  assign Delay12_1_reg_next_1[1] = Delay12_1_reg_1[0];
  assign Delay12_out_2 = Delay12_1_reg_1[1];
  assign Delay12_1_reg_next_2[0] = Delay14_out1_2;
  assign Delay12_1_reg_next_2[1] = Delay12_1_reg_2[0];
  assign Delay12_out_3 = Delay12_1_reg_2[1];
  assign Delay12_1_reg_next_3[0] = Delay14_out1_3;
  assign Delay12_1_reg_next_3[1] = Delay12_1_reg_3[0];
  assign Delay12_out_4 = Delay12_1_reg_3[1];
  assign Delay12_1_reg_next_4[0] = Delay14_out1_4;
  assign Delay12_1_reg_next_4[1] = Delay12_1_reg_4[0];
  assign Delay12_out_5 = Delay12_1_reg_4[1];
  assign Delay12_1_reg_next_5[0] = Delay14_out1_5;
  assign Delay12_1_reg_next_5[1] = Delay12_1_reg_5[0];
  assign Delay12_out_6 = Delay12_1_reg_5[1];
  assign Delay12_1_reg_next_6[0] = Delay14_out1_6;
  assign Delay12_1_reg_next_6[1] = Delay12_1_reg_6[0];
  assign Delay12_out_7 = Delay12_1_reg_6[1];
  assign Delay12_1_reg_next_7[0] = Delay14_out1_7;
  assign Delay12_1_reg_next_7[1] = Delay12_1_reg_7[0];
  assign Delay12_out_8 = Delay12_1_reg_7[1];
  assign Delay12_1_reg_next_8[0] = Delay14_out1_8;
  assign Delay12_1_reg_next_8[1] = Delay12_1_reg_8[0];
  assign Delay12_out_9 = Delay12_1_reg_8[1];
  assign Delay12_1_reg_next_9[0] = Delay14_out1_9;
  assign Delay12_1_reg_next_9[1] = Delay12_1_reg_9[0];
  assign Delay12_out_10 = Delay12_1_reg_9[1];
  assign Delay12_1_reg_next_10[0] = Delay14_out1_10;
  assign Delay12_1_reg_next_10[1] = Delay12_1_reg_10[0];
  assign Delay12_out_11 = Delay12_1_reg_10[1];
  assign Delay12_1_reg_next_11[0] = Delay14_out1_11;
  assign Delay12_1_reg_next_11[1] = Delay12_1_reg_11[0];
  assign Delay12_out_12 = Delay12_1_reg_11[1];
  assign Delay12_1_reg_next_12[0] = Delay14_out1_12;
  assign Delay12_1_reg_next_12[1] = Delay12_1_reg_12[0];
  assign Delay12_out_13 = Delay12_1_reg_12[1];
  assign Delay12_1_reg_next_13[0] = Delay14_out1_13;
  assign Delay12_1_reg_next_13[1] = Delay12_1_reg_13[0];
  assign Delay12_out_14 = Delay12_1_reg_13[1];
  assign Delay12_1_reg_next_14[0] = Delay14_out1_14;
  assign Delay12_1_reg_next_14[1] = Delay12_1_reg_14[0];
  assign Delay12_out_15 = Delay12_1_reg_14[1];
  assign Delay12_1_reg_next_15[0] = Delay14_out1_15;
  assign Delay12_1_reg_next_15[1] = Delay12_1_reg_15[0];
  assign Delay12_out_16 = Delay12_1_reg_15[1];



  assign Delay14_out1_1 = Delay14_out1[1];

  assign Delay14_out1_2 = Delay14_out1[2];

  assign Delay14_out1_3 = Delay14_out1[3];

  assign Delay14_out1_4 = Delay14_out1[4];

  assign Delay14_out1_5 = Delay14_out1[5];

  assign Delay14_out1_6 = Delay14_out1[6];

  assign Delay14_out1_7 = Delay14_out1[7];

  assign Delay14_out1_8 = Delay14_out1[8];

  assign Delay14_out1_9 = Delay14_out1[9];

  assign Delay14_out1_10 = Delay14_out1[10];

  assign Delay14_out1_11 = Delay14_out1[11];

  assign Delay14_out1_12 = Delay14_out1[12];

  assign Delay14_out1_13 = Delay14_out1[13];

  assign Delay14_out1_14 = Delay14_out1[14];

  assign Delay14_out1_15 = Delay14_out1[15];

  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1[0] <= 12'sb000000000000;
        Delay18_out1[1] <= 12'sb000000000000;
        Delay18_out1[2] <= 12'sb000000000000;
        Delay18_out1[3] <= 12'sb000000000000;
        Delay18_out1[4] <= 12'sb000000000000;
        Delay18_out1[5] <= 12'sb000000000000;
        Delay18_out1[6] <= 12'sb000000000000;
        Delay18_out1[7] <= 12'sb000000000000;
        Delay18_out1[8] <= 12'sb000000000000;
        Delay18_out1[9] <= 12'sb000000000000;
        Delay18_out1[10] <= 12'sb000000000000;
        Delay18_out1[11] <= 12'sb000000000000;
        Delay18_out1[12] <= 12'sb000000000000;
        Delay18_out1[13] <= 12'sb000000000000;
        Delay18_out1[14] <= 12'sb000000000000;
        Delay18_out1[15] <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Delay18_out1[0] <= Sum2_out1[0];
          Delay18_out1[1] <= Sum2_out1[1];
          Delay18_out1[2] <= Sum2_out1[2];
          Delay18_out1[3] <= Sum2_out1[3];
          Delay18_out1[4] <= Sum2_out1[4];
          Delay18_out1[5] <= Sum2_out1[5];
          Delay18_out1[6] <= Sum2_out1[6];
          Delay18_out1[7] <= Sum2_out1[7];
          Delay18_out1[8] <= Sum2_out1[8];
          Delay18_out1[9] <= Sum2_out1[9];
          Delay18_out1[10] <= Sum2_out1[10];
          Delay18_out1[11] <= Sum2_out1[11];
          Delay18_out1[12] <= Sum2_out1[12];
          Delay18_out1[13] <= Sum2_out1[13];
          Delay18_out1[14] <= Sum2_out1[14];
          Delay18_out1[15] <= Sum2_out1[15];
        end
      end
    end



  assign Delay12_out1[0] = Delay12_out_1;
  assign Delay12_out1[1] = Delay12_out_2;
  assign Delay12_out1[2] = Delay12_out_3;
  assign Delay12_out1[3] = Delay12_out_4;
  assign Delay12_out1[4] = Delay12_out_5;
  assign Delay12_out1[5] = Delay12_out_6;
  assign Delay12_out1[6] = Delay12_out_7;
  assign Delay12_out1[7] = Delay12_out_8;
  assign Delay12_out1[8] = Delay12_out_9;
  assign Delay12_out1[9] = Delay12_out_10;
  assign Delay12_out1[10] = Delay12_out_11;
  assign Delay12_out1[11] = Delay12_out_12;
  assign Delay12_out1[12] = Delay12_out_13;
  assign Delay12_out1[13] = Delay12_out_14;
  assign Delay12_out1[14] = Delay12_out_15;
  assign Delay12_out1[15] = Delay12_out_16;

  assign Sum3_1 = {Delay18_out1[0][11], Delay18_out1[0]};
  assign Sum3_2 = {{3{Delay12_out1[0][9]}}, Delay12_out1[0]};
  assign Sum3_out1[0] = Sum3_1 + Sum3_2;
  assign Sum3_3 = {Delay18_out1[1][11], Delay18_out1[1]};
  assign Sum3_4 = {{3{Delay12_out1[1][9]}}, Delay12_out1[1]};
  assign Sum3_out1[1] = Sum3_3 + Sum3_4;
  assign Sum3_5 = {Delay18_out1[2][11], Delay18_out1[2]};
  assign Sum3_6 = {{3{Delay12_out1[2][9]}}, Delay12_out1[2]};
  assign Sum3_out1[2] = Sum3_5 + Sum3_6;
  assign Sum3_7 = {Delay18_out1[3][11], Delay18_out1[3]};
  assign Sum3_8 = {{3{Delay12_out1[3][9]}}, Delay12_out1[3]};
  assign Sum3_out1[3] = Sum3_7 + Sum3_8;
  assign Sum3_9 = {Delay18_out1[4][11], Delay18_out1[4]};
  assign Sum3_10 = {{3{Delay12_out1[4][9]}}, Delay12_out1[4]};
  assign Sum3_out1[4] = Sum3_9 + Sum3_10;
  assign Sum3_11 = {Delay18_out1[5][11], Delay18_out1[5]};
  assign Sum3_12 = {{3{Delay12_out1[5][9]}}, Delay12_out1[5]};
  assign Sum3_out1[5] = Sum3_11 + Sum3_12;
  assign Sum3_13 = {Delay18_out1[6][11], Delay18_out1[6]};
  assign Sum3_14 = {{3{Delay12_out1[6][9]}}, Delay12_out1[6]};
  assign Sum3_out1[6] = Sum3_13 + Sum3_14;
  assign Sum3_15 = {Delay18_out1[7][11], Delay18_out1[7]};
  assign Sum3_16 = {{3{Delay12_out1[7][9]}}, Delay12_out1[7]};
  assign Sum3_out1[7] = Sum3_15 + Sum3_16;
  assign Sum3_17 = {Delay18_out1[8][11], Delay18_out1[8]};
  assign Sum3_18 = {{3{Delay12_out1[8][9]}}, Delay12_out1[8]};
  assign Sum3_out1[8] = Sum3_17 + Sum3_18;
  assign Sum3_19 = {Delay18_out1[9][11], Delay18_out1[9]};
  assign Sum3_20 = {{3{Delay12_out1[9][9]}}, Delay12_out1[9]};
  assign Sum3_out1[9] = Sum3_19 + Sum3_20;
  assign Sum3_21 = {Delay18_out1[10][11], Delay18_out1[10]};
  assign Sum3_22 = {{3{Delay12_out1[10][9]}}, Delay12_out1[10]};
  assign Sum3_out1[10] = Sum3_21 + Sum3_22;
  assign Sum3_23 = {Delay18_out1[11][11], Delay18_out1[11]};
  assign Sum3_24 = {{3{Delay12_out1[11][9]}}, Delay12_out1[11]};
  assign Sum3_out1[11] = Sum3_23 + Sum3_24;
  assign Sum3_25 = {Delay18_out1[12][11], Delay18_out1[12]};
  assign Sum3_26 = {{3{Delay12_out1[12][9]}}, Delay12_out1[12]};
  assign Sum3_out1[12] = Sum3_25 + Sum3_26;
  assign Sum3_27 = {Delay18_out1[13][11], Delay18_out1[13]};
  assign Sum3_28 = {{3{Delay12_out1[13][9]}}, Delay12_out1[13]};
  assign Sum3_out1[13] = Sum3_27 + Sum3_28;
  assign Sum3_29 = {Delay18_out1[14][11], Delay18_out1[14]};
  assign Sum3_30 = {{3{Delay12_out1[14][9]}}, Delay12_out1[14]};
  assign Sum3_out1[14] = Sum3_29 + Sum3_30;
  assign Sum3_31 = {Delay18_out1[15][11], Delay18_out1[15]};
  assign Sum3_32 = {{3{Delay12_out1[15][9]}}, Delay12_out1[15]};
  assign Sum3_out1[15] = Sum3_31 + Sum3_32;



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1[0] <= 13'sb0000000000000;
        Delay8_out1[1] <= 13'sb0000000000000;
        Delay8_out1[2] <= 13'sb0000000000000;
        Delay8_out1[3] <= 13'sb0000000000000;
        Delay8_out1[4] <= 13'sb0000000000000;
        Delay8_out1[5] <= 13'sb0000000000000;
        Delay8_out1[6] <= 13'sb0000000000000;
        Delay8_out1[7] <= 13'sb0000000000000;
        Delay8_out1[8] <= 13'sb0000000000000;
        Delay8_out1[9] <= 13'sb0000000000000;
        Delay8_out1[10] <= 13'sb0000000000000;
        Delay8_out1[11] <= 13'sb0000000000000;
        Delay8_out1[12] <= 13'sb0000000000000;
        Delay8_out1[13] <= 13'sb0000000000000;
        Delay8_out1[14] <= 13'sb0000000000000;
        Delay8_out1[15] <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1[0] <= Sum3_out1[0];
          Delay8_out1[1] <= Sum3_out1[1];
          Delay8_out1[2] <= Sum3_out1[2];
          Delay8_out1[3] <= Sum3_out1[3];
          Delay8_out1[4] <= Sum3_out1[4];
          Delay8_out1[5] <= Sum3_out1[5];
          Delay8_out1[6] <= Sum3_out1[6];
          Delay8_out1[7] <= Sum3_out1[7];
          Delay8_out1[8] <= Sum3_out1[8];
          Delay8_out1[9] <= Sum3_out1[9];
          Delay8_out1[10] <= Sum3_out1[10];
          Delay8_out1[11] <= Sum3_out1[11];
          Delay8_out1[12] <= Sum3_out1[12];
          Delay8_out1[13] <= Sum3_out1[13];
          Delay8_out1[14] <= Sum3_out1[14];
          Delay8_out1[15] <= Sum3_out1[15];
        end
      end
    end



  assign totalCostOut_0 = Delay8_out1[0];

  assign totalCostOut_1 = Delay8_out1[1];

  assign totalCostOut_2 = Delay8_out1[2];

  assign totalCostOut_3 = Delay8_out1[3];

  assign totalCostOut_4 = Delay8_out1[4];

  assign totalCostOut_5 = Delay8_out1[5];

  assign totalCostOut_6 = Delay8_out1[6];

  assign totalCostOut_7 = Delay8_out1[7];

  assign totalCostOut_8 = Delay8_out1[8];

  assign totalCostOut_9 = Delay8_out1[9];

  assign totalCostOut_10 = Delay8_out1[10];

  assign totalCostOut_11 = Delay8_out1[11];

  assign totalCostOut_12 = Delay8_out1[12];

  assign totalCostOut_13 = Delay8_out1[13];

  assign totalCostOut_14 = Delay8_out1[14];

  assign totalCostOut_15 = Delay8_out1[15];

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        alpha_reg[0] <= 1'b0;
        alpha_reg[1] <= 1'b0;
        alpha_reg[2] <= 1'b0;
        alpha_reg[3] <= 1'b0;
        alpha_reg[4] <= 1'b0;
        alpha_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg[0] <= alpha_reg_next[0];
          alpha_reg[1] <= alpha_reg_next[1];
          alpha_reg[2] <= alpha_reg_next[2];
          alpha_reg[3] <= alpha_reg_next[3];
          alpha_reg[4] <= alpha_reg_next[4];
          alpha_reg[5] <= alpha_reg_next[5];
        end
      end
    end

  assign Delay2_out1_valid = alpha_reg[5];
  assign alpha_reg_next[0] = LeftToRight_out2_valid;
  assign alpha_reg_next[1] = alpha_reg[0];
  assign alpha_reg_next[2] = alpha_reg[1];
  assign alpha_reg_next[3] = alpha_reg[2];
  assign alpha_reg_next[4] = alpha_reg[3];
  assign alpha_reg_next[5] = alpha_reg[4];



  assign valid = Delay2_out1_valid;

  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        alpha_reg_1[0] <= 1'b0;
        alpha_reg_1[1] <= 1'b0;
        alpha_reg_1[2] <= 1'b0;
        alpha_reg_1[3] <= 1'b0;
        alpha_reg_1[4] <= 1'b0;
        alpha_reg_1[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_1[0] <= alpha_reg_next_1[0];
          alpha_reg_1[1] <= alpha_reg_next_1[1];
          alpha_reg_1[2] <= alpha_reg_next_1[2];
          alpha_reg_1[3] <= alpha_reg_next_1[3];
          alpha_reg_1[4] <= alpha_reg_next_1[4];
          alpha_reg_1[5] <= alpha_reg_next_1[5];
        end
      end
    end

  assign Delay6_out1_valid = alpha_reg_1[5];
  assign alpha_reg_next_1[0] = TopLeftToBottomRight_out2_valid;
  assign alpha_reg_next_1[1] = alpha_reg_1[0];
  assign alpha_reg_next_1[2] = alpha_reg_1[1];
  assign alpha_reg_next_1[3] = alpha_reg_1[2];
  assign alpha_reg_next_1[4] = alpha_reg_1[3];
  assign alpha_reg_next_1[5] = alpha_reg_1[4];



  assign valid_1 = Delay6_out1_valid;

  assign Logical_Operator_out1 = valid & valid_1;



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Logical_Operator_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        alpha_reg_2[0] <= 1'b0;
        alpha_reg_2[1] <= 1'b0;
        alpha_reg_2[2] <= 1'b0;
        alpha_reg_2[3] <= 1'b0;
        alpha_reg_2[4] <= 1'b0;
        alpha_reg_2[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_2[0] <= alpha_reg_next_2[0];
          alpha_reg_2[1] <= alpha_reg_next_2[1];
          alpha_reg_2[2] <= alpha_reg_next_2[2];
          alpha_reg_2[3] <= alpha_reg_next_2[3];
          alpha_reg_2[4] <= alpha_reg_next_2[4];
          alpha_reg_2[5] <= alpha_reg_next_2[5];
        end
      end
    end

  assign Delay3_out1_valid = alpha_reg_2[5];
  assign alpha_reg_next_2[0] = TopToBottom_out2_valid;
  assign alpha_reg_next_2[1] = alpha_reg_2[0];
  assign alpha_reg_next_2[2] = alpha_reg_2[1];
  assign alpha_reg_next_2[3] = alpha_reg_2[2];
  assign alpha_reg_next_2[4] = alpha_reg_2[3];
  assign alpha_reg_next_2[5] = alpha_reg_2[4];



  assign valid_2 = Delay3_out1_valid;

  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        alpha_reg_3[0] <= 1'b0;
        alpha_reg_3[1] <= 1'b0;
        alpha_reg_3[2] <= 1'b0;
        alpha_reg_3[3] <= 1'b0;
        alpha_reg_3[4] <= 1'b0;
        alpha_reg_3[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_3[0] <= alpha_reg_next_3[0];
          alpha_reg_3[1] <= alpha_reg_next_3[1];
          alpha_reg_3[2] <= alpha_reg_next_3[2];
          alpha_reg_3[3] <= alpha_reg_next_3[3];
          alpha_reg_3[4] <= alpha_reg_next_3[4];
          alpha_reg_3[5] <= alpha_reg_next_3[5];
        end
      end
    end

  assign Delay17_out1_valid = alpha_reg_3[5];
  assign alpha_reg_next_3[0] = TopRightToBottomLeft_out2_valid;
  assign alpha_reg_next_3[1] = alpha_reg_3[0];
  assign alpha_reg_next_3[2] = alpha_reg_3[1];
  assign alpha_reg_next_3[3] = alpha_reg_3[2];
  assign alpha_reg_next_3[4] = alpha_reg_3[3];
  assign alpha_reg_next_3[5] = alpha_reg_3[4];



  assign valid_3 = Delay17_out1_valid;

  assign Logical_Operator1_out1 = valid_2 & valid_3;



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Logical_Operator1_out1;
        end
      end
    end



  assign Logical_Operator2_out1 = Delay11_out1 & Delay7_out1;



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= Logical_Operator2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay15_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay15_out1_valid <= RightToLeft_out2_valid;
        end
      end
    end



  assign valid_4 = Delay15_out1_valid;

  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_reg[0] <= 1'b0;
        Delay13_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_reg[0] <= Delay13_reg_next[0];
          Delay13_reg[1] <= Delay13_reg_next[1];
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[1];
  assign Delay13_reg_next[0] = valid_4;
  assign Delay13_reg_next[1] = Delay13_reg[0];



  assign Logical_Operator3_out1 = Delay19_out1 & Delay13_out1;



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Logical_Operator3_out1;
        end
      end
    end



  assign validOut = Delay9_out1;

endmodule  // SGBMHDLAl_ip_src_DirectionalCost

