// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_zeroPadding_block.v
// Created: 2021-04-19 19:46:14
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_zeroPadding_block
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/MatchingCost/CensusTransform1/zeroPadding
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_zeroPadding_block
          (clk,
           reset,
           enb,
           pixelIn,
           ctrlIn_hStart,
           ctrlIn_vStart,
           ctrlIn_valid,
           pixelOut,
           validOut,
           resetOut);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] pixelIn;  // uint8
  input   ctrlIn_hStart;
  input   ctrlIn_vStart;
  input   ctrlIn_valid;
  output  [7:0] pixelOut;  // uint8
  output  validOut;
  output  resetOut;


  wire vStart;
  wire hStart;
  reg  Delay4_out1;
  reg  Delay5_out1;
  wire Logical_Operator1_out1;
  reg [7:0] Delay3_out1;  // uint8
  wire valid;
  reg  Delay_out1;
  wire popSubsystem_out3;
  reg  Delay2_out1;
  wire Logical_Operator2_out1;
  wire [7:0] FIFO_out1;  // uint8
  wire FIFO_out2;
  wire Logical_Operator3_out1;
  wire Logical_Operator4_out1;
  wire popSubsystem_out1;
  reg  Delay6_out1;
  wire Logical_Operator_out1;
  reg [1:0] HDLC3_out1;  // ufix2
  wire CC5_out1;
  wire popSubsystem_out2;
  reg  Delay14_out1;
  wire [7:0] Constant_out1;  // uint8
  wire [7:0] Switch_out1;  // uint8
  wire Logical_Operator5_out1;
  reg  Delay1_out1;


  assign vStart = ctrlIn_vStart;

  assign hStart = ctrlIn_hStart;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= vStart;
        end
      end
    end



  assign Logical_Operator1_out1 = Delay4_out1 & Delay5_out1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= pixelIn;
        end
      end
    end



  assign valid = ctrlIn_valid;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= popSubsystem_out3;
        end
      end
    end



  SGBMHDLAl_ip_src_FIFO_block u_FIFO (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .dataIn(Delay3_out1),  // uint8
                                      .Push(Delay_out1),
                                      .Pop(Logical_Operator2_out1),
                                      .Reset_1(ctrlIn_vStart),
                                      .dataOut(FIFO_out1),  // uint8
                                      .empty(FIFO_out2)
                                      );

  assign Logical_Operator3_out1 =  ~ FIFO_out2;



  assign Logical_Operator4_out1 = Delay2_out1 | (vStart | Logical_Operator3_out1);



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= popSubsystem_out1;
        end
      end
    end



  assign Logical_Operator_out1 = Delay6_out1 | vStart;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 3
  always @(posedge clk or posedge reset)
    begin : HDLC3_process
      if (reset == 1'b1) begin
        HDLC3_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          if (Logical_Operator_out1 == 1'b1) begin
            HDLC3_out1 <= 2'b00;
          end
          else if (Logical_Operator1_out1 == 1'b1) begin
            HDLC3_out1 <= HDLC3_out1 + 2'b01;
          end
        end
      end
    end



  assign CC5_out1 = HDLC3_out1 == 2'b01;



  SGBMHDLAl_ip_src_popSubsystem_block u_popSubsystem (.clk(clk),
                                                      .reset(reset),
                                                      .enb(enb),
                                                      .enable(CC5_out1),
                                                      .reset_1(Logical_Operator_out1),
                                                      .Enable_1(Logical_Operator4_out1),
                                                      .done(popSubsystem_out1),
                                                      .pop(popSubsystem_out2),
                                                      .lastRowOut(popSubsystem_out3)
                                                      );

  assign Logical_Operator2_out1 = popSubsystem_out2 & Logical_Operator3_out1;



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Logical_Operator2_out1;
        end
      end
    end



  assign Constant_out1 = 8'b00000000;



  assign Switch_out1 = (Delay14_out1 == 1'b0 ? Constant_out1 :
              FIFO_out1);



  assign pixelOut = Switch_out1;

  assign Logical_Operator5_out1 = Logical_Operator4_out1 & CC5_out1;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Logical_Operator5_out1;
        end
      end
    end



  assign validOut = Delay1_out1;

  assign resetOut = ctrlIn_vStart;

endmodule  // SGBMHDLAl_ip_src_zeroPadding_block

