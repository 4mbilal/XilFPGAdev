// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_Interpolation.v
// Created: 2021-04-19 19:46:15
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_Interpolation
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/PostProcessing/Interpolation
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_Interpolation
          (clk,
           reset,
           enb,
           totalCostIn_0,
           totalCostIn_1,
           totalCostIn_2,
           totalCostIn_3,
           totalCostIn_4,
           totalCostIn_5,
           totalCostIn_6,
           totalCostIn_7,
           totalCostIn_8,
           totalCostIn_9,
           totalCostIn_10,
           totalCostIn_11,
           totalCostIn_12,
           totalCostIn_13,
           totalCostIn_14,
           totalCostIn_15,
           validIn,
           minIndexVal,
           minIndex,
           validOutUNF,
           disparity,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [12:0] totalCostIn_0;  // sfix13
  input   signed [12:0] totalCostIn_1;  // sfix13
  input   signed [12:0] totalCostIn_2;  // sfix13
  input   signed [12:0] totalCostIn_3;  // sfix13
  input   signed [12:0] totalCostIn_4;  // sfix13
  input   signed [12:0] totalCostIn_5;  // sfix13
  input   signed [12:0] totalCostIn_6;  // sfix13
  input   signed [12:0] totalCostIn_7;  // sfix13
  input   signed [12:0] totalCostIn_8;  // sfix13
  input   signed [12:0] totalCostIn_9;  // sfix13
  input   signed [12:0] totalCostIn_10;  // sfix13
  input   signed [12:0] totalCostIn_11;  // sfix13
  input   signed [12:0] totalCostIn_12;  // sfix13
  input   signed [12:0] totalCostIn_13;  // sfix13
  input   signed [12:0] totalCostIn_14;  // sfix13
  input   signed [12:0] totalCostIn_15;  // sfix13
  input   validIn;
  output  signed [12:0] minIndexVal;  // sfix13
  output  [7:0] minIndex;  // uint8
  output  validOutUNF;
  output  signed [23:0] disparity;  // sfix24_En8
  output  validOut;


  wire [7:0] Minimum_Cost_Index_out1;  // uint8
  wire signed [12:0] Minimum_Cost_Index_out2;  // sfix13
  wire signed [12:0] Minimum_Cost_Index_out3;  // sfix13
  wire signed [12:0] Minimum_Cost_Index_out4;  // sfix13
  reg  [0:6] Delay_reg;  // ufix1 [7]
  wire [0:6] Delay_reg_next;  // ufix1 [7]
  wire Delay_out1;
  wire Compare_To_Constant1_out1;
  wire Compare_To_Constant_out1;
  wire Constant2_out1;  // ufix1
  wire signed [8:0] Add3_sub_temp;  // sfix9
  wire signed [8:0] Add3_1;  // sfix9
  wire signed [8:0] Add3_2;  // sfix9
  wire [7:0] Add3_out1;  // uint8
  reg [7:0] Delay11_reg [0:24];  // ufix8 [25]
  wire [7:0] Delay11_reg_next [0:24];  // ufix8 [25]
  wire [7:0] Delay11_out1;  // uint8
  wire signed [13:0] Add2_1;  // sfix14
  wire signed [13:0] Add2_2;  // sfix14
  wire signed [13:0] Add2_out1;  // sfix14
  reg signed [13:0] Delay1_out1;  // sfix14
  wire Compare_To_Zero_out1;
  reg  [0:22] Delay17_reg;  // ufix1 [23]
  wire [0:22] Delay17_reg_next;  // ufix1 [23]
  wire Delay17_out1;
  wire Constant4_out1;  // ufix1
  wire signed [14:0] Abs_y;  // sfix15
  wire signed [14:0] Abs_1;  // sfix15
  wire [12:0] Abs_out1;  // ufix13
  reg [12:0] Delay8_reg [0:2];  // ufix13 [3]
  wire [12:0] Delay8_reg_next [0:2];  // ufix13 [3]
  wire [12:0] Delay8_out1;  // ufix13
  wire signed [13:0] Add_1;  // sfix14
  wire signed [13:0] Add_2;  // sfix14
  wire signed [13:0] Add_out1;  // sfix14
  reg signed [13:0] Delay2_out1;  // sfix14
  wire signed [13:0] Add5_1;  // sfix14
  wire signed [13:0] Add5_2;  // sfix14
  wire signed [13:0] Add5_out1;  // sfix14
  reg signed [13:0] Delay3_out1;  // sfix14
  wire signed [14:0] Add1_sub_temp;  // sfix15
  wire signed [14:0] Add1_1;  // sfix15
  wire signed [14:0] Add1_2;  // sfix15
  wire signed [12:0] Add1_out1;  // sfix13
  reg signed [12:0] Delay4_out1;  // sfix13
  wire signed [12:0] Constant1_out1;  // sfix13
  wire signed [12:0] Deno_out1;  // sfix13
  reg signed [12:0] Delay5_out1;  // sfix13
  wire signed [13:0] Abs1_y;  // sfix14
  wire signed [13:0] Abs1_1;  // sfix14
  wire [12:0] Abs1_out1;  // ufix13
  reg [12:0] Delay9_out1;  // ufix13
  wire [16:0] Division_out1;  // ufix17_En4
  wire [16:0] Shift_Arithmetic_out1;  // ufix17_En4
  reg [16:0] Delay6_out1;  // ufix17_En4
  wire signed [17:0] Add7_sub_cast;  // sfix18_En4
  wire signed [17:0] Add7_sub_cast_1;  // sfix18_En4
  wire signed [17:0] Add7_out1;  // sfix18_En4
  wire signed [17:0] Delay6_out1_dtc;  // sfix18_En4
  wire signed [17:0] Switch_out1;  // sfix18_En4
  reg signed [17:0] Delay10_out1;  // sfix18_En4
  wire signed [18:0] Add4_add_cast;  // sfix19_En4
  wire signed [18:0] Add4_add_cast_1;  // sfix19_En4
  wire signed [18:0] Add4_out1;  // sfix19_En4
  reg signed [18:0] Delay12_out1;  // sfix19_En4
  reg  [0:25] Delay7_reg;  // ufix1 [26]
  wire [0:25] Delay7_reg_next;  // ufix1 [26]
  wire Delay7_out1;
  wire signed [18:0] Constant6_out1;  // sfix19_En4
  wire signed [23:0] Constant6_out1_dtc;  // sfix24_En8
  reg  [0:25] Delay13_reg;  // ufix1 [26]
  wire [0:25] Delay13_reg_next;  // ufix1 [26]
  wire Delay13_out1;
  wire signed [16:0] Constant3_out1;  // sfix17_En8
  wire signed [23:0] Add6_add_cast;  // sfix24_En8
  wire signed [23:0] Add6_add_cast_1;  // sfix24_En8
  wire signed [23:0] Add6_out1;  // sfix24_En8
  wire signed [18:0] Constant_out1;  // sfix19_En4
  wire signed [23:0] Constant_out1_dtc;  // sfix24_En8
  wire signed [23:0] Switch1_out1;  // sfix24_En8
  wire signed [23:0] Switch2_out1;  // sfix24_En8
  reg  [0:25] Delay15_reg;  // ufix1 [26]
  wire [0:25] Delay15_reg_next;  // ufix1 [26]
  wire Delay15_out1;


  SGBMHDLAl_ip_src_Minimum_Cost_Index u_Minimum_Cost_Index (.clk(clk),
                                                            .reset(reset),
                                                            .enb(enb),
                                                            .Total_Cost_0(totalCostIn_0),  // sfix13
                                                            .Total_Cost_1(totalCostIn_1),  // sfix13
                                                            .Total_Cost_2(totalCostIn_2),  // sfix13
                                                            .Total_Cost_3(totalCostIn_3),  // sfix13
                                                            .Total_Cost_4(totalCostIn_4),  // sfix13
                                                            .Total_Cost_5(totalCostIn_5),  // sfix13
                                                            .Total_Cost_6(totalCostIn_6),  // sfix13
                                                            .Total_Cost_7(totalCostIn_7),  // sfix13
                                                            .Total_Cost_8(totalCostIn_8),  // sfix13
                                                            .Total_Cost_9(totalCostIn_9),  // sfix13
                                                            .Total_Cost_10(totalCostIn_10),  // sfix13
                                                            .Total_Cost_11(totalCostIn_11),  // sfix13
                                                            .Total_Cost_12(totalCostIn_12),  // sfix13
                                                            .Total_Cost_13(totalCostIn_13),  // sfix13
                                                            .Total_Cost_14(totalCostIn_14),  // sfix13
                                                            .Total_Cost_15(totalCostIn_15),  // sfix13
                                                            .Index(Minimum_Cost_Index_out1),  // uint8
                                                            .LeftCostVal(Minimum_Cost_Index_out2),  // sfix13
                                                            .CenterCostVal(Minimum_Cost_Index_out3),  // sfix13
                                                            .RightCostVal(Minimum_Cost_Index_out4)  // sfix13
                                                            );

  assign minIndexVal = Minimum_Cost_Index_out3;

  assign minIndex = Minimum_Cost_Index_out1;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 1'b0;
        Delay_reg[1] <= 1'b0;
        Delay_reg[2] <= 1'b0;
        Delay_reg[3] <= 1'b0;
        Delay_reg[4] <= 1'b0;
        Delay_reg[5] <= 1'b0;
        Delay_reg[6] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
          Delay_reg[2] <= Delay_reg_next[2];
          Delay_reg[3] <= Delay_reg_next[3];
          Delay_reg[4] <= Delay_reg_next[4];
          Delay_reg[5] <= Delay_reg_next[5];
          Delay_reg[6] <= Delay_reg_next[6];
        end
      end
    end

  assign Delay_out1 = Delay_reg[6];
  assign Delay_reg_next[0] = validIn;
  assign Delay_reg_next[1] = Delay_reg[0];
  assign Delay_reg_next[2] = Delay_reg[1];
  assign Delay_reg_next[3] = Delay_reg[2];
  assign Delay_reg_next[4] = Delay_reg[3];
  assign Delay_reg_next[5] = Delay_reg[4];
  assign Delay_reg_next[6] = Delay_reg[5];



  assign validOutUNF = Delay_out1;

  assign Compare_To_Constant1_out1 = Minimum_Cost_Index_out1 != 8'b00010000;



  assign Compare_To_Constant_out1 = Minimum_Cost_Index_out1 == 8'b00000001;



  assign Constant2_out1 = 1'b1;



  assign Add3_1 = {1'b0, Minimum_Cost_Index_out1};
  assign Add3_2 = {8'b0, Constant2_out1};
  assign Add3_sub_temp = Add3_1 - Add3_2;
  assign Add3_out1 = Add3_sub_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_reg[0] <= 8'b00000000;
        Delay11_reg[1] <= 8'b00000000;
        Delay11_reg[2] <= 8'b00000000;
        Delay11_reg[3] <= 8'b00000000;
        Delay11_reg[4] <= 8'b00000000;
        Delay11_reg[5] <= 8'b00000000;
        Delay11_reg[6] <= 8'b00000000;
        Delay11_reg[7] <= 8'b00000000;
        Delay11_reg[8] <= 8'b00000000;
        Delay11_reg[9] <= 8'b00000000;
        Delay11_reg[10] <= 8'b00000000;
        Delay11_reg[11] <= 8'b00000000;
        Delay11_reg[12] <= 8'b00000000;
        Delay11_reg[13] <= 8'b00000000;
        Delay11_reg[14] <= 8'b00000000;
        Delay11_reg[15] <= 8'b00000000;
        Delay11_reg[16] <= 8'b00000000;
        Delay11_reg[17] <= 8'b00000000;
        Delay11_reg[18] <= 8'b00000000;
        Delay11_reg[19] <= 8'b00000000;
        Delay11_reg[20] <= 8'b00000000;
        Delay11_reg[21] <= 8'b00000000;
        Delay11_reg[22] <= 8'b00000000;
        Delay11_reg[23] <= 8'b00000000;
        Delay11_reg[24] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay11_reg[0] <= Delay11_reg_next[0];
          Delay11_reg[1] <= Delay11_reg_next[1];
          Delay11_reg[2] <= Delay11_reg_next[2];
          Delay11_reg[3] <= Delay11_reg_next[3];
          Delay11_reg[4] <= Delay11_reg_next[4];
          Delay11_reg[5] <= Delay11_reg_next[5];
          Delay11_reg[6] <= Delay11_reg_next[6];
          Delay11_reg[7] <= Delay11_reg_next[7];
          Delay11_reg[8] <= Delay11_reg_next[8];
          Delay11_reg[9] <= Delay11_reg_next[9];
          Delay11_reg[10] <= Delay11_reg_next[10];
          Delay11_reg[11] <= Delay11_reg_next[11];
          Delay11_reg[12] <= Delay11_reg_next[12];
          Delay11_reg[13] <= Delay11_reg_next[13];
          Delay11_reg[14] <= Delay11_reg_next[14];
          Delay11_reg[15] <= Delay11_reg_next[15];
          Delay11_reg[16] <= Delay11_reg_next[16];
          Delay11_reg[17] <= Delay11_reg_next[17];
          Delay11_reg[18] <= Delay11_reg_next[18];
          Delay11_reg[19] <= Delay11_reg_next[19];
          Delay11_reg[20] <= Delay11_reg_next[20];
          Delay11_reg[21] <= Delay11_reg_next[21];
          Delay11_reg[22] <= Delay11_reg_next[22];
          Delay11_reg[23] <= Delay11_reg_next[23];
          Delay11_reg[24] <= Delay11_reg_next[24];
        end
      end
    end

  assign Delay11_out1 = Delay11_reg[24];
  assign Delay11_reg_next[0] = Add3_out1;
  assign Delay11_reg_next[1] = Delay11_reg[0];
  assign Delay11_reg_next[2] = Delay11_reg[1];
  assign Delay11_reg_next[3] = Delay11_reg[2];
  assign Delay11_reg_next[4] = Delay11_reg[3];
  assign Delay11_reg_next[5] = Delay11_reg[4];
  assign Delay11_reg_next[6] = Delay11_reg[5];
  assign Delay11_reg_next[7] = Delay11_reg[6];
  assign Delay11_reg_next[8] = Delay11_reg[7];
  assign Delay11_reg_next[9] = Delay11_reg[8];
  assign Delay11_reg_next[10] = Delay11_reg[9];
  assign Delay11_reg_next[11] = Delay11_reg[10];
  assign Delay11_reg_next[12] = Delay11_reg[11];
  assign Delay11_reg_next[13] = Delay11_reg[12];
  assign Delay11_reg_next[14] = Delay11_reg[13];
  assign Delay11_reg_next[15] = Delay11_reg[14];
  assign Delay11_reg_next[16] = Delay11_reg[15];
  assign Delay11_reg_next[17] = Delay11_reg[16];
  assign Delay11_reg_next[18] = Delay11_reg[17];
  assign Delay11_reg_next[19] = Delay11_reg[18];
  assign Delay11_reg_next[20] = Delay11_reg[19];
  assign Delay11_reg_next[21] = Delay11_reg[20];
  assign Delay11_reg_next[22] = Delay11_reg[21];
  assign Delay11_reg_next[23] = Delay11_reg[22];
  assign Delay11_reg_next[24] = Delay11_reg[23];



  assign Add2_1 = {Minimum_Cost_Index_out2[12], Minimum_Cost_Index_out2};
  assign Add2_2 = {Minimum_Cost_Index_out4[12], Minimum_Cost_Index_out4};
  assign Add2_out1 = Add2_1 - Add2_2;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Add2_out1;
        end
      end
    end



  assign Compare_To_Zero_out1 = Delay1_out1 >= 14'sb00000000000000;



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_reg[0] <= 1'b0;
        Delay17_reg[1] <= 1'b0;
        Delay17_reg[2] <= 1'b0;
        Delay17_reg[3] <= 1'b0;
        Delay17_reg[4] <= 1'b0;
        Delay17_reg[5] <= 1'b0;
        Delay17_reg[6] <= 1'b0;
        Delay17_reg[7] <= 1'b0;
        Delay17_reg[8] <= 1'b0;
        Delay17_reg[9] <= 1'b0;
        Delay17_reg[10] <= 1'b0;
        Delay17_reg[11] <= 1'b0;
        Delay17_reg[12] <= 1'b0;
        Delay17_reg[13] <= 1'b0;
        Delay17_reg[14] <= 1'b0;
        Delay17_reg[15] <= 1'b0;
        Delay17_reg[16] <= 1'b0;
        Delay17_reg[17] <= 1'b0;
        Delay17_reg[18] <= 1'b0;
        Delay17_reg[19] <= 1'b0;
        Delay17_reg[20] <= 1'b0;
        Delay17_reg[21] <= 1'b0;
        Delay17_reg[22] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay17_reg[0] <= Delay17_reg_next[0];
          Delay17_reg[1] <= Delay17_reg_next[1];
          Delay17_reg[2] <= Delay17_reg_next[2];
          Delay17_reg[3] <= Delay17_reg_next[3];
          Delay17_reg[4] <= Delay17_reg_next[4];
          Delay17_reg[5] <= Delay17_reg_next[5];
          Delay17_reg[6] <= Delay17_reg_next[6];
          Delay17_reg[7] <= Delay17_reg_next[7];
          Delay17_reg[8] <= Delay17_reg_next[8];
          Delay17_reg[9] <= Delay17_reg_next[9];
          Delay17_reg[10] <= Delay17_reg_next[10];
          Delay17_reg[11] <= Delay17_reg_next[11];
          Delay17_reg[12] <= Delay17_reg_next[12];
          Delay17_reg[13] <= Delay17_reg_next[13];
          Delay17_reg[14] <= Delay17_reg_next[14];
          Delay17_reg[15] <= Delay17_reg_next[15];
          Delay17_reg[16] <= Delay17_reg_next[16];
          Delay17_reg[17] <= Delay17_reg_next[17];
          Delay17_reg[18] <= Delay17_reg_next[18];
          Delay17_reg[19] <= Delay17_reg_next[19];
          Delay17_reg[20] <= Delay17_reg_next[20];
          Delay17_reg[21] <= Delay17_reg_next[21];
          Delay17_reg[22] <= Delay17_reg_next[22];
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[22];
  assign Delay17_reg_next[0] = Compare_To_Zero_out1;
  assign Delay17_reg_next[1] = Delay17_reg[0];
  assign Delay17_reg_next[2] = Delay17_reg[1];
  assign Delay17_reg_next[3] = Delay17_reg[2];
  assign Delay17_reg_next[4] = Delay17_reg[3];
  assign Delay17_reg_next[5] = Delay17_reg[4];
  assign Delay17_reg_next[6] = Delay17_reg[5];
  assign Delay17_reg_next[7] = Delay17_reg[6];
  assign Delay17_reg_next[8] = Delay17_reg[7];
  assign Delay17_reg_next[9] = Delay17_reg[8];
  assign Delay17_reg_next[10] = Delay17_reg[9];
  assign Delay17_reg_next[11] = Delay17_reg[10];
  assign Delay17_reg_next[12] = Delay17_reg[11];
  assign Delay17_reg_next[13] = Delay17_reg[12];
  assign Delay17_reg_next[14] = Delay17_reg[13];
  assign Delay17_reg_next[15] = Delay17_reg[14];
  assign Delay17_reg_next[16] = Delay17_reg[15];
  assign Delay17_reg_next[17] = Delay17_reg[16];
  assign Delay17_reg_next[18] = Delay17_reg[17];
  assign Delay17_reg_next[19] = Delay17_reg[18];
  assign Delay17_reg_next[20] = Delay17_reg[19];
  assign Delay17_reg_next[21] = Delay17_reg[20];
  assign Delay17_reg_next[22] = Delay17_reg[21];



  assign Constant4_out1 = 1'b0;



  assign Abs_1 = {Delay1_out1[13], Delay1_out1};
  assign Abs_y = (Delay1_out1 < 14'sb00000000000000 ?  - (Abs_1) :
              {Delay1_out1[13], Delay1_out1});
  assign Abs_out1 = ((Abs_y[14] == 1'b0) && (Abs_y[13] != 1'b0) ? 13'b1111111111111 :
              (Abs_y[14] == 1'b1 ? 13'b0000000000000 :
              Abs_y[12:0]));



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_reg[0] <= 13'b0000000000000;
        Delay8_reg[1] <= 13'b0000000000000;
        Delay8_reg[2] <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= Delay8_reg_next[0];
          Delay8_reg[1] <= Delay8_reg_next[1];
          Delay8_reg[2] <= Delay8_reg_next[2];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[2];
  assign Delay8_reg_next[0] = Abs_out1;
  assign Delay8_reg_next[1] = Delay8_reg[0];
  assign Delay8_reg_next[2] = Delay8_reg[1];



  assign Add_1 = {Minimum_Cost_Index_out2[12], Minimum_Cost_Index_out2};
  assign Add_2 = {Minimum_Cost_Index_out4[12], Minimum_Cost_Index_out4};
  assign Add_out1 = Add_1 + Add_2;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Add_out1;
        end
      end
    end



  assign Add5_1 = {Minimum_Cost_Index_out3[12], Minimum_Cost_Index_out3};
  assign Add5_2 = {Minimum_Cost_Index_out3[12], Minimum_Cost_Index_out3};
  assign Add5_out1 = Add5_1 + Add5_2;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add5_out1;
        end
      end
    end



  assign Add1_1 = {Delay2_out1[13], Delay2_out1};
  assign Add1_2 = {Delay3_out1[13], Delay3_out1};
  assign Add1_sub_temp = Add1_1 - Add1_2;
  assign Add1_out1 = Add1_sub_temp[12:0];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add1_out1;
        end
      end
    end



  assign Constant1_out1 = 13'sb0000000000001;



  SGBMHDLAl_ip_src_Deno u_Deno (.in0(Delay4_out1),  // sfix13
                                .in1(Constant1_out1),  // sfix13
                                .out0(Deno_out1)  // sfix13
                                );

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Deno_out1;
        end
      end
    end



  assign Abs1_1 = {Delay5_out1[12], Delay5_out1};
  assign Abs1_y = (Delay5_out1 < 13'sb0000000000000 ?  - (Abs1_1) :
              {Delay5_out1[12], Delay5_out1});
  assign Abs1_out1 = (Abs1_y[13] == 1'b1 ? 13'b0000000000000 :
              Abs1_y[12:0]);



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Abs1_out1;
        end
      end
    end



  SGBMHDLAl_ip_src_Division u_Division (.clk(clk),
                                        .reset(reset),
                                        .enb(enb),
                                        .Dividend(Delay8_out1),  // ufix13
                                        .Divisor(Delay9_out1),  // ufix13
                                        .res(Division_out1)  // ufix17_En4
                                        );

  assign Shift_Arithmetic_out1 = Division_out1 >>> 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Shift_Arithmetic_out1;
        end
      end
    end



  assign Add7_sub_cast = {13'b0, {Constant4_out1, 4'b0000}};
  assign Add7_sub_cast_1 = {1'b0, Delay6_out1};
  assign Add7_out1 = Add7_sub_cast - Add7_sub_cast_1;



  assign Delay6_out1_dtc = {1'b0, Delay6_out1};



  assign Switch_out1 = (Delay17_out1 == 1'b0 ? Add7_out1 :
              Delay6_out1_dtc);



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Switch_out1;
        end
      end
    end



  assign Add4_add_cast = {7'b0, {Delay11_out1, 4'b0000}};
  assign Add4_add_cast_1 = {Delay10_out1[17], Delay10_out1};
  assign Add4_out1 = Add4_add_cast + Add4_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Add4_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_reg[0] <= 1'b0;
        Delay7_reg[1] <= 1'b0;
        Delay7_reg[2] <= 1'b0;
        Delay7_reg[3] <= 1'b0;
        Delay7_reg[4] <= 1'b0;
        Delay7_reg[5] <= 1'b0;
        Delay7_reg[6] <= 1'b0;
        Delay7_reg[7] <= 1'b0;
        Delay7_reg[8] <= 1'b0;
        Delay7_reg[9] <= 1'b0;
        Delay7_reg[10] <= 1'b0;
        Delay7_reg[11] <= 1'b0;
        Delay7_reg[12] <= 1'b0;
        Delay7_reg[13] <= 1'b0;
        Delay7_reg[14] <= 1'b0;
        Delay7_reg[15] <= 1'b0;
        Delay7_reg[16] <= 1'b0;
        Delay7_reg[17] <= 1'b0;
        Delay7_reg[18] <= 1'b0;
        Delay7_reg[19] <= 1'b0;
        Delay7_reg[20] <= 1'b0;
        Delay7_reg[21] <= 1'b0;
        Delay7_reg[22] <= 1'b0;
        Delay7_reg[23] <= 1'b0;
        Delay7_reg[24] <= 1'b0;
        Delay7_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= Delay7_reg_next[0];
          Delay7_reg[1] <= Delay7_reg_next[1];
          Delay7_reg[2] <= Delay7_reg_next[2];
          Delay7_reg[3] <= Delay7_reg_next[3];
          Delay7_reg[4] <= Delay7_reg_next[4];
          Delay7_reg[5] <= Delay7_reg_next[5];
          Delay7_reg[6] <= Delay7_reg_next[6];
          Delay7_reg[7] <= Delay7_reg_next[7];
          Delay7_reg[8] <= Delay7_reg_next[8];
          Delay7_reg[9] <= Delay7_reg_next[9];
          Delay7_reg[10] <= Delay7_reg_next[10];
          Delay7_reg[11] <= Delay7_reg_next[11];
          Delay7_reg[12] <= Delay7_reg_next[12];
          Delay7_reg[13] <= Delay7_reg_next[13];
          Delay7_reg[14] <= Delay7_reg_next[14];
          Delay7_reg[15] <= Delay7_reg_next[15];
          Delay7_reg[16] <= Delay7_reg_next[16];
          Delay7_reg[17] <= Delay7_reg_next[17];
          Delay7_reg[18] <= Delay7_reg_next[18];
          Delay7_reg[19] <= Delay7_reg_next[19];
          Delay7_reg[20] <= Delay7_reg_next[20];
          Delay7_reg[21] <= Delay7_reg_next[21];
          Delay7_reg[22] <= Delay7_reg_next[22];
          Delay7_reg[23] <= Delay7_reg_next[23];
          Delay7_reg[24] <= Delay7_reg_next[24];
          Delay7_reg[25] <= Delay7_reg_next[25];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[25];
  assign Delay7_reg_next[0] = Compare_To_Constant1_out1;
  assign Delay7_reg_next[1] = Delay7_reg[0];
  assign Delay7_reg_next[2] = Delay7_reg[1];
  assign Delay7_reg_next[3] = Delay7_reg[2];
  assign Delay7_reg_next[4] = Delay7_reg[3];
  assign Delay7_reg_next[5] = Delay7_reg[4];
  assign Delay7_reg_next[6] = Delay7_reg[5];
  assign Delay7_reg_next[7] = Delay7_reg[6];
  assign Delay7_reg_next[8] = Delay7_reg[7];
  assign Delay7_reg_next[9] = Delay7_reg[8];
  assign Delay7_reg_next[10] = Delay7_reg[9];
  assign Delay7_reg_next[11] = Delay7_reg[10];
  assign Delay7_reg_next[12] = Delay7_reg[11];
  assign Delay7_reg_next[13] = Delay7_reg[12];
  assign Delay7_reg_next[14] = Delay7_reg[13];
  assign Delay7_reg_next[15] = Delay7_reg[14];
  assign Delay7_reg_next[16] = Delay7_reg[15];
  assign Delay7_reg_next[17] = Delay7_reg[16];
  assign Delay7_reg_next[18] = Delay7_reg[17];
  assign Delay7_reg_next[19] = Delay7_reg[18];
  assign Delay7_reg_next[20] = Delay7_reg[19];
  assign Delay7_reg_next[21] = Delay7_reg[20];
  assign Delay7_reg_next[22] = Delay7_reg[21];
  assign Delay7_reg_next[23] = Delay7_reg[22];
  assign Delay7_reg_next[24] = Delay7_reg[23];
  assign Delay7_reg_next[25] = Delay7_reg[24];



  assign Constant6_out1 = 19'sb0000000000011110000;



  assign Constant6_out1_dtc = {Constant6_out1[18], {Constant6_out1, 4'b0000}};



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_reg[0] <= 1'b0;
        Delay13_reg[1] <= 1'b0;
        Delay13_reg[2] <= 1'b0;
        Delay13_reg[3] <= 1'b0;
        Delay13_reg[4] <= 1'b0;
        Delay13_reg[5] <= 1'b0;
        Delay13_reg[6] <= 1'b0;
        Delay13_reg[7] <= 1'b0;
        Delay13_reg[8] <= 1'b0;
        Delay13_reg[9] <= 1'b0;
        Delay13_reg[10] <= 1'b0;
        Delay13_reg[11] <= 1'b0;
        Delay13_reg[12] <= 1'b0;
        Delay13_reg[13] <= 1'b0;
        Delay13_reg[14] <= 1'b0;
        Delay13_reg[15] <= 1'b0;
        Delay13_reg[16] <= 1'b0;
        Delay13_reg[17] <= 1'b0;
        Delay13_reg[18] <= 1'b0;
        Delay13_reg[19] <= 1'b0;
        Delay13_reg[20] <= 1'b0;
        Delay13_reg[21] <= 1'b0;
        Delay13_reg[22] <= 1'b0;
        Delay13_reg[23] <= 1'b0;
        Delay13_reg[24] <= 1'b0;
        Delay13_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_reg[0] <= Delay13_reg_next[0];
          Delay13_reg[1] <= Delay13_reg_next[1];
          Delay13_reg[2] <= Delay13_reg_next[2];
          Delay13_reg[3] <= Delay13_reg_next[3];
          Delay13_reg[4] <= Delay13_reg_next[4];
          Delay13_reg[5] <= Delay13_reg_next[5];
          Delay13_reg[6] <= Delay13_reg_next[6];
          Delay13_reg[7] <= Delay13_reg_next[7];
          Delay13_reg[8] <= Delay13_reg_next[8];
          Delay13_reg[9] <= Delay13_reg_next[9];
          Delay13_reg[10] <= Delay13_reg_next[10];
          Delay13_reg[11] <= Delay13_reg_next[11];
          Delay13_reg[12] <= Delay13_reg_next[12];
          Delay13_reg[13] <= Delay13_reg_next[13];
          Delay13_reg[14] <= Delay13_reg_next[14];
          Delay13_reg[15] <= Delay13_reg_next[15];
          Delay13_reg[16] <= Delay13_reg_next[16];
          Delay13_reg[17] <= Delay13_reg_next[17];
          Delay13_reg[18] <= Delay13_reg_next[18];
          Delay13_reg[19] <= Delay13_reg_next[19];
          Delay13_reg[20] <= Delay13_reg_next[20];
          Delay13_reg[21] <= Delay13_reg_next[21];
          Delay13_reg[22] <= Delay13_reg_next[22];
          Delay13_reg[23] <= Delay13_reg_next[23];
          Delay13_reg[24] <= Delay13_reg_next[24];
          Delay13_reg[25] <= Delay13_reg_next[25];
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[25];
  assign Delay13_reg_next[0] = Compare_To_Constant_out1;
  assign Delay13_reg_next[1] = Delay13_reg[0];
  assign Delay13_reg_next[2] = Delay13_reg[1];
  assign Delay13_reg_next[3] = Delay13_reg[2];
  assign Delay13_reg_next[4] = Delay13_reg[3];
  assign Delay13_reg_next[5] = Delay13_reg[4];
  assign Delay13_reg_next[6] = Delay13_reg[5];
  assign Delay13_reg_next[7] = Delay13_reg[6];
  assign Delay13_reg_next[8] = Delay13_reg[7];
  assign Delay13_reg_next[9] = Delay13_reg[8];
  assign Delay13_reg_next[10] = Delay13_reg[9];
  assign Delay13_reg_next[11] = Delay13_reg[10];
  assign Delay13_reg_next[12] = Delay13_reg[11];
  assign Delay13_reg_next[13] = Delay13_reg[12];
  assign Delay13_reg_next[14] = Delay13_reg[13];
  assign Delay13_reg_next[15] = Delay13_reg[14];
  assign Delay13_reg_next[16] = Delay13_reg[15];
  assign Delay13_reg_next[17] = Delay13_reg[16];
  assign Delay13_reg_next[18] = Delay13_reg[17];
  assign Delay13_reg_next[19] = Delay13_reg[18];
  assign Delay13_reg_next[20] = Delay13_reg[19];
  assign Delay13_reg_next[21] = Delay13_reg[20];
  assign Delay13_reg_next[22] = Delay13_reg[21];
  assign Delay13_reg_next[23] = Delay13_reg[22];
  assign Delay13_reg_next[24] = Delay13_reg[23];
  assign Delay13_reg_next[25] = Delay13_reg[24];



  assign Constant3_out1 = 17'sb00000000000001000;



  assign Add6_add_cast = {Delay12_out1[18], {Delay12_out1, 4'b0000}};
  assign Add6_add_cast_1 = {{7{Constant3_out1[16]}}, Constant3_out1};
  assign Add6_out1 = Add6_add_cast + Add6_add_cast_1;



  assign Constant_out1 = 19'sb0000000000000000000;



  assign Constant_out1_dtc = {Constant_out1[18], {Constant_out1, 4'b0000}};



  assign Switch1_out1 = (Delay13_out1 == 1'b0 ? Add6_out1 :
              Constant_out1_dtc);



  assign Switch2_out1 = (Delay7_out1 == 1'b0 ? Constant6_out1_dtc :
              Switch1_out1);



  assign disparity = Switch2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_reg[0] <= 1'b0;
        Delay15_reg[1] <= 1'b0;
        Delay15_reg[2] <= 1'b0;
        Delay15_reg[3] <= 1'b0;
        Delay15_reg[4] <= 1'b0;
        Delay15_reg[5] <= 1'b0;
        Delay15_reg[6] <= 1'b0;
        Delay15_reg[7] <= 1'b0;
        Delay15_reg[8] <= 1'b0;
        Delay15_reg[9] <= 1'b0;
        Delay15_reg[10] <= 1'b0;
        Delay15_reg[11] <= 1'b0;
        Delay15_reg[12] <= 1'b0;
        Delay15_reg[13] <= 1'b0;
        Delay15_reg[14] <= 1'b0;
        Delay15_reg[15] <= 1'b0;
        Delay15_reg[16] <= 1'b0;
        Delay15_reg[17] <= 1'b0;
        Delay15_reg[18] <= 1'b0;
        Delay15_reg[19] <= 1'b0;
        Delay15_reg[20] <= 1'b0;
        Delay15_reg[21] <= 1'b0;
        Delay15_reg[22] <= 1'b0;
        Delay15_reg[23] <= 1'b0;
        Delay15_reg[24] <= 1'b0;
        Delay15_reg[25] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay15_reg[0] <= Delay15_reg_next[0];
          Delay15_reg[1] <= Delay15_reg_next[1];
          Delay15_reg[2] <= Delay15_reg_next[2];
          Delay15_reg[3] <= Delay15_reg_next[3];
          Delay15_reg[4] <= Delay15_reg_next[4];
          Delay15_reg[5] <= Delay15_reg_next[5];
          Delay15_reg[6] <= Delay15_reg_next[6];
          Delay15_reg[7] <= Delay15_reg_next[7];
          Delay15_reg[8] <= Delay15_reg_next[8];
          Delay15_reg[9] <= Delay15_reg_next[9];
          Delay15_reg[10] <= Delay15_reg_next[10];
          Delay15_reg[11] <= Delay15_reg_next[11];
          Delay15_reg[12] <= Delay15_reg_next[12];
          Delay15_reg[13] <= Delay15_reg_next[13];
          Delay15_reg[14] <= Delay15_reg_next[14];
          Delay15_reg[15] <= Delay15_reg_next[15];
          Delay15_reg[16] <= Delay15_reg_next[16];
          Delay15_reg[17] <= Delay15_reg_next[17];
          Delay15_reg[18] <= Delay15_reg_next[18];
          Delay15_reg[19] <= Delay15_reg_next[19];
          Delay15_reg[20] <= Delay15_reg_next[20];
          Delay15_reg[21] <= Delay15_reg_next[21];
          Delay15_reg[22] <= Delay15_reg_next[22];
          Delay15_reg[23] <= Delay15_reg_next[23];
          Delay15_reg[24] <= Delay15_reg_next[24];
          Delay15_reg[25] <= Delay15_reg_next[25];
        end
      end
    end

  assign Delay15_out1 = Delay15_reg[25];
  assign Delay15_reg_next[0] = Delay_out1;
  assign Delay15_reg_next[1] = Delay15_reg[0];
  assign Delay15_reg_next[2] = Delay15_reg[1];
  assign Delay15_reg_next[3] = Delay15_reg[2];
  assign Delay15_reg_next[4] = Delay15_reg[3];
  assign Delay15_reg_next[5] = Delay15_reg[4];
  assign Delay15_reg_next[6] = Delay15_reg[5];
  assign Delay15_reg_next[7] = Delay15_reg[6];
  assign Delay15_reg_next[8] = Delay15_reg[7];
  assign Delay15_reg_next[9] = Delay15_reg[8];
  assign Delay15_reg_next[10] = Delay15_reg[9];
  assign Delay15_reg_next[11] = Delay15_reg[10];
  assign Delay15_reg_next[12] = Delay15_reg[11];
  assign Delay15_reg_next[13] = Delay15_reg[12];
  assign Delay15_reg_next[14] = Delay15_reg[13];
  assign Delay15_reg_next[15] = Delay15_reg[14];
  assign Delay15_reg_next[16] = Delay15_reg[15];
  assign Delay15_reg_next[17] = Delay15_reg[16];
  assign Delay15_reg_next[18] = Delay15_reg[17];
  assign Delay15_reg_next[19] = Delay15_reg[18];
  assign Delay15_reg_next[20] = Delay15_reg[19];
  assign Delay15_reg_next[21] = Delay15_reg[20];
  assign Delay15_reg_next[22] = Delay15_reg[21];
  assign Delay15_reg_next[23] = Delay15_reg[22];
  assign Delay15_reg_next[24] = Delay15_reg[23];
  assign Delay15_reg_next[25] = Delay15_reg[24];



  assign validOut = Delay15_out1;

endmodule  // SGBMHDLAl_ip_src_Interpolation

