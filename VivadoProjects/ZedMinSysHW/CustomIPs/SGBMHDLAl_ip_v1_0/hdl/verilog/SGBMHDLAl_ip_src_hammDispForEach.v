// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_hammDispForEach.v
// Created: 2021-04-19 19:46:14
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_hammDispForEach
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/MatchingCost/HammDistA/hammDispForEach
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_hammDispForEach
          (clk,
           reset,
           enb,
           leftCSCTIn_0,
           leftCSCTIn_1,
           leftCSCTIn_2,
           leftCSCTIn_3,
           leftCSCTIn_4,
           leftCSCTIn_5,
           leftCSCTIn_6,
           leftCSCTIn_7,
           leftCSCTIn_8,
           leftCSCTIn_9,
           leftCSCTIn_10,
           leftCSCTIn_11,
           leftCSCTIn_12,
           leftCSCTIn_13,
           leftCSCTIn_14,
           leftCSCTIn_15,
           leftCSCTIn_16,
           leftCSCTIn_17,
           leftCSCTIn_18,
           leftCSCTIn_19,
           leftCSCTIn_20,
           leftCSCTIn_21,
           leftCSCTIn_22,
           leftCSCTIn_23,
           leftCSCTIn_24,
           leftCSCTIn_25,
           leftCSCTIn_26,
           leftCSCTIn_27,
           leftCSCTIn_28,
           leftCSCTIn_29,
           leftCSCTIn_30,
           rightCSCTIn,
           hammDist);


  input   clk;
  input   reset;
  input   enb;
  input   leftCSCTIn_0;  // boolean
  input   leftCSCTIn_1;  // boolean
  input   leftCSCTIn_2;  // boolean
  input   leftCSCTIn_3;  // boolean
  input   leftCSCTIn_4;  // boolean
  input   leftCSCTIn_5;  // boolean
  input   leftCSCTIn_6;  // boolean
  input   leftCSCTIn_7;  // boolean
  input   leftCSCTIn_8;  // boolean
  input   leftCSCTIn_9;  // boolean
  input   leftCSCTIn_10;  // boolean
  input   leftCSCTIn_11;  // boolean
  input   leftCSCTIn_12;  // boolean
  input   leftCSCTIn_13;  // boolean
  input   leftCSCTIn_14;  // boolean
  input   leftCSCTIn_15;  // boolean
  input   leftCSCTIn_16;  // boolean
  input   leftCSCTIn_17;  // boolean
  input   leftCSCTIn_18;  // boolean
  input   leftCSCTIn_19;  // boolean
  input   leftCSCTIn_20;  // boolean
  input   leftCSCTIn_21;  // boolean
  input   leftCSCTIn_22;  // boolean
  input   leftCSCTIn_23;  // boolean
  input   leftCSCTIn_24;  // boolean
  input   leftCSCTIn_25;  // boolean
  input   leftCSCTIn_26;  // boolean
  input   leftCSCTIn_27;  // boolean
  input   leftCSCTIn_28;  // boolean
  input   leftCSCTIn_29;  // boolean
  input   leftCSCTIn_30;  // boolean
  input   [30:0] rightCSCTIn;  // ufix31
  output  [4:0] hammDist;  // ufix5


  wire Int2Bin1_out1_0;
  wire Int2Bin1_out1_1;
  wire Int2Bin1_out1_2;
  wire Int2Bin1_out1_3;
  wire Int2Bin1_out1_4;
  wire Int2Bin1_out1_5;
  wire Int2Bin1_out1_6;
  wire Int2Bin1_out1_7;
  wire Int2Bin1_out1_8;
  wire Int2Bin1_out1_9;
  wire Int2Bin1_out1_10;
  wire Int2Bin1_out1_11;
  wire Int2Bin1_out1_12;
  wire Int2Bin1_out1_13;
  wire Int2Bin1_out1_14;
  wire Int2Bin1_out1_15;
  wire Int2Bin1_out1_16;
  wire Int2Bin1_out1_17;
  wire Int2Bin1_out1_18;
  wire Int2Bin1_out1_19;
  wire Int2Bin1_out1_20;
  wire Int2Bin1_out1_21;
  wire Int2Bin1_out1_22;
  wire Int2Bin1_out1_23;
  wire Int2Bin1_out1_24;
  wire Int2Bin1_out1_25;
  wire Int2Bin1_out1_26;
  wire Int2Bin1_out1_27;
  wire Int2Bin1_out1_28;
  wire Int2Bin1_out1_29;
  wire Int2Bin1_out1_30;
  wire Logical_Operator_out1;
  wire Logical_Operator1_out1;
  wire [1:0] Add_1;  // ufix2
  wire [1:0] Add_2;  // ufix2
  wire [1:0] Add_out1;  // ufix2
  reg [1:0] Delay_out1;  // ufix2
  wire Logical_Operator2_out1;
  wire Logical_Operator3_out1;
  wire [1:0] Add1_1;  // ufix2
  wire [1:0] Add1_2;  // ufix2
  wire [1:0] Add1_out1;  // ufix2
  reg [1:0] Delay1_out1;  // ufix2
  wire [2:0] Add15_1;  // ufix3
  wire [2:0] Add15_2;  // ufix3
  wire [2:0] Add15_out1;  // ufix3
  reg [2:0] Delay16_out1;  // ufix3
  wire Logical_Operator4_out1;
  wire Logical_Operator5_out1;
  wire [1:0] Add2_1;  // ufix2
  wire [1:0] Add2_2;  // ufix2
  wire [1:0] Add2_out1;  // ufix2
  reg [1:0] Delay2_out1;  // ufix2
  wire Logical_Operator6_out1;
  wire Logical_Operator7_out1;
  wire [1:0] Add3_1;  // ufix2
  wire [1:0] Add3_2;  // ufix2
  wire [1:0] Add3_out1;  // ufix2
  reg [1:0] Delay3_out1;  // ufix2
  wire [2:0] Add16_1;  // ufix3
  wire [2:0] Add16_2;  // ufix3
  wire [2:0] Add16_out1;  // ufix3
  reg [2:0] Delay17_out1;  // ufix3
  wire [3:0] Add23_1;  // ufix4
  wire [3:0] Add23_2;  // ufix4
  wire [3:0] Add23_out1;  // ufix4
  reg [3:0] Delay24_out1;  // ufix4
  wire Logical_Operator8_out1;
  wire Logical_Operator9_out1;
  wire [1:0] Add4_1;  // ufix2
  wire [1:0] Add4_2;  // ufix2
  wire [1:0] Add4_out1;  // ufix2
  reg [1:0] Delay4_out1;  // ufix2
  wire Logical_Operator10_out1;
  wire Logical_Operator11_out1;
  wire [1:0] Add5_1;  // ufix2
  wire [1:0] Add5_2;  // ufix2
  wire [1:0] Add5_out1;  // ufix2
  reg [1:0] Delay5_out1;  // ufix2
  wire [2:0] Add17_1;  // ufix3
  wire [2:0] Add17_2;  // ufix3
  wire [2:0] Add17_out1;  // ufix3
  reg [2:0] Delay18_out1;  // ufix3
  wire Logical_Operator12_out1;
  wire Logical_Operator13_out1;
  wire [1:0] Add6_1;  // ufix2
  wire [1:0] Add6_2;  // ufix2
  wire [1:0] Add6_out1;  // ufix2
  reg [1:0] Delay6_out1;  // ufix2
  wire Logical_Operator14_out1;
  wire Logical_Operator15_out1;
  wire [1:0] Add7_1;  // ufix2
  wire [1:0] Add7_2;  // ufix2
  wire [1:0] Add7_out1;  // ufix2
  reg [1:0] Delay7_out1;  // ufix2
  wire [2:0] Add18_1;  // ufix3
  wire [2:0] Add18_2;  // ufix3
  wire [2:0] Add18_out1;  // ufix3
  reg [2:0] Delay19_out1;  // ufix3
  wire [3:0] Add24_1;  // ufix4
  wire [3:0] Add24_2;  // ufix4
  wire [3:0] Add24_out1;  // ufix4
  reg [3:0] Delay25_out1;  // ufix4
  wire [4:0] Add27_1;  // ufix5
  wire [4:0] Add27_2;  // ufix5
  wire [4:0] Add27_out1;  // ufix5
  reg [4:0] Delay28_out1;  // ufix5
  wire Logical_Operator16_out1;
  wire Logical_Operator17_out1;
  wire [1:0] Add8_1;  // ufix2
  wire [1:0] Add8_2;  // ufix2
  wire [1:0] Add8_out1;  // ufix2
  reg [1:0] Delay8_out1;  // ufix2
  wire Logical_Operator18_out1;
  wire Logical_Operator19_out1;
  wire [1:0] Add9_1;  // ufix2
  wire [1:0] Add9_2;  // ufix2
  wire [1:0] Add9_out1;  // ufix2
  reg [1:0] Delay9_out1;  // ufix2
  wire [2:0] Add19_1;  // ufix3
  wire [2:0] Add19_2;  // ufix3
  wire [2:0] Add19_out1;  // ufix3
  reg [2:0] Delay20_out1;  // ufix3
  wire Logical_Operator20_out1;
  wire Logical_Operator21_out1;
  wire [1:0] Add10_1;  // ufix2
  wire [1:0] Add10_2;  // ufix2
  wire [1:0] Add10_out1;  // ufix2
  reg [1:0] Delay10_out1;  // ufix2
  wire Logical_Operator22_out1;
  wire Logical_Operator23_out1;
  wire [1:0] Add11_1;  // ufix2
  wire [1:0] Add11_2;  // ufix2
  wire [1:0] Add11_out1;  // ufix2
  reg [1:0] Delay11_out1;  // ufix2
  wire [2:0] Add20_1;  // ufix3
  wire [2:0] Add20_2;  // ufix3
  wire [2:0] Add20_out1;  // ufix3
  reg [2:0] Delay21_out1;  // ufix3
  wire [3:0] Add25_1;  // ufix4
  wire [3:0] Add25_2;  // ufix4
  wire [3:0] Add25_out1;  // ufix4
  reg [3:0] Delay26_out1;  // ufix4
  wire Logical_Operator24_out1;
  wire Logical_Operator25_out1;
  wire [1:0] Add12_1;  // ufix2
  wire [1:0] Add12_2;  // ufix2
  wire [1:0] Add12_out1;  // ufix2
  reg [1:0] Delay12_out1;  // ufix2
  wire Logical_Operator26_out1;
  wire Logical_Operator27_out1;
  wire [1:0] Add13_1;  // ufix2
  wire [1:0] Add13_2;  // ufix2
  wire [1:0] Add13_out1;  // ufix2
  reg [1:0] Delay13_out1;  // ufix2
  wire [2:0] Add21_1;  // ufix3
  wire [2:0] Add21_2;  // ufix3
  wire [2:0] Add21_out1;  // ufix3
  reg [2:0] Delay22_out1;  // ufix3
  wire Logical_Operator28_out1;
  wire Logical_Operator29_out1;
  wire [1:0] Add14_1;  // ufix2
  wire [1:0] Add14_2;  // ufix2
  wire [1:0] Add14_out1;  // ufix2
  reg [1:0] Delay14_out1;  // ufix2
  wire Logical_Operator30_out1;
  reg  Delay15_out1;
  wire [8:0] Add22_add_temp;  // ufix9
  wire [8:0] Add22_1;  // ufix9
  wire [8:0] Add22_2;  // ufix9
  wire [1:0] Add22_out1;  // ufix2
  reg [1:0] Delay23_out1;  // ufix2
  wire [2:0] Add26_1;  // ufix3
  wire [2:0] Add26_out1;  // ufix3
  reg [2:0] Delay27_out1;  // ufix3
  wire [3:0] Add28_1;  // ufix4
  wire [3:0] Add28_out1;  // ufix4
  reg [3:0] Delay29_out1;  // ufix4
  wire [4:0] Add29_1;  // ufix5
  wire [4:0] Add29_out1;  // ufix5
  reg [4:0] Delay30_out1;  // ufix5


  SGBMHDLAl_ip_src_Int2Bin1 u_Int2Bin1 (.In1(rightCSCTIn),  // ufix31
                                        .Out1_0(Int2Bin1_out1_0),  // boolean
                                        .Out1_1(Int2Bin1_out1_1),  // boolean
                                        .Out1_2(Int2Bin1_out1_2),  // boolean
                                        .Out1_3(Int2Bin1_out1_3),  // boolean
                                        .Out1_4(Int2Bin1_out1_4),  // boolean
                                        .Out1_5(Int2Bin1_out1_5),  // boolean
                                        .Out1_6(Int2Bin1_out1_6),  // boolean
                                        .Out1_7(Int2Bin1_out1_7),  // boolean
                                        .Out1_8(Int2Bin1_out1_8),  // boolean
                                        .Out1_9(Int2Bin1_out1_9),  // boolean
                                        .Out1_10(Int2Bin1_out1_10),  // boolean
                                        .Out1_11(Int2Bin1_out1_11),  // boolean
                                        .Out1_12(Int2Bin1_out1_12),  // boolean
                                        .Out1_13(Int2Bin1_out1_13),  // boolean
                                        .Out1_14(Int2Bin1_out1_14),  // boolean
                                        .Out1_15(Int2Bin1_out1_15),  // boolean
                                        .Out1_16(Int2Bin1_out1_16),  // boolean
                                        .Out1_17(Int2Bin1_out1_17),  // boolean
                                        .Out1_18(Int2Bin1_out1_18),  // boolean
                                        .Out1_19(Int2Bin1_out1_19),  // boolean
                                        .Out1_20(Int2Bin1_out1_20),  // boolean
                                        .Out1_21(Int2Bin1_out1_21),  // boolean
                                        .Out1_22(Int2Bin1_out1_22),  // boolean
                                        .Out1_23(Int2Bin1_out1_23),  // boolean
                                        .Out1_24(Int2Bin1_out1_24),  // boolean
                                        .Out1_25(Int2Bin1_out1_25),  // boolean
                                        .Out1_26(Int2Bin1_out1_26),  // boolean
                                        .Out1_27(Int2Bin1_out1_27),  // boolean
                                        .Out1_28(Int2Bin1_out1_28),  // boolean
                                        .Out1_29(Int2Bin1_out1_29),  // boolean
                                        .Out1_30(Int2Bin1_out1_30)  // boolean
                                        );

  assign Logical_Operator_out1 = leftCSCTIn_30 ^ Int2Bin1_out1_30;



  assign Logical_Operator1_out1 = leftCSCTIn_29 ^ Int2Bin1_out1_29;



  assign Add_1 = {1'b0, Logical_Operator_out1};
  assign Add_2 = {1'b0, Logical_Operator1_out1};
  assign Add_out1 = Add_1 + Add_2;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Add_out1;
        end
      end
    end



  assign Logical_Operator2_out1 = leftCSCTIn_28 ^ Int2Bin1_out1_28;



  assign Logical_Operator3_out1 = leftCSCTIn_27 ^ Int2Bin1_out1_27;



  assign Add1_1 = {1'b0, Logical_Operator2_out1};
  assign Add1_2 = {1'b0, Logical_Operator3_out1};
  assign Add1_out1 = Add1_1 + Add1_2;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Add1_out1;
        end
      end
    end



  assign Add15_1 = {1'b0, Delay_out1};
  assign Add15_2 = {1'b0, Delay1_out1};
  assign Add15_out1 = Add15_1 + Add15_2;



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= Add15_out1;
        end
      end
    end



  assign Logical_Operator4_out1 = leftCSCTIn_26 ^ Int2Bin1_out1_26;



  assign Logical_Operator5_out1 = leftCSCTIn_25 ^ Int2Bin1_out1_25;



  assign Add2_1 = {1'b0, Logical_Operator4_out1};
  assign Add2_2 = {1'b0, Logical_Operator5_out1};
  assign Add2_out1 = Add2_1 + Add2_2;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Add2_out1;
        end
      end
    end



  assign Logical_Operator6_out1 = leftCSCTIn_24 ^ Int2Bin1_out1_24;



  assign Logical_Operator7_out1 = leftCSCTIn_23 ^ Int2Bin1_out1_23;



  assign Add3_1 = {1'b0, Logical_Operator6_out1};
  assign Add3_2 = {1'b0, Logical_Operator7_out1};
  assign Add3_out1 = Add3_1 + Add3_2;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add3_out1;
        end
      end
    end



  assign Add16_1 = {1'b0, Delay2_out1};
  assign Add16_2 = {1'b0, Delay3_out1};
  assign Add16_out1 = Add16_1 + Add16_2;



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= Add16_out1;
        end
      end
    end



  assign Add23_1 = {1'b0, Delay16_out1};
  assign Add23_2 = {1'b0, Delay17_out1};
  assign Add23_out1 = Add23_1 + Add23_2;



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Add23_out1;
        end
      end
    end



  assign Logical_Operator8_out1 = leftCSCTIn_22 ^ Int2Bin1_out1_22;



  assign Logical_Operator9_out1 = leftCSCTIn_21 ^ Int2Bin1_out1_21;



  assign Add4_1 = {1'b0, Logical_Operator8_out1};
  assign Add4_2 = {1'b0, Logical_Operator9_out1};
  assign Add4_out1 = Add4_1 + Add4_2;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add4_out1;
        end
      end
    end



  assign Logical_Operator10_out1 = leftCSCTIn_20 ^ Int2Bin1_out1_20;



  assign Logical_Operator11_out1 = leftCSCTIn_19 ^ Int2Bin1_out1_19;



  assign Add5_1 = {1'b0, Logical_Operator10_out1};
  assign Add5_2 = {1'b0, Logical_Operator11_out1};
  assign Add5_out1 = Add5_1 + Add5_2;



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Add5_out1;
        end
      end
    end



  assign Add17_1 = {1'b0, Delay4_out1};
  assign Add17_2 = {1'b0, Delay5_out1};
  assign Add17_out1 = Add17_1 + Add17_2;



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= Add17_out1;
        end
      end
    end



  assign Logical_Operator12_out1 = leftCSCTIn_18 ^ Int2Bin1_out1_18;



  assign Logical_Operator13_out1 = leftCSCTIn_17 ^ Int2Bin1_out1_17;



  assign Add6_1 = {1'b0, Logical_Operator12_out1};
  assign Add6_2 = {1'b0, Logical_Operator13_out1};
  assign Add6_out1 = Add6_1 + Add6_2;



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Add6_out1;
        end
      end
    end



  assign Logical_Operator14_out1 = leftCSCTIn_16 ^ Int2Bin1_out1_16;



  assign Logical_Operator15_out1 = leftCSCTIn_15 ^ Int2Bin1_out1_15;



  assign Add7_1 = {1'b0, Logical_Operator14_out1};
  assign Add7_2 = {1'b0, Logical_Operator15_out1};
  assign Add7_out1 = Add7_1 + Add7_2;



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Add7_out1;
        end
      end
    end



  assign Add18_1 = {1'b0, Delay6_out1};
  assign Add18_2 = {1'b0, Delay7_out1};
  assign Add18_out1 = Add18_1 + Add18_2;



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= Add18_out1;
        end
      end
    end



  assign Add24_1 = {1'b0, Delay18_out1};
  assign Add24_2 = {1'b0, Delay19_out1};
  assign Add24_out1 = Add24_1 + Add24_2;



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Add24_out1;
        end
      end
    end



  assign Add27_1 = {1'b0, Delay24_out1};
  assign Add27_2 = {1'b0, Delay25_out1};
  assign Add27_out1 = Add27_1 + Add27_2;



  always @(posedge clk or posedge reset)
    begin : Delay28_process
      if (reset == 1'b1) begin
        Delay28_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay28_out1 <= Add27_out1;
        end
      end
    end



  assign Logical_Operator16_out1 = leftCSCTIn_14 ^ Int2Bin1_out1_14;



  assign Logical_Operator17_out1 = leftCSCTIn_13 ^ Int2Bin1_out1_13;



  assign Add8_1 = {1'b0, Logical_Operator16_out1};
  assign Add8_2 = {1'b0, Logical_Operator17_out1};
  assign Add8_out1 = Add8_1 + Add8_2;



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Add8_out1;
        end
      end
    end



  assign Logical_Operator18_out1 = leftCSCTIn_12 ^ Int2Bin1_out1_12;



  assign Logical_Operator19_out1 = leftCSCTIn_11 ^ Int2Bin1_out1_11;



  assign Add9_1 = {1'b0, Logical_Operator18_out1};
  assign Add9_2 = {1'b0, Logical_Operator19_out1};
  assign Add9_out1 = Add9_1 + Add9_2;



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Add9_out1;
        end
      end
    end



  assign Add19_1 = {1'b0, Delay8_out1};
  assign Add19_2 = {1'b0, Delay9_out1};
  assign Add19_out1 = Add19_1 + Add19_2;



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= Add19_out1;
        end
      end
    end



  assign Logical_Operator20_out1 = leftCSCTIn_10 ^ Int2Bin1_out1_10;



  assign Logical_Operator21_out1 = leftCSCTIn_9 ^ Int2Bin1_out1_9;



  assign Add10_1 = {1'b0, Logical_Operator20_out1};
  assign Add10_2 = {1'b0, Logical_Operator21_out1};
  assign Add10_out1 = Add10_1 + Add10_2;



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Add10_out1;
        end
      end
    end



  assign Logical_Operator22_out1 = leftCSCTIn_8 ^ Int2Bin1_out1_8;



  assign Logical_Operator23_out1 = leftCSCTIn_7 ^ Int2Bin1_out1_7;



  assign Add11_1 = {1'b0, Logical_Operator22_out1};
  assign Add11_2 = {1'b0, Logical_Operator23_out1};
  assign Add11_out1 = Add11_1 + Add11_2;



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Add11_out1;
        end
      end
    end



  assign Add20_1 = {1'b0, Delay10_out1};
  assign Add20_2 = {1'b0, Delay11_out1};
  assign Add20_out1 = Add20_1 + Add20_2;



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Add20_out1;
        end
      end
    end



  assign Add25_1 = {1'b0, Delay20_out1};
  assign Add25_2 = {1'b0, Delay21_out1};
  assign Add25_out1 = Add25_1 + Add25_2;



  always @(posedge clk or posedge reset)
    begin : Delay26_process
      if (reset == 1'b1) begin
        Delay26_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay26_out1 <= Add25_out1;
        end
      end
    end



  assign Logical_Operator24_out1 = leftCSCTIn_6 ^ Int2Bin1_out1_6;



  assign Logical_Operator25_out1 = leftCSCTIn_5 ^ Int2Bin1_out1_5;



  assign Add12_1 = {1'b0, Logical_Operator24_out1};
  assign Add12_2 = {1'b0, Logical_Operator25_out1};
  assign Add12_out1 = Add12_1 + Add12_2;



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Add12_out1;
        end
      end
    end



  assign Logical_Operator26_out1 = leftCSCTIn_4 ^ Int2Bin1_out1_4;



  assign Logical_Operator27_out1 = leftCSCTIn_3 ^ Int2Bin1_out1_3;



  assign Add13_1 = {1'b0, Logical_Operator26_out1};
  assign Add13_2 = {1'b0, Logical_Operator27_out1};
  assign Add13_out1 = Add13_1 + Add13_2;



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= Add13_out1;
        end
      end
    end



  assign Add21_1 = {1'b0, Delay12_out1};
  assign Add21_2 = {1'b0, Delay13_out1};
  assign Add21_out1 = Add21_1 + Add21_2;



  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Add21_out1;
        end
      end
    end



  assign Logical_Operator28_out1 = leftCSCTIn_2 ^ Int2Bin1_out1_2;



  assign Logical_Operator29_out1 = leftCSCTIn_1 ^ Int2Bin1_out1_1;



  assign Add14_1 = {1'b0, Logical_Operator28_out1};
  assign Add14_2 = {1'b0, Logical_Operator29_out1};
  assign Add14_out1 = Add14_1 + Add14_2;



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Add14_out1;
        end
      end
    end



  assign Logical_Operator30_out1 = leftCSCTIn_0 ^ Int2Bin1_out1_0;



  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= Logical_Operator30_out1;
        end
      end
    end



  assign Add22_1 = {7'b0, Delay14_out1};
  assign Add22_2 = {8'b0, Delay15_out1};
  assign Add22_add_temp = Add22_1 + Add22_2;
  assign Add22_out1 = Add22_add_temp[1:0];



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Add22_out1;
        end
      end
    end



  assign Add26_1 = {1'b0, Delay23_out1};
  assign Add26_out1 = Delay22_out1 + Add26_1;



  always @(posedge clk or posedge reset)
    begin : Delay27_process
      if (reset == 1'b1) begin
        Delay27_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay27_out1 <= Add26_out1;
        end
      end
    end



  assign Add28_1 = {1'b0, Delay27_out1};
  assign Add28_out1 = Delay26_out1 + Add28_1;



  always @(posedge clk or posedge reset)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay29_out1 <= Add28_out1;
        end
      end
    end



  assign Add29_1 = {1'b0, Delay29_out1};
  assign Add29_out1 = Delay28_out1 + Add29_1;



  always @(posedge clk or posedge reset)
    begin : Delay30_process
      if (reset == 1'b1) begin
        Delay30_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay30_out1 <= Add29_out1;
        end
      end
    end



  assign hammDist = Delay30_out1;

endmodule  // SGBMHDLAl_ip_src_hammDispForEach

