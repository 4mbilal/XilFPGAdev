// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_validLogic_block.v
// Created: 2021-04-19 19:46:14
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_validLogic_block
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/MatchingCost/CensusTransform1/validLogic
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_validLogic_block
          (clk,
           reset,
           enb,
           validIn,
           reset_1,
           busOut_hEnd,
           busOut_vStart,
           busOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   validIn;
  input   reset_1;
  output  busOut_hEnd;
  output  busOut_vStart;
  output  busOut_valid;


  reg [9:0] HDL_Counter_out1;  // ufix10
  wire CC_out1;
  wire LO_out1;
  reg [8:0] HDL_Counter1_out1;  // ufix9
  wire CC3_out1;
  wire CC4_out1;
  wire CC1_out1;
  wire CC2_out1;
  wire LO1_out1;
  wire pixelBusGenerator_out1_hEnd;
  wire pixelBusGenerator_out1_vStart;
  wire pixelBusGenerator_out1_valid;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 647
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            HDL_Counter_out1 <= 10'b0000000000;
          end
          else if (validIn == 1'b1) begin
            if (HDL_Counter_out1 >= 10'b1010000111) begin
              HDL_Counter_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter_out1 <= HDL_Counter_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign CC_out1 = HDL_Counter_out1 == 10'b1010000111;



  assign LO_out1 = CC_out1 & validIn;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 485
  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          if (reset_1 == 1'b1) begin
            HDL_Counter1_out1 <= 9'b000000000;
          end
          else if (LO_out1 == 1'b1) begin
            if (HDL_Counter1_out1 >= 9'b111100101) begin
              HDL_Counter1_out1 <= 9'b000000000;
            end
            else begin
              HDL_Counter1_out1 <= HDL_Counter1_out1 + 9'b000000001;
            end
          end
        end
      end
    end



  assign CC3_out1 = HDL_Counter1_out1 > 9'b000000101;



  assign CC4_out1 = HDL_Counter1_out1 <= 9'b111100101;



  assign CC1_out1 = HDL_Counter_out1 > 10'b0000000111;



  assign CC2_out1 = HDL_Counter_out1 <= 10'b1010000111;



  assign LO1_out1 = validIn & (CC2_out1 & (CC1_out1 & (CC3_out1 & CC4_out1)));



  SGBMHDLAl_ip_src_pixelBusGenerator_block4 u_pixelBusGenerator (.clk(clk),
                                                                 .reset(reset),
                                                                 .enb(enb),
                                                                 .validIn(LO1_out1),
                                                                 .busOut_hEnd(pixelBusGenerator_out1_hEnd),
                                                                 .busOut_vStart(pixelBusGenerator_out1_vStart),
                                                                 .busOut_valid(pixelBusGenerator_out1_valid)
                                                                 );

  assign busOut_hEnd = pixelBusGenerator_out1_hEnd;

  assign busOut_vStart = pixelBusGenerator_out1_vStart;

  assign busOut_valid = pixelBusGenerator_out1_valid;

endmodule  // SGBMHDLAl_ip_src_validLogic_block

