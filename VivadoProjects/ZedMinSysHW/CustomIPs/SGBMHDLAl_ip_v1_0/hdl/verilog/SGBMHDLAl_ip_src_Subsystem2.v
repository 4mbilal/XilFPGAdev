// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_Subsystem2.v
// Created: 2021-04-19 19:46:15
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_Subsystem2
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/PostProcessing/Interpolation/Division/QuoRem/Subsystem2
// Hierarchy Level: 6
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_Subsystem2
          (In1,
           In2,
           In3,
           Out1,
           Out2,
           Start);


  input   [25:0] In1;  // ufix26
  input   [12:0] In2;  // ufix13
  input   In3;  // ufix1
  output  [25:0] Out1;  // ufix26
  output  [12:0] Out2;  // ufix13
  output  Start;


  wire [25:0] Bit_Shift_out1;  // ufix26
  wire [12:0] Extract_Bits4_out1;  // ufix13
  wire Extract_Bits5_out1;  // ufix1
  wire Logical_Operator_out1;
  wire Extract_Bits1_out1;  // ufix1
  wire [12:0] Extract_Bits3_out1;  // ufix13
  wire signed [13:0] Add1_sub_temp;  // sfix14
  wire signed [13:0] Add1_1;  // sfix14
  wire signed [13:0] Add1_2;  // sfix14
  wire [12:0] Add1_out1;  // ufix13
  wire [12:0] Add_out1;  // ufix13
  wire [12:0] Switch_out1;  // ufix13
  wire Extract_Bits2_out1;  // ufix1
  wire [12:0] bitMask_for_Bitwise_Operator2;  // ufix13
  wire [12:0] Bitwise_Operator2_out1;  // ufix13
  wire [12:0] bitMask_for_Bitwise_Operator;  // ufix13
  wire [12:0] Bitwise_Operator_out1;  // ufix13
  wire [12:0] Switch1_out1;  // ufix13
  wire [25:0] Bit_Concat2_out1;  // ufix26
  wire [25:0] Switch2_out1;  // ufix26


  assign Bit_Shift_out1 = In1 <<< 8'd1;



  assign Extract_Bits4_out1 = Bit_Shift_out1[12:0];



  assign Extract_Bits5_out1 = Extract_Bits4_out1[12];



  assign Logical_Operator_out1 = Extract_Bits5_out1 | In3;



  assign Extract_Bits1_out1 = In1[25];



  assign Extract_Bits3_out1 = Bit_Shift_out1[25:13];



  assign Add1_1 = {1'b0, Extract_Bits3_out1};
  assign Add1_2 = {1'b0, In2};
  assign Add1_sub_temp = Add1_1 - Add1_2;
  assign Add1_out1 = Add1_sub_temp[12:0];



  assign Add_out1 = Extract_Bits3_out1 + In2;



  assign Switch_out1 = (Extract_Bits1_out1 == 1'b0 ? Add1_out1 :
              Add_out1);



  assign Extract_Bits2_out1 = Switch_out1[12];



  assign bitMask_for_Bitwise_Operator2 = 13'b0000000000001;



  assign Bitwise_Operator2_out1 = Extract_Bits4_out1 | bitMask_for_Bitwise_Operator2;



  assign bitMask_for_Bitwise_Operator = 13'b0000000000000;



  assign Bitwise_Operator_out1 = Extract_Bits4_out1 | bitMask_for_Bitwise_Operator;



  assign Switch1_out1 = (Extract_Bits2_out1 == 1'b0 ? Bitwise_Operator2_out1 :
              Bitwise_Operator_out1);



  assign Bit_Concat2_out1 = {Switch_out1, Switch1_out1};



  assign Switch2_out1 = (Logical_Operator_out1 == 1'b0 ? Bit_Shift_out1 :
              Bit_Concat2_out1);



  assign Out1 = Switch2_out1;

  assign Out2 = In2;

  assign Start = Logical_Operator_out1;

endmodule  // SGBMHDLAl_ip_src_Subsystem2

