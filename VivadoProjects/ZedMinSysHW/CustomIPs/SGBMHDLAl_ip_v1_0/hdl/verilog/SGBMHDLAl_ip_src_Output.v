// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_Output.v
// Created: 2021-04-19 19:46:09
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_Output
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/Output
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_Output
          (clk,
           reset,
           enb,
           pixelIn,
           busIn_valid,
           frameOut,
           validOut_hStart,
           validOut_hEnd,
           validOut_vStart,
           validOut_vEnd,
           validOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   signed [13:0] pixelIn;  // sfix14_En5
  input   busIn_valid;
  output  [7:0] frameOut;  // uint8
  output  validOut_hStart;
  output  validOut_hEnd;
  output  validOut_vStart;
  output  validOut_vEnd;
  output  validOut_valid;


  wire valid;
  wire signed [13:0] Constant2_out1;  // sfix14_En5
  wire signed [13:0] Switch1_out1;  // sfix14_En5
  wire signed [27:0] Gain_out1;  // sfix28_En14
  wire [7:0] Data_Type_Conversion_out1;  // uint8
  reg [9:0] HDL_Counter_out1;  // ufix10
  wire Compare_To_Constant1_out1;
  wire Logical_Operator1_out1;
  wire Compare_To_Constant_out1;
  wire Logical_Operator_out1;
  wire Logical_Operator2_out1;
  wire Constant_out1;
  wire Constant1_out1;
  wire Switch_out1;
  wire pixelBusGenerator_out1_hStart;
  wire pixelBusGenerator_out1_hEnd;
  wire pixelBusGenerator_out1_vStart;
  wire pixelBusGenerator_out1_vEnd;
  wire pixelBusGenerator_out1_valid;


  assign valid = busIn_valid;

  assign Constant2_out1 = 14'sb00000000000000;



  assign Switch1_out1 = (valid == 1'b0 ? Constant2_out1 :
              pixelIn);



  assign Gain_out1 = {{2{Switch1_out1[13]}}, {Switch1_out1, 12'b000000000000}};



  assign Data_Type_Conversion_out1 = Gain_out1[21:14];



  assign frameOut = Data_Type_Conversion_out1;

  assign Compare_To_Constant1_out1 = HDL_Counter_out1 <= 10'b0000001111;



  assign Logical_Operator1_out1 = valid | Compare_To_Constant1_out1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 639
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (Logical_Operator1_out1 == 1'b1) begin
            if (HDL_Counter_out1 >= 10'b1001111111) begin
              HDL_Counter_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter_out1 <= HDL_Counter_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign Compare_To_Constant_out1 = HDL_Counter_out1 <= 10'b1001111111;



  assign Logical_Operator_out1 = valid & Compare_To_Constant_out1;



  assign Logical_Operator2_out1 = Logical_Operator_out1 | Compare_To_Constant1_out1;



  assign Constant_out1 = 1'b0;



  assign Constant1_out1 = 1'b1;



  assign Switch_out1 = (Logical_Operator2_out1 == 1'b0 ? Constant_out1 :
              Constant1_out1);



  SGBMHDLAl_ip_src_pixelBusGenerator u_pixelBusGenerator (.clk(clk),
                                                          .reset(reset),
                                                          .enb(enb),
                                                          .validIn(Switch_out1),
                                                          .busOut_hStart(pixelBusGenerator_out1_hStart),
                                                          .busOut_hEnd(pixelBusGenerator_out1_hEnd),
                                                          .busOut_vStart(pixelBusGenerator_out1_vStart),
                                                          .busOut_vEnd(pixelBusGenerator_out1_vEnd),
                                                          .busOut_valid(pixelBusGenerator_out1_valid)
                                                          );

  assign validOut_hStart = pixelBusGenerator_out1_hStart;

  assign validOut_hEnd = pixelBusGenerator_out1_hEnd;

  assign validOut_vStart = pixelBusGenerator_out1_vStart;

  assign validOut_vEnd = pixelBusGenerator_out1_vEnd;

  assign validOut_valid = pixelBusGenerator_out1_valid;

endmodule  // SGBMHDLAl_ip_src_Output

