// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_Rem2Bin.v
// Created: 2021-04-19 19:46:15
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_Rem2Bin
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/PostProcessing/Interpolation/Division/Rem2Bin
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_Rem2Bin
          (clk,
           reset,
           enb,
           Quo,
           Div,
           Rem,
           val);


  input   clk;
  input   reset;
  input   enb;
  input   [12:0] Quo;  // ufix13
  input   [12:0] Div;  // ufix13
  input   [12:0] Rem;  // ufix13
  output  [16:0] val;  // ufix17_En4


  reg [12:0] Delay17_reg [0:3];  // ufix13 [4]
  wire [12:0] Delay17_reg_next [0:3];  // ufix13 [4]
  wire [12:0] Delay17_out1;  // ufix13
  wire [12:0] Shift_Arithmetic_out1;  // ufix13
  wire Relational_Operator_relop1;
  wire signed [13:0] Add_1;  // sfix14
  wire signed [13:0] Add_2;  // sfix14
  wire signed [13:0] Add_out1;  // sfix14
  wire signed [13:0] Shift_Arithmetic_out1_dtc;  // sfix14
  wire signed [13:0] Switch_out1;  // sfix14
  reg signed [13:0] Delay1_out1;  // sfix14
  wire signed [13:0] Shift_Arithmetic1_out1;  // sfix14
  reg [12:0] Delay2_out1;  // ufix13
  wire signed [13:0] Relational_Operator1_1_1;  // sfix14
  wire Relational_Operator1_relop1;
  wire signed [14:0] Add1_1;  // sfix15
  wire signed [14:0] Add1_2;  // sfix15
  wire signed [14:0] Add1_out1;  // sfix15
  wire signed [14:0] Shift_Arithmetic1_out1_dtc;  // sfix15
  wire signed [14:0] Switch1_out1;  // sfix15
  reg signed [14:0] Delay3_out1;  // sfix15
  wire signed [14:0] Shift_Arithmetic2_out1;  // sfix15
  reg [12:0] Delay4_out1;  // ufix13
  wire signed [14:0] Relational_Operator2_1_1;  // sfix15
  wire Relational_Operator2_relop1;
  wire signed [15:0] Add2_1;  // sfix16
  wire signed [15:0] Add2_2;  // sfix16
  wire signed [15:0] Add2_out1;  // int16
  wire signed [15:0] Shift_Arithmetic2_out1_dtc;  // int16
  wire signed [15:0] Switch2_out1;  // int16
  reg signed [15:0] Delay5_out1;  // int16
  wire signed [15:0] Shift_Arithmetic3_out1;  // int16
  reg [12:0] Delay6_out1;  // ufix13
  wire signed [15:0] Relational_Operator3_1_1;  // sfix16
  wire Relational_Operator3_relop1;
  wire [3:0] Constant7_out1;  // ufix4
  wire [3:0] bitMask_for_Bitwise_Operator;  // ufix4
  wire [3:0] Bitwise_Operator_out1;  // ufix4
  wire [3:0] Constant9_out1;  // ufix4
  wire [3:0] Switch4_out1;  // ufix4
  reg [3:0] Delay7_out1;  // ufix4
  wire [3:0] bitMask_for_Bitwise_Operator1;  // ufix4
  wire [3:0] Bitwise_Operator1_out1;  // ufix4
  wire [3:0] Switch5_out1;  // ufix4
  reg [3:0] Delay8_out1;  // ufix4
  wire [3:0] bitMask_for_Bitwise_Operator2;  // ufix4
  wire [3:0] Bitwise_Operator2_out1;  // ufix4
  wire [3:0] Switch6_out1;  // ufix4
  reg [3:0] Delay9_out1;  // ufix4
  wire [3:0] bitMask_for_Bitwise_Operator3;  // ufix4
  wire [3:0] Bitwise_Operator3_out1;  // ufix4
  wire [3:0] Switch7_out1;  // ufix4
  reg [3:0] Delay10_out1;  // ufix4
  wire [16:0] Bit_Concat1_out1;  // ufix17
  reg [16:0] Delay19_out1;  // ufix17
  wire [16:0] Shift_Arithmetic4_out1;  // ufix17_En4
  reg [16:0] Delay21_out1;  // ufix17_En4


  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_reg[0] <= 13'b0000000000000;
        Delay17_reg[1] <= 13'b0000000000000;
        Delay17_reg[2] <= 13'b0000000000000;
        Delay17_reg[3] <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay17_reg[0] <= Delay17_reg_next[0];
          Delay17_reg[1] <= Delay17_reg_next[1];
          Delay17_reg[2] <= Delay17_reg_next[2];
          Delay17_reg[3] <= Delay17_reg_next[3];
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[3];
  assign Delay17_reg_next[0] = Quo;
  assign Delay17_reg_next[1] = Delay17_reg[0];
  assign Delay17_reg_next[2] = Delay17_reg[1];
  assign Delay17_reg_next[3] = Delay17_reg[2];



  assign Shift_Arithmetic_out1 = Rem <<< 8'd1;



  assign Relational_Operator_relop1 = Shift_Arithmetic_out1 <= Div;



  assign Add_1 = {1'b0, Shift_Arithmetic_out1};
  assign Add_2 = {1'b0, Div};
  assign Add_out1 = Add_1 - Add_2;



  assign Shift_Arithmetic_out1_dtc = {1'b0, Shift_Arithmetic_out1};



  assign Switch_out1 = (Relational_Operator_relop1 == 1'b0 ? Add_out1 :
              Shift_Arithmetic_out1_dtc);



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Switch_out1;
        end
      end
    end



  assign Shift_Arithmetic1_out1 = Delay1_out1 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Div;
        end
      end
    end



  assign Relational_Operator1_1_1 = {1'b0, Delay2_out1};
  assign Relational_Operator1_relop1 = Shift_Arithmetic1_out1 <= Relational_Operator1_1_1;



  assign Add1_1 = {Shift_Arithmetic1_out1[13], Shift_Arithmetic1_out1};
  assign Add1_2 = {2'b0, Delay2_out1};
  assign Add1_out1 = Add1_1 - Add1_2;



  assign Shift_Arithmetic1_out1_dtc = {Shift_Arithmetic1_out1[13], Shift_Arithmetic1_out1};



  assign Switch1_out1 = (Relational_Operator1_relop1 == 1'b0 ? Add1_out1 :
              Shift_Arithmetic1_out1_dtc);



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Switch1_out1;
        end
      end
    end



  assign Shift_Arithmetic2_out1 = Delay3_out1 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay2_out1;
        end
      end
    end



  assign Relational_Operator2_1_1 = {2'b0, Delay4_out1};
  assign Relational_Operator2_relop1 = Shift_Arithmetic2_out1 <= Relational_Operator2_1_1;



  assign Add2_1 = {Shift_Arithmetic2_out1[14], Shift_Arithmetic2_out1};
  assign Add2_2 = {3'b0, Delay4_out1};
  assign Add2_out1 = Add2_1 - Add2_2;



  assign Shift_Arithmetic2_out1_dtc = {Shift_Arithmetic2_out1[14], Shift_Arithmetic2_out1};



  assign Switch2_out1 = (Relational_Operator2_relop1 == 1'b0 ? Add2_out1 :
              Shift_Arithmetic2_out1_dtc);



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Switch2_out1;
        end
      end
    end



  assign Shift_Arithmetic3_out1 = Delay5_out1 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Delay4_out1;
        end
      end
    end



  assign Relational_Operator3_1_1 = {3'b0, Delay6_out1};
  assign Relational_Operator3_relop1 = Shift_Arithmetic3_out1 <= Relational_Operator3_1_1;



  assign Constant7_out1 = 4'b0000;



  assign bitMask_for_Bitwise_Operator = 4'b1000;



  assign Bitwise_Operator_out1 = Constant7_out1 | bitMask_for_Bitwise_Operator;



  assign Constant9_out1 = 4'b0000;



  assign Switch4_out1 = (Relational_Operator_relop1 == 1'b0 ? Bitwise_Operator_out1 :
              Constant9_out1);



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Switch4_out1;
        end
      end
    end



  assign bitMask_for_Bitwise_Operator1 = 4'b0100;



  assign Bitwise_Operator1_out1 = Delay7_out1 | bitMask_for_Bitwise_Operator1;



  assign Switch5_out1 = (Relational_Operator1_relop1 == 1'b0 ? Bitwise_Operator1_out1 :
              Delay7_out1);



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Switch5_out1;
        end
      end
    end



  assign bitMask_for_Bitwise_Operator2 = 4'b0010;



  assign Bitwise_Operator2_out1 = Delay8_out1 | bitMask_for_Bitwise_Operator2;



  assign Switch6_out1 = (Relational_Operator2_relop1 == 1'b0 ? Bitwise_Operator2_out1 :
              Delay8_out1);



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Switch6_out1;
        end
      end
    end



  assign bitMask_for_Bitwise_Operator3 = 4'b0001;



  assign Bitwise_Operator3_out1 = Delay9_out1 | bitMask_for_Bitwise_Operator3;



  assign Switch7_out1 = (Relational_Operator3_relop1 == 1'b0 ? Bitwise_Operator3_out1 :
              Delay9_out1);



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Switch7_out1;
        end
      end
    end



  assign Bit_Concat1_out1 = {Delay17_out1, Delay10_out1};



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= Bit_Concat1_out1;
        end
      end
    end



  assign Shift_Arithmetic4_out1 = Delay19_out1;



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Shift_Arithmetic4_out1;
        end
      end
    end



  assign val = Delay21_out1;

endmodule  // SGBMHDLAl_ip_src_Rem2Bin

