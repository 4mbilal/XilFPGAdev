// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_PostProcessing.v
// Created: 2021-04-19 19:46:15
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_PostProcessing
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/PostProcessing
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_PostProcessing
          (clk,
           reset,
           enb,
           totalCostIn_0,
           totalCostIn_1,
           totalCostIn_2,
           totalCostIn_3,
           totalCostIn_4,
           totalCostIn_5,
           totalCostIn_6,
           totalCostIn_7,
           totalCostIn_8,
           totalCostIn_9,
           totalCostIn_10,
           totalCostIn_11,
           totalCostIn_12,
           totalCostIn_13,
           totalCostIn_14,
           totalCostIn_15,
           validIn,
           disparityOut,
           busOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   signed [12:0] totalCostIn_0;  // sfix13
  input   signed [12:0] totalCostIn_1;  // sfix13
  input   signed [12:0] totalCostIn_2;  // sfix13
  input   signed [12:0] totalCostIn_3;  // sfix13
  input   signed [12:0] totalCostIn_4;  // sfix13
  input   signed [12:0] totalCostIn_5;  // sfix13
  input   signed [12:0] totalCostIn_6;  // sfix13
  input   signed [12:0] totalCostIn_7;  // sfix13
  input   signed [12:0] totalCostIn_8;  // sfix13
  input   signed [12:0] totalCostIn_9;  // sfix13
  input   signed [12:0] totalCostIn_10;  // sfix13
  input   signed [12:0] totalCostIn_11;  // sfix13
  input   signed [12:0] totalCostIn_12;  // sfix13
  input   signed [12:0] totalCostIn_13;  // sfix13
  input   signed [12:0] totalCostIn_14;  // sfix13
  input   signed [12:0] totalCostIn_15;  // sfix13
  input   validIn;
  output  signed [13:0] disparityOut;  // sfix14_En5
  output  busOut_valid;


  wire signed [12:0] Delay_out_1;  // sfix13
  reg signed [12:0] Delay_1_reg [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_out_2;  // sfix13
  wire signed [12:0] Delay_out_3;  // sfix13
  wire signed [12:0] Delay_out_4;  // sfix13
  wire signed [12:0] Delay_out_5;  // sfix13
  wire signed [12:0] Delay_out_6;  // sfix13
  wire signed [12:0] Delay_out_7;  // sfix13
  wire signed [12:0] Delay_out_8;  // sfix13
  wire signed [12:0] Delay_out_9;  // sfix13
  wire signed [12:0] Delay_out_10;  // sfix13
  wire signed [12:0] Delay_out_11;  // sfix13
  wire signed [12:0] Delay_out_12;  // sfix13
  wire signed [12:0] Delay_out_13;  // sfix13
  wire signed [12:0] Delay_out_14;  // sfix13
  wire signed [12:0] Delay_out_15;  // sfix13
  wire signed [12:0] Delay_out_16;  // sfix13
  reg signed [12:0] Delay_1_reg_1 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_2 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_3 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_4 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_5 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_6 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_7 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_8 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_9 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_10 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_11 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_12 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_13 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_14 [0:6];  // sfix13 [7]
  reg signed [12:0] Delay_1_reg_15 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_1 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_2 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_3 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_4 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_5 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_6 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_7 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_8 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_9 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_10 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_11 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_12 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_13 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_14 [0:6];  // sfix13 [7]
  wire signed [12:0] Delay_1_reg_next_15 [0:6];  // sfix13 [7]
  wire signed [12:0] Interpolation_out1;  // sfix13
  wire [7:0] Interpolation_out2;  // uint8
  wire Interpolation_out3;
  wire signed [23:0] Interpolation_out4;  // sfix24_En8
  wire Interpolation_out5;
  wire UniquenessFcn_out1;
  wire UniquenessFcn_out2;
  reg  [0:21] Delay2_reg;  // ufix1 [22]
  wire [0:21] Delay2_reg_next;  // ufix1 [22]
  wire Delay2_out1;
  wire signed [13:0] Data_Type_Conversion_out1;  // sfix14_En5
  reg signed [13:0] Delay14_out1;  // sfix14_En5
  wire signed [13:0] Constant_out1;  // sfix14_En5
  wire signed [13:0] Switch_out1;  // sfix14_En5
  reg signed [13:0] Delay3_out1;  // sfix14_En5
  wire [7:0] Constant1_out1;  // uint8
  wire signed [13:0] Relational_Operator_1_cast;  // sfix14_En5
  wire Relational_Operator_relop1;
  wire signed [13:0] Constant2_out1;  // sfix14_En5
  wire signed [13:0] Switch1_out1;  // sfix14_En5
  reg signed [13:0] Delay6_out1;  // sfix14_En5
  reg  [0:21] Delay1_reg;  // ufix1 [22]
  wire [0:21] Delay1_reg_next;  // ufix1 [22]
  wire Delay1_out1;
  reg  Delay7_out1;
  wire Logical_Operator1_out1;
  reg  Delay4_out1;
  reg  Delay5_out1;
  wire pixelBusGenerator_out1_valid;


  always @(posedge clk or posedge reset)
    begin : Delay_1_process
      if (reset == 1'b1) begin
        Delay_1_reg[0] <= 13'sb0000000000000;
        Delay_1_reg[1] <= 13'sb0000000000000;
        Delay_1_reg[2] <= 13'sb0000000000000;
        Delay_1_reg[3] <= 13'sb0000000000000;
        Delay_1_reg[4] <= 13'sb0000000000000;
        Delay_1_reg[5] <= 13'sb0000000000000;
        Delay_1_reg[6] <= 13'sb0000000000000;
        Delay_1_reg_1[0] <= 13'sb0000000000000;
        Delay_1_reg_1[1] <= 13'sb0000000000000;
        Delay_1_reg_1[2] <= 13'sb0000000000000;
        Delay_1_reg_1[3] <= 13'sb0000000000000;
        Delay_1_reg_1[4] <= 13'sb0000000000000;
        Delay_1_reg_1[5] <= 13'sb0000000000000;
        Delay_1_reg_1[6] <= 13'sb0000000000000;
        Delay_1_reg_2[0] <= 13'sb0000000000000;
        Delay_1_reg_2[1] <= 13'sb0000000000000;
        Delay_1_reg_2[2] <= 13'sb0000000000000;
        Delay_1_reg_2[3] <= 13'sb0000000000000;
        Delay_1_reg_2[4] <= 13'sb0000000000000;
        Delay_1_reg_2[5] <= 13'sb0000000000000;
        Delay_1_reg_2[6] <= 13'sb0000000000000;
        Delay_1_reg_3[0] <= 13'sb0000000000000;
        Delay_1_reg_3[1] <= 13'sb0000000000000;
        Delay_1_reg_3[2] <= 13'sb0000000000000;
        Delay_1_reg_3[3] <= 13'sb0000000000000;
        Delay_1_reg_3[4] <= 13'sb0000000000000;
        Delay_1_reg_3[5] <= 13'sb0000000000000;
        Delay_1_reg_3[6] <= 13'sb0000000000000;
        Delay_1_reg_4[0] <= 13'sb0000000000000;
        Delay_1_reg_4[1] <= 13'sb0000000000000;
        Delay_1_reg_4[2] <= 13'sb0000000000000;
        Delay_1_reg_4[3] <= 13'sb0000000000000;
        Delay_1_reg_4[4] <= 13'sb0000000000000;
        Delay_1_reg_4[5] <= 13'sb0000000000000;
        Delay_1_reg_4[6] <= 13'sb0000000000000;
        Delay_1_reg_5[0] <= 13'sb0000000000000;
        Delay_1_reg_5[1] <= 13'sb0000000000000;
        Delay_1_reg_5[2] <= 13'sb0000000000000;
        Delay_1_reg_5[3] <= 13'sb0000000000000;
        Delay_1_reg_5[4] <= 13'sb0000000000000;
        Delay_1_reg_5[5] <= 13'sb0000000000000;
        Delay_1_reg_5[6] <= 13'sb0000000000000;
        Delay_1_reg_6[0] <= 13'sb0000000000000;
        Delay_1_reg_6[1] <= 13'sb0000000000000;
        Delay_1_reg_6[2] <= 13'sb0000000000000;
        Delay_1_reg_6[3] <= 13'sb0000000000000;
        Delay_1_reg_6[4] <= 13'sb0000000000000;
        Delay_1_reg_6[5] <= 13'sb0000000000000;
        Delay_1_reg_6[6] <= 13'sb0000000000000;
        Delay_1_reg_7[0] <= 13'sb0000000000000;
        Delay_1_reg_7[1] <= 13'sb0000000000000;
        Delay_1_reg_7[2] <= 13'sb0000000000000;
        Delay_1_reg_7[3] <= 13'sb0000000000000;
        Delay_1_reg_7[4] <= 13'sb0000000000000;
        Delay_1_reg_7[5] <= 13'sb0000000000000;
        Delay_1_reg_7[6] <= 13'sb0000000000000;
        Delay_1_reg_8[0] <= 13'sb0000000000000;
        Delay_1_reg_8[1] <= 13'sb0000000000000;
        Delay_1_reg_8[2] <= 13'sb0000000000000;
        Delay_1_reg_8[3] <= 13'sb0000000000000;
        Delay_1_reg_8[4] <= 13'sb0000000000000;
        Delay_1_reg_8[5] <= 13'sb0000000000000;
        Delay_1_reg_8[6] <= 13'sb0000000000000;
        Delay_1_reg_9[0] <= 13'sb0000000000000;
        Delay_1_reg_9[1] <= 13'sb0000000000000;
        Delay_1_reg_9[2] <= 13'sb0000000000000;
        Delay_1_reg_9[3] <= 13'sb0000000000000;
        Delay_1_reg_9[4] <= 13'sb0000000000000;
        Delay_1_reg_9[5] <= 13'sb0000000000000;
        Delay_1_reg_9[6] <= 13'sb0000000000000;
        Delay_1_reg_10[0] <= 13'sb0000000000000;
        Delay_1_reg_10[1] <= 13'sb0000000000000;
        Delay_1_reg_10[2] <= 13'sb0000000000000;
        Delay_1_reg_10[3] <= 13'sb0000000000000;
        Delay_1_reg_10[4] <= 13'sb0000000000000;
        Delay_1_reg_10[5] <= 13'sb0000000000000;
        Delay_1_reg_10[6] <= 13'sb0000000000000;
        Delay_1_reg_11[0] <= 13'sb0000000000000;
        Delay_1_reg_11[1] <= 13'sb0000000000000;
        Delay_1_reg_11[2] <= 13'sb0000000000000;
        Delay_1_reg_11[3] <= 13'sb0000000000000;
        Delay_1_reg_11[4] <= 13'sb0000000000000;
        Delay_1_reg_11[5] <= 13'sb0000000000000;
        Delay_1_reg_11[6] <= 13'sb0000000000000;
        Delay_1_reg_12[0] <= 13'sb0000000000000;
        Delay_1_reg_12[1] <= 13'sb0000000000000;
        Delay_1_reg_12[2] <= 13'sb0000000000000;
        Delay_1_reg_12[3] <= 13'sb0000000000000;
        Delay_1_reg_12[4] <= 13'sb0000000000000;
        Delay_1_reg_12[5] <= 13'sb0000000000000;
        Delay_1_reg_12[6] <= 13'sb0000000000000;
        Delay_1_reg_13[0] <= 13'sb0000000000000;
        Delay_1_reg_13[1] <= 13'sb0000000000000;
        Delay_1_reg_13[2] <= 13'sb0000000000000;
        Delay_1_reg_13[3] <= 13'sb0000000000000;
        Delay_1_reg_13[4] <= 13'sb0000000000000;
        Delay_1_reg_13[5] <= 13'sb0000000000000;
        Delay_1_reg_13[6] <= 13'sb0000000000000;
        Delay_1_reg_14[0] <= 13'sb0000000000000;
        Delay_1_reg_14[1] <= 13'sb0000000000000;
        Delay_1_reg_14[2] <= 13'sb0000000000000;
        Delay_1_reg_14[3] <= 13'sb0000000000000;
        Delay_1_reg_14[4] <= 13'sb0000000000000;
        Delay_1_reg_14[5] <= 13'sb0000000000000;
        Delay_1_reg_14[6] <= 13'sb0000000000000;
        Delay_1_reg_15[0] <= 13'sb0000000000000;
        Delay_1_reg_15[1] <= 13'sb0000000000000;
        Delay_1_reg_15[2] <= 13'sb0000000000000;
        Delay_1_reg_15[3] <= 13'sb0000000000000;
        Delay_1_reg_15[4] <= 13'sb0000000000000;
        Delay_1_reg_15[5] <= 13'sb0000000000000;
        Delay_1_reg_15[6] <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay_1_reg[0] <= Delay_1_reg_next[0];
          Delay_1_reg[1] <= Delay_1_reg_next[1];
          Delay_1_reg[2] <= Delay_1_reg_next[2];
          Delay_1_reg[3] <= Delay_1_reg_next[3];
          Delay_1_reg[4] <= Delay_1_reg_next[4];
          Delay_1_reg[5] <= Delay_1_reg_next[5];
          Delay_1_reg[6] <= Delay_1_reg_next[6];
          Delay_1_reg_1[0] <= Delay_1_reg_next_1[0];
          Delay_1_reg_1[1] <= Delay_1_reg_next_1[1];
          Delay_1_reg_1[2] <= Delay_1_reg_next_1[2];
          Delay_1_reg_1[3] <= Delay_1_reg_next_1[3];
          Delay_1_reg_1[4] <= Delay_1_reg_next_1[4];
          Delay_1_reg_1[5] <= Delay_1_reg_next_1[5];
          Delay_1_reg_1[6] <= Delay_1_reg_next_1[6];
          Delay_1_reg_2[0] <= Delay_1_reg_next_2[0];
          Delay_1_reg_2[1] <= Delay_1_reg_next_2[1];
          Delay_1_reg_2[2] <= Delay_1_reg_next_2[2];
          Delay_1_reg_2[3] <= Delay_1_reg_next_2[3];
          Delay_1_reg_2[4] <= Delay_1_reg_next_2[4];
          Delay_1_reg_2[5] <= Delay_1_reg_next_2[5];
          Delay_1_reg_2[6] <= Delay_1_reg_next_2[6];
          Delay_1_reg_3[0] <= Delay_1_reg_next_3[0];
          Delay_1_reg_3[1] <= Delay_1_reg_next_3[1];
          Delay_1_reg_3[2] <= Delay_1_reg_next_3[2];
          Delay_1_reg_3[3] <= Delay_1_reg_next_3[3];
          Delay_1_reg_3[4] <= Delay_1_reg_next_3[4];
          Delay_1_reg_3[5] <= Delay_1_reg_next_3[5];
          Delay_1_reg_3[6] <= Delay_1_reg_next_3[6];
          Delay_1_reg_4[0] <= Delay_1_reg_next_4[0];
          Delay_1_reg_4[1] <= Delay_1_reg_next_4[1];
          Delay_1_reg_4[2] <= Delay_1_reg_next_4[2];
          Delay_1_reg_4[3] <= Delay_1_reg_next_4[3];
          Delay_1_reg_4[4] <= Delay_1_reg_next_4[4];
          Delay_1_reg_4[5] <= Delay_1_reg_next_4[5];
          Delay_1_reg_4[6] <= Delay_1_reg_next_4[6];
          Delay_1_reg_5[0] <= Delay_1_reg_next_5[0];
          Delay_1_reg_5[1] <= Delay_1_reg_next_5[1];
          Delay_1_reg_5[2] <= Delay_1_reg_next_5[2];
          Delay_1_reg_5[3] <= Delay_1_reg_next_5[3];
          Delay_1_reg_5[4] <= Delay_1_reg_next_5[4];
          Delay_1_reg_5[5] <= Delay_1_reg_next_5[5];
          Delay_1_reg_5[6] <= Delay_1_reg_next_5[6];
          Delay_1_reg_6[0] <= Delay_1_reg_next_6[0];
          Delay_1_reg_6[1] <= Delay_1_reg_next_6[1];
          Delay_1_reg_6[2] <= Delay_1_reg_next_6[2];
          Delay_1_reg_6[3] <= Delay_1_reg_next_6[3];
          Delay_1_reg_6[4] <= Delay_1_reg_next_6[4];
          Delay_1_reg_6[5] <= Delay_1_reg_next_6[5];
          Delay_1_reg_6[6] <= Delay_1_reg_next_6[6];
          Delay_1_reg_7[0] <= Delay_1_reg_next_7[0];
          Delay_1_reg_7[1] <= Delay_1_reg_next_7[1];
          Delay_1_reg_7[2] <= Delay_1_reg_next_7[2];
          Delay_1_reg_7[3] <= Delay_1_reg_next_7[3];
          Delay_1_reg_7[4] <= Delay_1_reg_next_7[4];
          Delay_1_reg_7[5] <= Delay_1_reg_next_7[5];
          Delay_1_reg_7[6] <= Delay_1_reg_next_7[6];
          Delay_1_reg_8[0] <= Delay_1_reg_next_8[0];
          Delay_1_reg_8[1] <= Delay_1_reg_next_8[1];
          Delay_1_reg_8[2] <= Delay_1_reg_next_8[2];
          Delay_1_reg_8[3] <= Delay_1_reg_next_8[3];
          Delay_1_reg_8[4] <= Delay_1_reg_next_8[4];
          Delay_1_reg_8[5] <= Delay_1_reg_next_8[5];
          Delay_1_reg_8[6] <= Delay_1_reg_next_8[6];
          Delay_1_reg_9[0] <= Delay_1_reg_next_9[0];
          Delay_1_reg_9[1] <= Delay_1_reg_next_9[1];
          Delay_1_reg_9[2] <= Delay_1_reg_next_9[2];
          Delay_1_reg_9[3] <= Delay_1_reg_next_9[3];
          Delay_1_reg_9[4] <= Delay_1_reg_next_9[4];
          Delay_1_reg_9[5] <= Delay_1_reg_next_9[5];
          Delay_1_reg_9[6] <= Delay_1_reg_next_9[6];
          Delay_1_reg_10[0] <= Delay_1_reg_next_10[0];
          Delay_1_reg_10[1] <= Delay_1_reg_next_10[1];
          Delay_1_reg_10[2] <= Delay_1_reg_next_10[2];
          Delay_1_reg_10[3] <= Delay_1_reg_next_10[3];
          Delay_1_reg_10[4] <= Delay_1_reg_next_10[4];
          Delay_1_reg_10[5] <= Delay_1_reg_next_10[5];
          Delay_1_reg_10[6] <= Delay_1_reg_next_10[6];
          Delay_1_reg_11[0] <= Delay_1_reg_next_11[0];
          Delay_1_reg_11[1] <= Delay_1_reg_next_11[1];
          Delay_1_reg_11[2] <= Delay_1_reg_next_11[2];
          Delay_1_reg_11[3] <= Delay_1_reg_next_11[3];
          Delay_1_reg_11[4] <= Delay_1_reg_next_11[4];
          Delay_1_reg_11[5] <= Delay_1_reg_next_11[5];
          Delay_1_reg_11[6] <= Delay_1_reg_next_11[6];
          Delay_1_reg_12[0] <= Delay_1_reg_next_12[0];
          Delay_1_reg_12[1] <= Delay_1_reg_next_12[1];
          Delay_1_reg_12[2] <= Delay_1_reg_next_12[2];
          Delay_1_reg_12[3] <= Delay_1_reg_next_12[3];
          Delay_1_reg_12[4] <= Delay_1_reg_next_12[4];
          Delay_1_reg_12[5] <= Delay_1_reg_next_12[5];
          Delay_1_reg_12[6] <= Delay_1_reg_next_12[6];
          Delay_1_reg_13[0] <= Delay_1_reg_next_13[0];
          Delay_1_reg_13[1] <= Delay_1_reg_next_13[1];
          Delay_1_reg_13[2] <= Delay_1_reg_next_13[2];
          Delay_1_reg_13[3] <= Delay_1_reg_next_13[3];
          Delay_1_reg_13[4] <= Delay_1_reg_next_13[4];
          Delay_1_reg_13[5] <= Delay_1_reg_next_13[5];
          Delay_1_reg_13[6] <= Delay_1_reg_next_13[6];
          Delay_1_reg_14[0] <= Delay_1_reg_next_14[0];
          Delay_1_reg_14[1] <= Delay_1_reg_next_14[1];
          Delay_1_reg_14[2] <= Delay_1_reg_next_14[2];
          Delay_1_reg_14[3] <= Delay_1_reg_next_14[3];
          Delay_1_reg_14[4] <= Delay_1_reg_next_14[4];
          Delay_1_reg_14[5] <= Delay_1_reg_next_14[5];
          Delay_1_reg_14[6] <= Delay_1_reg_next_14[6];
          Delay_1_reg_15[0] <= Delay_1_reg_next_15[0];
          Delay_1_reg_15[1] <= Delay_1_reg_next_15[1];
          Delay_1_reg_15[2] <= Delay_1_reg_next_15[2];
          Delay_1_reg_15[3] <= Delay_1_reg_next_15[3];
          Delay_1_reg_15[4] <= Delay_1_reg_next_15[4];
          Delay_1_reg_15[5] <= Delay_1_reg_next_15[5];
          Delay_1_reg_15[6] <= Delay_1_reg_next_15[6];
        end
      end
    end

  assign Delay_1_reg_next[0] = totalCostIn_0;
  assign Delay_1_reg_next[1] = Delay_1_reg[0];
  assign Delay_1_reg_next[2] = Delay_1_reg[1];
  assign Delay_1_reg_next[3] = Delay_1_reg[2];
  assign Delay_1_reg_next[4] = Delay_1_reg[3];
  assign Delay_1_reg_next[5] = Delay_1_reg[4];
  assign Delay_1_reg_next[6] = Delay_1_reg[5];
  assign Delay_out_1 = Delay_1_reg[6];
  assign Delay_1_reg_next_1[0] = totalCostIn_1;
  assign Delay_1_reg_next_1[1] = Delay_1_reg_1[0];
  assign Delay_1_reg_next_1[2] = Delay_1_reg_1[1];
  assign Delay_1_reg_next_1[3] = Delay_1_reg_1[2];
  assign Delay_1_reg_next_1[4] = Delay_1_reg_1[3];
  assign Delay_1_reg_next_1[5] = Delay_1_reg_1[4];
  assign Delay_1_reg_next_1[6] = Delay_1_reg_1[5];
  assign Delay_out_2 = Delay_1_reg_1[6];
  assign Delay_1_reg_next_2[0] = totalCostIn_2;
  assign Delay_1_reg_next_2[1] = Delay_1_reg_2[0];
  assign Delay_1_reg_next_2[2] = Delay_1_reg_2[1];
  assign Delay_1_reg_next_2[3] = Delay_1_reg_2[2];
  assign Delay_1_reg_next_2[4] = Delay_1_reg_2[3];
  assign Delay_1_reg_next_2[5] = Delay_1_reg_2[4];
  assign Delay_1_reg_next_2[6] = Delay_1_reg_2[5];
  assign Delay_out_3 = Delay_1_reg_2[6];
  assign Delay_1_reg_next_3[0] = totalCostIn_3;
  assign Delay_1_reg_next_3[1] = Delay_1_reg_3[0];
  assign Delay_1_reg_next_3[2] = Delay_1_reg_3[1];
  assign Delay_1_reg_next_3[3] = Delay_1_reg_3[2];
  assign Delay_1_reg_next_3[4] = Delay_1_reg_3[3];
  assign Delay_1_reg_next_3[5] = Delay_1_reg_3[4];
  assign Delay_1_reg_next_3[6] = Delay_1_reg_3[5];
  assign Delay_out_4 = Delay_1_reg_3[6];
  assign Delay_1_reg_next_4[0] = totalCostIn_4;
  assign Delay_1_reg_next_4[1] = Delay_1_reg_4[0];
  assign Delay_1_reg_next_4[2] = Delay_1_reg_4[1];
  assign Delay_1_reg_next_4[3] = Delay_1_reg_4[2];
  assign Delay_1_reg_next_4[4] = Delay_1_reg_4[3];
  assign Delay_1_reg_next_4[5] = Delay_1_reg_4[4];
  assign Delay_1_reg_next_4[6] = Delay_1_reg_4[5];
  assign Delay_out_5 = Delay_1_reg_4[6];
  assign Delay_1_reg_next_5[0] = totalCostIn_5;
  assign Delay_1_reg_next_5[1] = Delay_1_reg_5[0];
  assign Delay_1_reg_next_5[2] = Delay_1_reg_5[1];
  assign Delay_1_reg_next_5[3] = Delay_1_reg_5[2];
  assign Delay_1_reg_next_5[4] = Delay_1_reg_5[3];
  assign Delay_1_reg_next_5[5] = Delay_1_reg_5[4];
  assign Delay_1_reg_next_5[6] = Delay_1_reg_5[5];
  assign Delay_out_6 = Delay_1_reg_5[6];
  assign Delay_1_reg_next_6[0] = totalCostIn_6;
  assign Delay_1_reg_next_6[1] = Delay_1_reg_6[0];
  assign Delay_1_reg_next_6[2] = Delay_1_reg_6[1];
  assign Delay_1_reg_next_6[3] = Delay_1_reg_6[2];
  assign Delay_1_reg_next_6[4] = Delay_1_reg_6[3];
  assign Delay_1_reg_next_6[5] = Delay_1_reg_6[4];
  assign Delay_1_reg_next_6[6] = Delay_1_reg_6[5];
  assign Delay_out_7 = Delay_1_reg_6[6];
  assign Delay_1_reg_next_7[0] = totalCostIn_7;
  assign Delay_1_reg_next_7[1] = Delay_1_reg_7[0];
  assign Delay_1_reg_next_7[2] = Delay_1_reg_7[1];
  assign Delay_1_reg_next_7[3] = Delay_1_reg_7[2];
  assign Delay_1_reg_next_7[4] = Delay_1_reg_7[3];
  assign Delay_1_reg_next_7[5] = Delay_1_reg_7[4];
  assign Delay_1_reg_next_7[6] = Delay_1_reg_7[5];
  assign Delay_out_8 = Delay_1_reg_7[6];
  assign Delay_1_reg_next_8[0] = totalCostIn_8;
  assign Delay_1_reg_next_8[1] = Delay_1_reg_8[0];
  assign Delay_1_reg_next_8[2] = Delay_1_reg_8[1];
  assign Delay_1_reg_next_8[3] = Delay_1_reg_8[2];
  assign Delay_1_reg_next_8[4] = Delay_1_reg_8[3];
  assign Delay_1_reg_next_8[5] = Delay_1_reg_8[4];
  assign Delay_1_reg_next_8[6] = Delay_1_reg_8[5];
  assign Delay_out_9 = Delay_1_reg_8[6];
  assign Delay_1_reg_next_9[0] = totalCostIn_9;
  assign Delay_1_reg_next_9[1] = Delay_1_reg_9[0];
  assign Delay_1_reg_next_9[2] = Delay_1_reg_9[1];
  assign Delay_1_reg_next_9[3] = Delay_1_reg_9[2];
  assign Delay_1_reg_next_9[4] = Delay_1_reg_9[3];
  assign Delay_1_reg_next_9[5] = Delay_1_reg_9[4];
  assign Delay_1_reg_next_9[6] = Delay_1_reg_9[5];
  assign Delay_out_10 = Delay_1_reg_9[6];
  assign Delay_1_reg_next_10[0] = totalCostIn_10;
  assign Delay_1_reg_next_10[1] = Delay_1_reg_10[0];
  assign Delay_1_reg_next_10[2] = Delay_1_reg_10[1];
  assign Delay_1_reg_next_10[3] = Delay_1_reg_10[2];
  assign Delay_1_reg_next_10[4] = Delay_1_reg_10[3];
  assign Delay_1_reg_next_10[5] = Delay_1_reg_10[4];
  assign Delay_1_reg_next_10[6] = Delay_1_reg_10[5];
  assign Delay_out_11 = Delay_1_reg_10[6];
  assign Delay_1_reg_next_11[0] = totalCostIn_11;
  assign Delay_1_reg_next_11[1] = Delay_1_reg_11[0];
  assign Delay_1_reg_next_11[2] = Delay_1_reg_11[1];
  assign Delay_1_reg_next_11[3] = Delay_1_reg_11[2];
  assign Delay_1_reg_next_11[4] = Delay_1_reg_11[3];
  assign Delay_1_reg_next_11[5] = Delay_1_reg_11[4];
  assign Delay_1_reg_next_11[6] = Delay_1_reg_11[5];
  assign Delay_out_12 = Delay_1_reg_11[6];
  assign Delay_1_reg_next_12[0] = totalCostIn_12;
  assign Delay_1_reg_next_12[1] = Delay_1_reg_12[0];
  assign Delay_1_reg_next_12[2] = Delay_1_reg_12[1];
  assign Delay_1_reg_next_12[3] = Delay_1_reg_12[2];
  assign Delay_1_reg_next_12[4] = Delay_1_reg_12[3];
  assign Delay_1_reg_next_12[5] = Delay_1_reg_12[4];
  assign Delay_1_reg_next_12[6] = Delay_1_reg_12[5];
  assign Delay_out_13 = Delay_1_reg_12[6];
  assign Delay_1_reg_next_13[0] = totalCostIn_13;
  assign Delay_1_reg_next_13[1] = Delay_1_reg_13[0];
  assign Delay_1_reg_next_13[2] = Delay_1_reg_13[1];
  assign Delay_1_reg_next_13[3] = Delay_1_reg_13[2];
  assign Delay_1_reg_next_13[4] = Delay_1_reg_13[3];
  assign Delay_1_reg_next_13[5] = Delay_1_reg_13[4];
  assign Delay_1_reg_next_13[6] = Delay_1_reg_13[5];
  assign Delay_out_14 = Delay_1_reg_13[6];
  assign Delay_1_reg_next_14[0] = totalCostIn_14;
  assign Delay_1_reg_next_14[1] = Delay_1_reg_14[0];
  assign Delay_1_reg_next_14[2] = Delay_1_reg_14[1];
  assign Delay_1_reg_next_14[3] = Delay_1_reg_14[2];
  assign Delay_1_reg_next_14[4] = Delay_1_reg_14[3];
  assign Delay_1_reg_next_14[5] = Delay_1_reg_14[4];
  assign Delay_1_reg_next_14[6] = Delay_1_reg_14[5];
  assign Delay_out_15 = Delay_1_reg_14[6];
  assign Delay_1_reg_next_15[0] = totalCostIn_15;
  assign Delay_1_reg_next_15[1] = Delay_1_reg_15[0];
  assign Delay_1_reg_next_15[2] = Delay_1_reg_15[1];
  assign Delay_1_reg_next_15[3] = Delay_1_reg_15[2];
  assign Delay_1_reg_next_15[4] = Delay_1_reg_15[3];
  assign Delay_1_reg_next_15[5] = Delay_1_reg_15[4];
  assign Delay_1_reg_next_15[6] = Delay_1_reg_15[5];
  assign Delay_out_16 = Delay_1_reg_15[6];



  SGBMHDLAl_ip_src_Interpolation u_Interpolation (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .totalCostIn_0(totalCostIn_0),  // sfix13
                                                  .totalCostIn_1(totalCostIn_1),  // sfix13
                                                  .totalCostIn_2(totalCostIn_2),  // sfix13
                                                  .totalCostIn_3(totalCostIn_3),  // sfix13
                                                  .totalCostIn_4(totalCostIn_4),  // sfix13
                                                  .totalCostIn_5(totalCostIn_5),  // sfix13
                                                  .totalCostIn_6(totalCostIn_6),  // sfix13
                                                  .totalCostIn_7(totalCostIn_7),  // sfix13
                                                  .totalCostIn_8(totalCostIn_8),  // sfix13
                                                  .totalCostIn_9(totalCostIn_9),  // sfix13
                                                  .totalCostIn_10(totalCostIn_10),  // sfix13
                                                  .totalCostIn_11(totalCostIn_11),  // sfix13
                                                  .totalCostIn_12(totalCostIn_12),  // sfix13
                                                  .totalCostIn_13(totalCostIn_13),  // sfix13
                                                  .totalCostIn_14(totalCostIn_14),  // sfix13
                                                  .totalCostIn_15(totalCostIn_15),  // sfix13
                                                  .validIn(validIn),
                                                  .minIndexVal(Interpolation_out1),  // sfix13
                                                  .minIndex(Interpolation_out2),  // uint8
                                                  .validOutUNF(Interpolation_out3),
                                                  .disparity(Interpolation_out4),  // sfix24_En8
                                                  .validOut(Interpolation_out5)
                                                  );

  SGBMHDLAl_ip_src_UniquenessFcn u_UniquenessFcn (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .totalCostIn_0(Delay_out_1),  // sfix13
                                                  .totalCostIn_1(Delay_out_2),  // sfix13
                                                  .totalCostIn_2(Delay_out_3),  // sfix13
                                                  .totalCostIn_3(Delay_out_4),  // sfix13
                                                  .totalCostIn_4(Delay_out_5),  // sfix13
                                                  .totalCostIn_5(Delay_out_6),  // sfix13
                                                  .totalCostIn_6(Delay_out_7),  // sfix13
                                                  .totalCostIn_7(Delay_out_8),  // sfix13
                                                  .totalCostIn_8(Delay_out_9),  // sfix13
                                                  .totalCostIn_9(Delay_out_10),  // sfix13
                                                  .totalCostIn_10(Delay_out_11),  // sfix13
                                                  .totalCostIn_11(Delay_out_12),  // sfix13
                                                  .totalCostIn_12(Delay_out_13),  // sfix13
                                                  .totalCostIn_13(Delay_out_14),  // sfix13
                                                  .totalCostIn_14(Delay_out_15),  // sfix13
                                                  .totalCostIn_15(Delay_out_16),  // sfix13
                                                  .minIndexVal(Interpolation_out1),  // sfix13
                                                  .minIndex(Interpolation_out2),  // uint8
                                                  .validIn(Interpolation_out3),
                                                  .UNF(UniquenessFcn_out1),
                                                  .validOut(UniquenessFcn_out2)
                                                  );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 1'b0;
        Delay2_reg[1] <= 1'b0;
        Delay2_reg[2] <= 1'b0;
        Delay2_reg[3] <= 1'b0;
        Delay2_reg[4] <= 1'b0;
        Delay2_reg[5] <= 1'b0;
        Delay2_reg[6] <= 1'b0;
        Delay2_reg[7] <= 1'b0;
        Delay2_reg[8] <= 1'b0;
        Delay2_reg[9] <= 1'b0;
        Delay2_reg[10] <= 1'b0;
        Delay2_reg[11] <= 1'b0;
        Delay2_reg[12] <= 1'b0;
        Delay2_reg[13] <= 1'b0;
        Delay2_reg[14] <= 1'b0;
        Delay2_reg[15] <= 1'b0;
        Delay2_reg[16] <= 1'b0;
        Delay2_reg[17] <= 1'b0;
        Delay2_reg[18] <= 1'b0;
        Delay2_reg[19] <= 1'b0;
        Delay2_reg[20] <= 1'b0;
        Delay2_reg[21] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
          Delay2_reg[2] <= Delay2_reg_next[2];
          Delay2_reg[3] <= Delay2_reg_next[3];
          Delay2_reg[4] <= Delay2_reg_next[4];
          Delay2_reg[5] <= Delay2_reg_next[5];
          Delay2_reg[6] <= Delay2_reg_next[6];
          Delay2_reg[7] <= Delay2_reg_next[7];
          Delay2_reg[8] <= Delay2_reg_next[8];
          Delay2_reg[9] <= Delay2_reg_next[9];
          Delay2_reg[10] <= Delay2_reg_next[10];
          Delay2_reg[11] <= Delay2_reg_next[11];
          Delay2_reg[12] <= Delay2_reg_next[12];
          Delay2_reg[13] <= Delay2_reg_next[13];
          Delay2_reg[14] <= Delay2_reg_next[14];
          Delay2_reg[15] <= Delay2_reg_next[15];
          Delay2_reg[16] <= Delay2_reg_next[16];
          Delay2_reg[17] <= Delay2_reg_next[17];
          Delay2_reg[18] <= Delay2_reg_next[18];
          Delay2_reg[19] <= Delay2_reg_next[19];
          Delay2_reg[20] <= Delay2_reg_next[20];
          Delay2_reg[21] <= Delay2_reg_next[21];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[21];
  assign Delay2_reg_next[0] = UniquenessFcn_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];
  assign Delay2_reg_next[2] = Delay2_reg[1];
  assign Delay2_reg_next[3] = Delay2_reg[2];
  assign Delay2_reg_next[4] = Delay2_reg[3];
  assign Delay2_reg_next[5] = Delay2_reg[4];
  assign Delay2_reg_next[6] = Delay2_reg[5];
  assign Delay2_reg_next[7] = Delay2_reg[6];
  assign Delay2_reg_next[8] = Delay2_reg[7];
  assign Delay2_reg_next[9] = Delay2_reg[8];
  assign Delay2_reg_next[10] = Delay2_reg[9];
  assign Delay2_reg_next[11] = Delay2_reg[10];
  assign Delay2_reg_next[12] = Delay2_reg[11];
  assign Delay2_reg_next[13] = Delay2_reg[12];
  assign Delay2_reg_next[14] = Delay2_reg[13];
  assign Delay2_reg_next[15] = Delay2_reg[14];
  assign Delay2_reg_next[16] = Delay2_reg[15];
  assign Delay2_reg_next[17] = Delay2_reg[16];
  assign Delay2_reg_next[18] = Delay2_reg[17];
  assign Delay2_reg_next[19] = Delay2_reg[18];
  assign Delay2_reg_next[20] = Delay2_reg[19];
  assign Delay2_reg_next[21] = Delay2_reg[20];



  assign Data_Type_Conversion_out1 = Interpolation_out4[16:3];



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Data_Type_Conversion_out1;
        end
      end
    end



  assign Constant_out1 = 14'sb00000000000000;



  assign Switch_out1 = (Delay2_out1 == 1'b0 ? Delay14_out1 :
              Constant_out1);



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Switch_out1;
        end
      end
    end



  assign Constant1_out1 = 8'b00000000;



  assign Relational_Operator_1_cast = {1'b0, {Constant1_out1, 5'b00000}};
  assign Relational_Operator_relop1 = Delay3_out1 < Relational_Operator_1_cast;



  assign Constant2_out1 = 14'sb11111111100000;



  assign Switch1_out1 = (Relational_Operator_relop1 == 1'b0 ? Delay3_out1 :
              Constant2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Switch1_out1;
        end
      end
    end



  assign disparityOut = Delay6_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 1'b0;
        Delay1_reg[1] <= 1'b0;
        Delay1_reg[2] <= 1'b0;
        Delay1_reg[3] <= 1'b0;
        Delay1_reg[4] <= 1'b0;
        Delay1_reg[5] <= 1'b0;
        Delay1_reg[6] <= 1'b0;
        Delay1_reg[7] <= 1'b0;
        Delay1_reg[8] <= 1'b0;
        Delay1_reg[9] <= 1'b0;
        Delay1_reg[10] <= 1'b0;
        Delay1_reg[11] <= 1'b0;
        Delay1_reg[12] <= 1'b0;
        Delay1_reg[13] <= 1'b0;
        Delay1_reg[14] <= 1'b0;
        Delay1_reg[15] <= 1'b0;
        Delay1_reg[16] <= 1'b0;
        Delay1_reg[17] <= 1'b0;
        Delay1_reg[18] <= 1'b0;
        Delay1_reg[19] <= 1'b0;
        Delay1_reg[20] <= 1'b0;
        Delay1_reg[21] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
          Delay1_reg[2] <= Delay1_reg_next[2];
          Delay1_reg[3] <= Delay1_reg_next[3];
          Delay1_reg[4] <= Delay1_reg_next[4];
          Delay1_reg[5] <= Delay1_reg_next[5];
          Delay1_reg[6] <= Delay1_reg_next[6];
          Delay1_reg[7] <= Delay1_reg_next[7];
          Delay1_reg[8] <= Delay1_reg_next[8];
          Delay1_reg[9] <= Delay1_reg_next[9];
          Delay1_reg[10] <= Delay1_reg_next[10];
          Delay1_reg[11] <= Delay1_reg_next[11];
          Delay1_reg[12] <= Delay1_reg_next[12];
          Delay1_reg[13] <= Delay1_reg_next[13];
          Delay1_reg[14] <= Delay1_reg_next[14];
          Delay1_reg[15] <= Delay1_reg_next[15];
          Delay1_reg[16] <= Delay1_reg_next[16];
          Delay1_reg[17] <= Delay1_reg_next[17];
          Delay1_reg[18] <= Delay1_reg_next[18];
          Delay1_reg[19] <= Delay1_reg_next[19];
          Delay1_reg[20] <= Delay1_reg_next[20];
          Delay1_reg[21] <= Delay1_reg_next[21];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[21];
  assign Delay1_reg_next[0] = UniquenessFcn_out2;
  assign Delay1_reg_next[1] = Delay1_reg[0];
  assign Delay1_reg_next[2] = Delay1_reg[1];
  assign Delay1_reg_next[3] = Delay1_reg[2];
  assign Delay1_reg_next[4] = Delay1_reg[3];
  assign Delay1_reg_next[5] = Delay1_reg[4];
  assign Delay1_reg_next[6] = Delay1_reg[5];
  assign Delay1_reg_next[7] = Delay1_reg[6];
  assign Delay1_reg_next[8] = Delay1_reg[7];
  assign Delay1_reg_next[9] = Delay1_reg[8];
  assign Delay1_reg_next[10] = Delay1_reg[9];
  assign Delay1_reg_next[11] = Delay1_reg[10];
  assign Delay1_reg_next[12] = Delay1_reg[11];
  assign Delay1_reg_next[13] = Delay1_reg[12];
  assign Delay1_reg_next[14] = Delay1_reg[13];
  assign Delay1_reg_next[15] = Delay1_reg[14];
  assign Delay1_reg_next[16] = Delay1_reg[15];
  assign Delay1_reg_next[17] = Delay1_reg[16];
  assign Delay1_reg_next[18] = Delay1_reg[17];
  assign Delay1_reg_next[19] = Delay1_reg[18];
  assign Delay1_reg_next[20] = Delay1_reg[19];
  assign Delay1_reg_next[21] = Delay1_reg[20];



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Interpolation_out5;
        end
      end
    end



  assign Logical_Operator1_out1 = Delay1_out1 & Delay7_out1;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Logical_Operator1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Delay4_out1;
        end
      end
    end



  SGBMHDLAl_ip_src_pixelBusGenerator_block7 u_pixelBusGenerator (.clk(clk),
                                                                 .reset(reset),
                                                                 .enb(enb),
                                                                 .validIn(Delay5_out1),
                                                                 .busOut_valid(pixelBusGenerator_out1_valid)
                                                                 );

  assign busOut_valid = pixelBusGenerator_out1_valid;

endmodule  // SGBMHDLAl_ip_src_PostProcessing

