// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_rlSubsystem.v
// Created: 2021-04-19 19:46:09
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_rlSubsystem
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/DirectionalCost/RightToLeft/rlSubsystem
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_rlSubsystem
          (clk,
           reset,
           enb,
           enable,
           matchCostIn_0,
           matchCostIn_1,
           matchCostIn_2,
           matchCostIn_3,
           matchCostIn_4,
           matchCostIn_5,
           matchCostIn_6,
           matchCostIn_7,
           matchCostIn_8,
           matchCostIn_9,
           matchCostIn_10,
           matchCostIn_11,
           matchCostIn_12,
           matchCostIn_13,
           matchCostIn_14,
           matchCostIn_15,
           Enable_1,
           Out1_0,
           Out1_1,
           Out1_2,
           Out1_3,
           Out1_4,
           Out1_5,
           Out1_6,
           Out1_7,
           Out1_8,
           Out1_9,
           Out1_10,
           Out1_11,
           Out1_12,
           Out1_13,
           Out1_14,
           Out1_15);


  input   clk;
  input   reset;
  input   enb;
  input   enable;
  input   [4:0] matchCostIn_0;  // ufix5
  input   [4:0] matchCostIn_1;  // ufix5
  input   [4:0] matchCostIn_2;  // ufix5
  input   [4:0] matchCostIn_3;  // ufix5
  input   [4:0] matchCostIn_4;  // ufix5
  input   [4:0] matchCostIn_5;  // ufix5
  input   [4:0] matchCostIn_6;  // ufix5
  input   [4:0] matchCostIn_7;  // ufix5
  input   [4:0] matchCostIn_8;  // ufix5
  input   [4:0] matchCostIn_9;  // ufix5
  input   [4:0] matchCostIn_10;  // ufix5
  input   [4:0] matchCostIn_11;  // ufix5
  input   [4:0] matchCostIn_12;  // ufix5
  input   [4:0] matchCostIn_13;  // ufix5
  input   [4:0] matchCostIn_14;  // ufix5
  input   [4:0] matchCostIn_15;  // ufix5
  input   Enable_1;
  output  signed [9:0] Out1_0;  // sfix10
  output  signed [9:0] Out1_1;  // sfix10
  output  signed [9:0] Out1_2;  // sfix10
  output  signed [9:0] Out1_3;  // sfix10
  output  signed [9:0] Out1_4;  // sfix10
  output  signed [9:0] Out1_5;  // sfix10
  output  signed [9:0] Out1_6;  // sfix10
  output  signed [9:0] Out1_7;  // sfix10
  output  signed [9:0] Out1_8;  // sfix10
  output  signed [9:0] Out1_9;  // sfix10
  output  signed [9:0] Out1_10;  // sfix10
  output  signed [9:0] Out1_11;  // sfix10
  output  signed [9:0] Out1_12;  // sfix10
  output  signed [9:0] Out1_13;  // sfix10
  output  signed [9:0] Out1_14;  // sfix10
  output  signed [9:0] Out1_15;  // sfix10


  wire enb_gated;
  wire [4:0] matchCostIn [0:15];  // ufix5 [16]
  wire [0:15] For_Each_Subsystem_out1;  // boolean [16]
  wire [0:15] For_Each_Subsystem_out1_1;  // boolean [16]
  wire signed [9:0] For_Each_Subsystem_out1_dtc [0:15];  // sfix10 [16]
  wire signed [9:0] minCostPath_out1 [0:15];  // sfix10 [16]
  reg signed [9:0] Delay_out1 [0:15];  // sfix10 [16]
  wire signed [9:0] MinMax1_out1;  // sfix10
  wire signed [9:0] d_1_out1_0;  // sfix10
  wire signed [9:0] d_1_out1_1;  // sfix10
  wire signed [9:0] d_1_out1_2;  // sfix10
  wire signed [9:0] d_1_out1_3;  // sfix10
  wire signed [9:0] d_1_out1_4;  // sfix10
  wire signed [9:0] d_1_out1_5;  // sfix10
  wire signed [9:0] d_1_out1_6;  // sfix10
  wire signed [9:0] d_1_out1_7;  // sfix10
  wire signed [9:0] d_1_out1_8;  // sfix10
  wire signed [9:0] d_1_out1_9;  // sfix10
  wire signed [9:0] d_1_out1_10;  // sfix10
  wire signed [9:0] d_1_out1_11;  // sfix10
  wire signed [9:0] d_1_out1_12;  // sfix10
  wire signed [9:0] d_1_out1_13;  // sfix10
  wire signed [9:0] d_1_out1_14;  // sfix10
  wire signed [9:0] d_1_out1_15;  // sfix10
  wire signed [9:0] d_1_out1 [0:15];  // sfix10 [16]
  wire signed [9:0] d_1_out1_0_1;  // sfix10
  wire signed [9:0] d_1_out1_1_1;  // sfix10
  wire signed [9:0] d_1_out1_2_1;  // sfix10
  wire signed [9:0] d_1_out1_3_1;  // sfix10
  wire signed [9:0] d_1_out1_4_1;  // sfix10
  wire signed [9:0] d_1_out1_5_1;  // sfix10
  wire signed [9:0] d_1_out1_6_1;  // sfix10
  wire signed [9:0] d_1_out1_7_1;  // sfix10
  wire signed [9:0] d_1_out1_8_1;  // sfix10
  wire signed [9:0] d_1_out1_9_1;  // sfix10
  wire signed [9:0] d_1_out1_10_1;  // sfix10
  wire signed [9:0] d_1_out1_11_1;  // sfix10
  wire signed [9:0] d_1_out1_12_1;  // sfix10
  wire signed [9:0] d_1_out1_13_1;  // sfix10
  wire signed [9:0] d_1_out1_14_1;  // sfix10
  wire signed [9:0] d_1_out1_15_1;  // sfix10
  wire signed [9:0] d_1_out1_16 [0:15];  // sfix10 [16]
  wire signed [9:0] minCostPath_out1_1 [0:15];  // sfix10 [16]
  wire signed [9:0] Switch32_out1 [0:15];  // sfix10 [16]
  reg signed [9:0] minCostPath_out1_hold [0:15];  // sfix10 [16]


  assign matchCostIn[0] = matchCostIn_0;
  assign matchCostIn[1] = matchCostIn_1;
  assign matchCostIn[2] = matchCostIn_2;
  assign matchCostIn[3] = matchCostIn_3;
  assign matchCostIn[4] = matchCostIn_4;
  assign matchCostIn[5] = matchCostIn_5;
  assign matchCostIn[6] = matchCostIn_6;
  assign matchCostIn[7] = matchCostIn_7;
  assign matchCostIn[8] = matchCostIn_8;
  assign matchCostIn[9] = matchCostIn_9;
  assign matchCostIn[10] = matchCostIn_10;
  assign matchCostIn[11] = matchCostIn_11;
  assign matchCostIn[12] = matchCostIn_12;
  assign matchCostIn[13] = matchCostIn_13;
  assign matchCostIn[14] = matchCostIn_14;
  assign matchCostIn[15] = matchCostIn_15;

  generate
    genvar k1;
    for(k1 = 0; k1 < 16; k1 = k1 + 1) begin : GEN_LABEL1
        SGBMHDLAl_ip_src_For_Each_Subsystem_block u_For_Each_Subsystem (.Out1(For_Each_Subsystem_out1[k1])
                                                                        );
    end
  endgenerate

  assign For_Each_Subsystem_out1_1[0] = For_Each_Subsystem_out1[0];
  assign For_Each_Subsystem_out1_1[1] = For_Each_Subsystem_out1[1];
  assign For_Each_Subsystem_out1_1[2] = For_Each_Subsystem_out1[2];
  assign For_Each_Subsystem_out1_1[3] = For_Each_Subsystem_out1[3];
  assign For_Each_Subsystem_out1_1[4] = For_Each_Subsystem_out1[4];
  assign For_Each_Subsystem_out1_1[5] = For_Each_Subsystem_out1[5];
  assign For_Each_Subsystem_out1_1[6] = For_Each_Subsystem_out1[6];
  assign For_Each_Subsystem_out1_1[7] = For_Each_Subsystem_out1[7];
  assign For_Each_Subsystem_out1_1[8] = For_Each_Subsystem_out1[8];
  assign For_Each_Subsystem_out1_1[9] = For_Each_Subsystem_out1[9];
  assign For_Each_Subsystem_out1_1[10] = For_Each_Subsystem_out1[10];
  assign For_Each_Subsystem_out1_1[11] = For_Each_Subsystem_out1[11];
  assign For_Each_Subsystem_out1_1[12] = For_Each_Subsystem_out1[12];
  assign For_Each_Subsystem_out1_1[13] = For_Each_Subsystem_out1[13];
  assign For_Each_Subsystem_out1_1[14] = For_Each_Subsystem_out1[14];
  assign For_Each_Subsystem_out1_1[15] = For_Each_Subsystem_out1[15];

  assign For_Each_Subsystem_out1_dtc[0] = {9'b0, For_Each_Subsystem_out1_1[0]};
  assign For_Each_Subsystem_out1_dtc[1] = {9'b0, For_Each_Subsystem_out1_1[1]};
  assign For_Each_Subsystem_out1_dtc[2] = {9'b0, For_Each_Subsystem_out1_1[2]};
  assign For_Each_Subsystem_out1_dtc[3] = {9'b0, For_Each_Subsystem_out1_1[3]};
  assign For_Each_Subsystem_out1_dtc[4] = {9'b0, For_Each_Subsystem_out1_1[4]};
  assign For_Each_Subsystem_out1_dtc[5] = {9'b0, For_Each_Subsystem_out1_1[5]};
  assign For_Each_Subsystem_out1_dtc[6] = {9'b0, For_Each_Subsystem_out1_1[6]};
  assign For_Each_Subsystem_out1_dtc[7] = {9'b0, For_Each_Subsystem_out1_1[7]};
  assign For_Each_Subsystem_out1_dtc[8] = {9'b0, For_Each_Subsystem_out1_1[8]};
  assign For_Each_Subsystem_out1_dtc[9] = {9'b0, For_Each_Subsystem_out1_1[9]};
  assign For_Each_Subsystem_out1_dtc[10] = {9'b0, For_Each_Subsystem_out1_1[10]};
  assign For_Each_Subsystem_out1_dtc[11] = {9'b0, For_Each_Subsystem_out1_1[11]};
  assign For_Each_Subsystem_out1_dtc[12] = {9'b0, For_Each_Subsystem_out1_1[12]};
  assign For_Each_Subsystem_out1_dtc[13] = {9'b0, For_Each_Subsystem_out1_1[13]};
  assign For_Each_Subsystem_out1_dtc[14] = {9'b0, For_Each_Subsystem_out1_1[14]};
  assign For_Each_Subsystem_out1_dtc[15] = {9'b0, For_Each_Subsystem_out1_1[15]};



  assign enb_gated = Enable_1 && enb;

  SGBMHDLAl_ip_src_MinMax1_block u_MinMax1 (.in0_0(Delay_out1[0]),  // sfix10
                                            .in0_1(Delay_out1[1]),  // sfix10
                                            .in0_2(Delay_out1[2]),  // sfix10
                                            .in0_3(Delay_out1[3]),  // sfix10
                                            .in0_4(Delay_out1[4]),  // sfix10
                                            .in0_5(Delay_out1[5]),  // sfix10
                                            .in0_6(Delay_out1[6]),  // sfix10
                                            .in0_7(Delay_out1[7]),  // sfix10
                                            .in0_8(Delay_out1[8]),  // sfix10
                                            .in0_9(Delay_out1[9]),  // sfix10
                                            .in0_10(Delay_out1[10]),  // sfix10
                                            .in0_11(Delay_out1[11]),  // sfix10
                                            .in0_12(Delay_out1[12]),  // sfix10
                                            .in0_13(Delay_out1[13]),  // sfix10
                                            .in0_14(Delay_out1[14]),  // sfix10
                                            .in0_15(Delay_out1[15]),  // sfix10
                                            .out0(MinMax1_out1)  // sfix10
                                            );

  SGBMHDLAl_ip_src_d_1_block1 u_d_1 (.prev_cost_d_1(Delay_out1[1]),  // sfix10
                                     .prev_cost_d_2(Delay_out1[2]),  // sfix10
                                     .prev_cost_d_3(Delay_out1[3]),  // sfix10
                                     .prev_cost_d_4(Delay_out1[4]),  // sfix10
                                     .prev_cost_d_5(Delay_out1[5]),  // sfix10
                                     .prev_cost_d_6(Delay_out1[6]),  // sfix10
                                     .prev_cost_d_7(Delay_out1[7]),  // sfix10
                                     .prev_cost_d_8(Delay_out1[8]),  // sfix10
                                     .prev_cost_d_9(Delay_out1[9]),  // sfix10
                                     .prev_cost_d_10(Delay_out1[10]),  // sfix10
                                     .prev_cost_d_11(Delay_out1[11]),  // sfix10
                                     .prev_cost_d_12(Delay_out1[12]),  // sfix10
                                     .prev_cost_d_13(Delay_out1[13]),  // sfix10
                                     .prev_cost_d_14(Delay_out1[14]),  // sfix10
                                     .prev_cost_d_15(Delay_out1[15]),  // sfix10
                                     .prev_cost_d_1_0(d_1_out1_0),  // sfix10
                                     .prev_cost_d_1_1(d_1_out1_1),  // sfix10
                                     .prev_cost_d_1_2(d_1_out1_2),  // sfix10
                                     .prev_cost_d_1_3(d_1_out1_3),  // sfix10
                                     .prev_cost_d_1_4(d_1_out1_4),  // sfix10
                                     .prev_cost_d_1_5(d_1_out1_5),  // sfix10
                                     .prev_cost_d_1_6(d_1_out1_6),  // sfix10
                                     .prev_cost_d_1_7(d_1_out1_7),  // sfix10
                                     .prev_cost_d_1_8(d_1_out1_8),  // sfix10
                                     .prev_cost_d_1_9(d_1_out1_9),  // sfix10
                                     .prev_cost_d_1_10(d_1_out1_10),  // sfix10
                                     .prev_cost_d_1_11(d_1_out1_11),  // sfix10
                                     .prev_cost_d_1_12(d_1_out1_12),  // sfix10
                                     .prev_cost_d_1_13(d_1_out1_13),  // sfix10
                                     .prev_cost_d_1_14(d_1_out1_14),  // sfix10
                                     .prev_cost_d_1_15(d_1_out1_15)  // sfix10
                                     );

  assign d_1_out1[0] = d_1_out1_0;
  assign d_1_out1[1] = d_1_out1_1;
  assign d_1_out1[2] = d_1_out1_2;
  assign d_1_out1[3] = d_1_out1_3;
  assign d_1_out1[4] = d_1_out1_4;
  assign d_1_out1[5] = d_1_out1_5;
  assign d_1_out1[6] = d_1_out1_6;
  assign d_1_out1[7] = d_1_out1_7;
  assign d_1_out1[8] = d_1_out1_8;
  assign d_1_out1[9] = d_1_out1_9;
  assign d_1_out1[10] = d_1_out1_10;
  assign d_1_out1[11] = d_1_out1_11;
  assign d_1_out1[12] = d_1_out1_12;
  assign d_1_out1[13] = d_1_out1_13;
  assign d_1_out1[14] = d_1_out1_14;
  assign d_1_out1[15] = d_1_out1_15;

  SGBMHDLAl_ip_src_d_1_block2 u_d_1_1 (.prev_cost_d_0(Delay_out1[0]),  // sfix10
                                       .prev_cost_d_1(Delay_out1[1]),  // sfix10
                                       .prev_cost_d_2(Delay_out1[2]),  // sfix10
                                       .prev_cost_d_3(Delay_out1[3]),  // sfix10
                                       .prev_cost_d_4(Delay_out1[4]),  // sfix10
                                       .prev_cost_d_5(Delay_out1[5]),  // sfix10
                                       .prev_cost_d_6(Delay_out1[6]),  // sfix10
                                       .prev_cost_d_7(Delay_out1[7]),  // sfix10
                                       .prev_cost_d_8(Delay_out1[8]),  // sfix10
                                       .prev_cost_d_9(Delay_out1[9]),  // sfix10
                                       .prev_cost_d_10(Delay_out1[10]),  // sfix10
                                       .prev_cost_d_11(Delay_out1[11]),  // sfix10
                                       .prev_cost_d_12(Delay_out1[12]),  // sfix10
                                       .prev_cost_d_13(Delay_out1[13]),  // sfix10
                                       .prev_cost_d_14(Delay_out1[14]),  // sfix10
                                       .prev_cost_d_1_0(d_1_out1_0_1),  // sfix10
                                       .prev_cost_d_1_1(d_1_out1_1_1),  // sfix10
                                       .prev_cost_d_1_2(d_1_out1_2_1),  // sfix10
                                       .prev_cost_d_1_3(d_1_out1_3_1),  // sfix10
                                       .prev_cost_d_1_4(d_1_out1_4_1),  // sfix10
                                       .prev_cost_d_1_5(d_1_out1_5_1),  // sfix10
                                       .prev_cost_d_1_6(d_1_out1_6_1),  // sfix10
                                       .prev_cost_d_1_7(d_1_out1_7_1),  // sfix10
                                       .prev_cost_d_1_8(d_1_out1_8_1),  // sfix10
                                       .prev_cost_d_1_9(d_1_out1_9_1),  // sfix10
                                       .prev_cost_d_1_10(d_1_out1_10_1),  // sfix10
                                       .prev_cost_d_1_11(d_1_out1_11_1),  // sfix10
                                       .prev_cost_d_1_12(d_1_out1_12_1),  // sfix10
                                       .prev_cost_d_1_13(d_1_out1_13_1),  // sfix10
                                       .prev_cost_d_1_14(d_1_out1_14_1),  // sfix10
                                       .prev_cost_d_1_15(d_1_out1_15_1)  // sfix10
                                       );

  assign d_1_out1_16[0] = d_1_out1_0_1;
  assign d_1_out1_16[1] = d_1_out1_1_1;
  assign d_1_out1_16[2] = d_1_out1_2_1;
  assign d_1_out1_16[3] = d_1_out1_3_1;
  assign d_1_out1_16[4] = d_1_out1_4_1;
  assign d_1_out1_16[5] = d_1_out1_5_1;
  assign d_1_out1_16[6] = d_1_out1_6_1;
  assign d_1_out1_16[7] = d_1_out1_7_1;
  assign d_1_out1_16[8] = d_1_out1_8_1;
  assign d_1_out1_16[9] = d_1_out1_9_1;
  assign d_1_out1_16[10] = d_1_out1_10_1;
  assign d_1_out1_16[11] = d_1_out1_11_1;
  assign d_1_out1_16[12] = d_1_out1_12_1;
  assign d_1_out1_16[13] = d_1_out1_13_1;
  assign d_1_out1_16[14] = d_1_out1_14_1;
  assign d_1_out1_16[15] = d_1_out1_15_1;

  assign Switch32_out1[0] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[0] :
              minCostPath_out1_1[0]);
  assign Switch32_out1[1] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[1] :
              minCostPath_out1_1[1]);
  assign Switch32_out1[2] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[2] :
              minCostPath_out1_1[2]);
  assign Switch32_out1[3] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[3] :
              minCostPath_out1_1[3]);
  assign Switch32_out1[4] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[4] :
              minCostPath_out1_1[4]);
  assign Switch32_out1[5] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[5] :
              minCostPath_out1_1[5]);
  assign Switch32_out1[6] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[6] :
              minCostPath_out1_1[6]);
  assign Switch32_out1[7] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[7] :
              minCostPath_out1_1[7]);
  assign Switch32_out1[8] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[8] :
              minCostPath_out1_1[8]);
  assign Switch32_out1[9] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[9] :
              minCostPath_out1_1[9]);
  assign Switch32_out1[10] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[10] :
              minCostPath_out1_1[10]);
  assign Switch32_out1[11] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[11] :
              minCostPath_out1_1[11]);
  assign Switch32_out1[12] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[12] :
              minCostPath_out1_1[12]);
  assign Switch32_out1[13] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[13] :
              minCostPath_out1_1[13]);
  assign Switch32_out1[14] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[14] :
              minCostPath_out1_1[14]);
  assign Switch32_out1[15] = (enable == 1'b0 ? For_Each_Subsystem_out1_dtc[15] :
              minCostPath_out1_1[15]);



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1[0] <= 10'sb0000000000;
        Delay_out1[1] <= 10'sb0000000000;
        Delay_out1[2] <= 10'sb0000000000;
        Delay_out1[3] <= 10'sb0000000000;
        Delay_out1[4] <= 10'sb0000000000;
        Delay_out1[5] <= 10'sb0000000000;
        Delay_out1[6] <= 10'sb0000000000;
        Delay_out1[7] <= 10'sb0000000000;
        Delay_out1[8] <= 10'sb0000000000;
        Delay_out1[9] <= 10'sb0000000000;
        Delay_out1[10] <= 10'sb0000000000;
        Delay_out1[11] <= 10'sb0000000000;
        Delay_out1[12] <= 10'sb0000000000;
        Delay_out1[13] <= 10'sb0000000000;
        Delay_out1[14] <= 10'sb0000000000;
        Delay_out1[15] <= 10'sb0000000000;
      end
      else begin
        if (enb_gated) begin
          Delay_out1[0] <= Switch32_out1[0];
          Delay_out1[1] <= Switch32_out1[1];
          Delay_out1[2] <= Switch32_out1[2];
          Delay_out1[3] <= Switch32_out1[3];
          Delay_out1[4] <= Switch32_out1[4];
          Delay_out1[5] <= Switch32_out1[5];
          Delay_out1[6] <= Switch32_out1[6];
          Delay_out1[7] <= Switch32_out1[7];
          Delay_out1[8] <= Switch32_out1[8];
          Delay_out1[9] <= Switch32_out1[9];
          Delay_out1[10] <= Switch32_out1[10];
          Delay_out1[11] <= Switch32_out1[11];
          Delay_out1[12] <= Switch32_out1[12];
          Delay_out1[13] <= Switch32_out1[13];
          Delay_out1[14] <= Switch32_out1[14];
          Delay_out1[15] <= Switch32_out1[15];
        end
      end
    end



  generate
    genvar k;
    for(k = 0; k < 16; k = k + 1) begin : GEN_LABEL
        SGBMHDLAl_ip_src_minCostPath u_minCostPath (.matchingCost(matchCostIn[k]),  // ufix5
                                                    .prevCost_d(Delay_out1[k]),  // sfix10
                                                    .prevCost_d_1(d_1_out1_16[k]),  // sfix10
                                                    .prevCost_d_1_1(d_1_out1[k]),  // sfix10
                                                    .minPrevCost(MinMax1_out1),  // sfix10
                                                    .currCost(minCostPath_out1[k])  // sfix10
                                                    );
    end
  endgenerate

  assign minCostPath_out1_1[0] = minCostPath_out1[0];
  assign minCostPath_out1_1[1] = minCostPath_out1[1];
  assign minCostPath_out1_1[2] = minCostPath_out1[2];
  assign minCostPath_out1_1[3] = minCostPath_out1[3];
  assign minCostPath_out1_1[4] = minCostPath_out1[4];
  assign minCostPath_out1_1[5] = minCostPath_out1[5];
  assign minCostPath_out1_1[6] = minCostPath_out1[6];
  assign minCostPath_out1_1[7] = minCostPath_out1[7];
  assign minCostPath_out1_1[8] = minCostPath_out1[8];
  assign minCostPath_out1_1[9] = minCostPath_out1[9];
  assign minCostPath_out1_1[10] = minCostPath_out1[10];
  assign minCostPath_out1_1[11] = minCostPath_out1[11];
  assign minCostPath_out1_1[12] = minCostPath_out1[12];
  assign minCostPath_out1_1[13] = minCostPath_out1[13];
  assign minCostPath_out1_1[14] = minCostPath_out1[14];
  assign minCostPath_out1_1[15] = minCostPath_out1[15];

  always @(posedge clk or posedge reset)
    begin : Out1_hold_process
      if (reset == 1'b1) begin
        minCostPath_out1_hold[0] <= 10'sb0000000000;
        minCostPath_out1_hold[1] <= 10'sb0000000000;
        minCostPath_out1_hold[2] <= 10'sb0000000000;
        minCostPath_out1_hold[3] <= 10'sb0000000000;
        minCostPath_out1_hold[4] <= 10'sb0000000000;
        minCostPath_out1_hold[5] <= 10'sb0000000000;
        minCostPath_out1_hold[6] <= 10'sb0000000000;
        minCostPath_out1_hold[7] <= 10'sb0000000000;
        minCostPath_out1_hold[8] <= 10'sb0000000000;
        minCostPath_out1_hold[9] <= 10'sb0000000000;
        minCostPath_out1_hold[10] <= 10'sb0000000000;
        minCostPath_out1_hold[11] <= 10'sb0000000000;
        minCostPath_out1_hold[12] <= 10'sb0000000000;
        minCostPath_out1_hold[13] <= 10'sb0000000000;
        minCostPath_out1_hold[14] <= 10'sb0000000000;
        minCostPath_out1_hold[15] <= 10'sb0000000000;
      end
      else begin
        if (enb_gated) begin
          minCostPath_out1_hold[0] <= minCostPath_out1_1[0];
          minCostPath_out1_hold[1] <= minCostPath_out1_1[1];
          minCostPath_out1_hold[2] <= minCostPath_out1_1[2];
          minCostPath_out1_hold[3] <= minCostPath_out1_1[3];
          minCostPath_out1_hold[4] <= minCostPath_out1_1[4];
          minCostPath_out1_hold[5] <= minCostPath_out1_1[5];
          minCostPath_out1_hold[6] <= minCostPath_out1_1[6];
          minCostPath_out1_hold[7] <= minCostPath_out1_1[7];
          minCostPath_out1_hold[8] <= minCostPath_out1_1[8];
          minCostPath_out1_hold[9] <= minCostPath_out1_1[9];
          minCostPath_out1_hold[10] <= minCostPath_out1_1[10];
          minCostPath_out1_hold[11] <= minCostPath_out1_1[11];
          minCostPath_out1_hold[12] <= minCostPath_out1_1[12];
          minCostPath_out1_hold[13] <= minCostPath_out1_1[13];
          minCostPath_out1_hold[14] <= minCostPath_out1_1[14];
          minCostPath_out1_hold[15] <= minCostPath_out1_1[15];
        end
      end
    end



  assign Out1_0 = minCostPath_out1_hold[0];

  assign Out1_1 = minCostPath_out1_hold[1];

  assign Out1_2 = minCostPath_out1_hold[2];

  assign Out1_3 = minCostPath_out1_hold[3];

  assign Out1_4 = minCostPath_out1_hold[4];

  assign Out1_5 = minCostPath_out1_hold[5];

  assign Out1_6 = minCostPath_out1_hold[6];

  assign Out1_7 = minCostPath_out1_hold[7];

  assign Out1_8 = minCostPath_out1_hold[8];

  assign Out1_9 = minCostPath_out1_hold[9];

  assign Out1_10 = minCostPath_out1_hold[10];

  assign Out1_11 = minCostPath_out1_hold[11];

  assign Out1_12 = minCostPath_out1_hold[12];

  assign Out1_13 = minCostPath_out1_hold[13];

  assign Out1_14 = minCostPath_out1_hold[14];

  assign Out1_15 = minCostPath_out1_hold[15];

endmodule  // SGBMHDLAl_ip_src_rlSubsystem

