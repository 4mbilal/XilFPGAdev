// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_enabledTappedDelay.v
// Created: 2021-04-19 19:46:14
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_enabledTappedDelay
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/MatchingCost/HammDistA/enabledTappedDelay
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_enabledTappedDelay
          (clk,
           reset,
           enb,
           pixelIn,
           Enable,
           pixelOut_0,
           pixelOut_1,
           pixelOut_2,
           pixelOut_3,
           pixelOut_4,
           pixelOut_5,
           pixelOut_6,
           pixelOut_7,
           pixelOut_8,
           pixelOut_9,
           pixelOut_10,
           pixelOut_11,
           pixelOut_12,
           pixelOut_13,
           pixelOut_14,
           pixelOut_15);


  input   clk;
  input   reset;
  input   enb;
  input   [30:0] pixelIn;  // ufix31
  input   Enable;
  output  [30:0] pixelOut_0;  // ufix31
  output  [30:0] pixelOut_1;  // ufix31
  output  [30:0] pixelOut_2;  // ufix31
  output  [30:0] pixelOut_3;  // ufix31
  output  [30:0] pixelOut_4;  // ufix31
  output  [30:0] pixelOut_5;  // ufix31
  output  [30:0] pixelOut_6;  // ufix31
  output  [30:0] pixelOut_7;  // ufix31
  output  [30:0] pixelOut_8;  // ufix31
  output  [30:0] pixelOut_9;  // ufix31
  output  [30:0] pixelOut_10;  // ufix31
  output  [30:0] pixelOut_11;  // ufix31
  output  [30:0] pixelOut_12;  // ufix31
  output  [30:0] pixelOut_13;  // ufix31
  output  [30:0] pixelOut_14;  // ufix31
  output  [30:0] pixelOut_15;  // ufix31


  wire enb_gated;
  reg [30:0] Tapped_Delay_reg [0:14];  // ufix31 [15]
  wire [30:0] Tapped_Delay_reg_next [0:14];  // ufix31 [15]
  wire [30:0] Tapped_Delay_out1 [0:15];  // ufix31 [16]
  wire [30:0] Tapped_Delay_out1_bypass [0:15];  // ufix31 [16]
  reg [30:0] Tapped_Delay_out1_last_value [0:15];  // ufix31 [16]


  assign enb_gated = Enable && enb;

  always @(posedge clk or posedge reset)
    begin : Tapped_Delay_process
      if (reset == 1'b1) begin
        Tapped_Delay_reg[0] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[1] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[2] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[3] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[4] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[5] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[6] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[7] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[8] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[9] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[10] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[11] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[12] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[13] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_reg[14] <= 31'b0000000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Tapped_Delay_reg[0] <= Tapped_Delay_reg_next[0];
          Tapped_Delay_reg[1] <= Tapped_Delay_reg_next[1];
          Tapped_Delay_reg[2] <= Tapped_Delay_reg_next[2];
          Tapped_Delay_reg[3] <= Tapped_Delay_reg_next[3];
          Tapped_Delay_reg[4] <= Tapped_Delay_reg_next[4];
          Tapped_Delay_reg[5] <= Tapped_Delay_reg_next[5];
          Tapped_Delay_reg[6] <= Tapped_Delay_reg_next[6];
          Tapped_Delay_reg[7] <= Tapped_Delay_reg_next[7];
          Tapped_Delay_reg[8] <= Tapped_Delay_reg_next[8];
          Tapped_Delay_reg[9] <= Tapped_Delay_reg_next[9];
          Tapped_Delay_reg[10] <= Tapped_Delay_reg_next[10];
          Tapped_Delay_reg[11] <= Tapped_Delay_reg_next[11];
          Tapped_Delay_reg[12] <= Tapped_Delay_reg_next[12];
          Tapped_Delay_reg[13] <= Tapped_Delay_reg_next[13];
          Tapped_Delay_reg[14] <= Tapped_Delay_reg_next[14];
        end
      end
    end

  assign Tapped_Delay_out1[0] = pixelIn;
  assign Tapped_Delay_out1[1] = Tapped_Delay_reg[0];
  assign Tapped_Delay_out1[2] = Tapped_Delay_reg[1];
  assign Tapped_Delay_out1[3] = Tapped_Delay_reg[2];
  assign Tapped_Delay_out1[4] = Tapped_Delay_reg[3];
  assign Tapped_Delay_out1[5] = Tapped_Delay_reg[4];
  assign Tapped_Delay_out1[6] = Tapped_Delay_reg[5];
  assign Tapped_Delay_out1[7] = Tapped_Delay_reg[6];
  assign Tapped_Delay_out1[8] = Tapped_Delay_reg[7];
  assign Tapped_Delay_out1[9] = Tapped_Delay_reg[8];
  assign Tapped_Delay_out1[10] = Tapped_Delay_reg[9];
  assign Tapped_Delay_out1[11] = Tapped_Delay_reg[10];
  assign Tapped_Delay_out1[12] = Tapped_Delay_reg[11];
  assign Tapped_Delay_out1[13] = Tapped_Delay_reg[12];
  assign Tapped_Delay_out1[14] = Tapped_Delay_reg[13];
  assign Tapped_Delay_out1[15] = Tapped_Delay_reg[14];
  assign Tapped_Delay_reg_next[0] = pixelIn;
  assign Tapped_Delay_reg_next[1] = Tapped_Delay_reg[0];
  assign Tapped_Delay_reg_next[2] = Tapped_Delay_reg[1];
  assign Tapped_Delay_reg_next[3] = Tapped_Delay_reg[2];
  assign Tapped_Delay_reg_next[4] = Tapped_Delay_reg[3];
  assign Tapped_Delay_reg_next[5] = Tapped_Delay_reg[4];
  assign Tapped_Delay_reg_next[6] = Tapped_Delay_reg[5];
  assign Tapped_Delay_reg_next[7] = Tapped_Delay_reg[6];
  assign Tapped_Delay_reg_next[8] = Tapped_Delay_reg[7];
  assign Tapped_Delay_reg_next[9] = Tapped_Delay_reg[8];
  assign Tapped_Delay_reg_next[10] = Tapped_Delay_reg[9];
  assign Tapped_Delay_reg_next[11] = Tapped_Delay_reg[10];
  assign Tapped_Delay_reg_next[12] = Tapped_Delay_reg[11];
  assign Tapped_Delay_reg_next[13] = Tapped_Delay_reg[12];
  assign Tapped_Delay_reg_next[14] = Tapped_Delay_reg[13];



  always @(posedge clk or posedge reset)
    begin : pixelOut_bypass_process
      if (reset == 1'b1) begin
        Tapped_Delay_out1_last_value[0] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[1] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[2] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[3] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[4] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[5] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[6] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[7] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[8] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[9] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[10] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[11] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[12] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[13] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[14] <= 31'b0000000000000000000000000000000;
        Tapped_Delay_out1_last_value[15] <= 31'b0000000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Tapped_Delay_out1_last_value[0] <= Tapped_Delay_out1_bypass[0];
          Tapped_Delay_out1_last_value[1] <= Tapped_Delay_out1_bypass[1];
          Tapped_Delay_out1_last_value[2] <= Tapped_Delay_out1_bypass[2];
          Tapped_Delay_out1_last_value[3] <= Tapped_Delay_out1_bypass[3];
          Tapped_Delay_out1_last_value[4] <= Tapped_Delay_out1_bypass[4];
          Tapped_Delay_out1_last_value[5] <= Tapped_Delay_out1_bypass[5];
          Tapped_Delay_out1_last_value[6] <= Tapped_Delay_out1_bypass[6];
          Tapped_Delay_out1_last_value[7] <= Tapped_Delay_out1_bypass[7];
          Tapped_Delay_out1_last_value[8] <= Tapped_Delay_out1_bypass[8];
          Tapped_Delay_out1_last_value[9] <= Tapped_Delay_out1_bypass[9];
          Tapped_Delay_out1_last_value[10] <= Tapped_Delay_out1_bypass[10];
          Tapped_Delay_out1_last_value[11] <= Tapped_Delay_out1_bypass[11];
          Tapped_Delay_out1_last_value[12] <= Tapped_Delay_out1_bypass[12];
          Tapped_Delay_out1_last_value[13] <= Tapped_Delay_out1_bypass[13];
          Tapped_Delay_out1_last_value[14] <= Tapped_Delay_out1_bypass[14];
          Tapped_Delay_out1_last_value[15] <= Tapped_Delay_out1_bypass[15];
        end
      end
    end



  assign Tapped_Delay_out1_bypass[0] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[0] :
              Tapped_Delay_out1[0]);
  assign Tapped_Delay_out1_bypass[1] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[1] :
              Tapped_Delay_out1[1]);
  assign Tapped_Delay_out1_bypass[2] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[2] :
              Tapped_Delay_out1[2]);
  assign Tapped_Delay_out1_bypass[3] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[3] :
              Tapped_Delay_out1[3]);
  assign Tapped_Delay_out1_bypass[4] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[4] :
              Tapped_Delay_out1[4]);
  assign Tapped_Delay_out1_bypass[5] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[5] :
              Tapped_Delay_out1[5]);
  assign Tapped_Delay_out1_bypass[6] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[6] :
              Tapped_Delay_out1[6]);
  assign Tapped_Delay_out1_bypass[7] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[7] :
              Tapped_Delay_out1[7]);
  assign Tapped_Delay_out1_bypass[8] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[8] :
              Tapped_Delay_out1[8]);
  assign Tapped_Delay_out1_bypass[9] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[9] :
              Tapped_Delay_out1[9]);
  assign Tapped_Delay_out1_bypass[10] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[10] :
              Tapped_Delay_out1[10]);
  assign Tapped_Delay_out1_bypass[11] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[11] :
              Tapped_Delay_out1[11]);
  assign Tapped_Delay_out1_bypass[12] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[12] :
              Tapped_Delay_out1[12]);
  assign Tapped_Delay_out1_bypass[13] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[13] :
              Tapped_Delay_out1[13]);
  assign Tapped_Delay_out1_bypass[14] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[14] :
              Tapped_Delay_out1[14]);
  assign Tapped_Delay_out1_bypass[15] = (Enable == 1'b0 ? Tapped_Delay_out1_last_value[15] :
              Tapped_Delay_out1[15]);



  assign pixelOut_0 = Tapped_Delay_out1_bypass[0];

  assign pixelOut_1 = Tapped_Delay_out1_bypass[1];

  assign pixelOut_2 = Tapped_Delay_out1_bypass[2];

  assign pixelOut_3 = Tapped_Delay_out1_bypass[3];

  assign pixelOut_4 = Tapped_Delay_out1_bypass[4];

  assign pixelOut_5 = Tapped_Delay_out1_bypass[5];

  assign pixelOut_6 = Tapped_Delay_out1_bypass[6];

  assign pixelOut_7 = Tapped_Delay_out1_bypass[7];

  assign pixelOut_8 = Tapped_Delay_out1_bypass[8];

  assign pixelOut_9 = Tapped_Delay_out1_bypass[9];

  assign pixelOut_10 = Tapped_Delay_out1_bypass[10];

  assign pixelOut_11 = Tapped_Delay_out1_bypass[11];

  assign pixelOut_12 = Tapped_Delay_out1_bypass[12];

  assign pixelOut_13 = Tapped_Delay_out1_bypass[13];

  assign pixelOut_14 = Tapped_Delay_out1_bypass[14];

  assign pixelOut_15 = Tapped_Delay_out1_bypass[15];

endmodule  // SGBMHDLAl_ip_src_enabledTappedDelay

