// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_UniquenessFcn.v
// Created: 2021-04-19 19:46:15
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_UniquenessFcn
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/PostProcessing/UniquenessFcn
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_UniquenessFcn
          (clk,
           reset,
           enb,
           totalCostIn_0,
           totalCostIn_1,
           totalCostIn_2,
           totalCostIn_3,
           totalCostIn_4,
           totalCostIn_5,
           totalCostIn_6,
           totalCostIn_7,
           totalCostIn_8,
           totalCostIn_9,
           totalCostIn_10,
           totalCostIn_11,
           totalCostIn_12,
           totalCostIn_13,
           totalCostIn_14,
           totalCostIn_15,
           minIndexVal,
           minIndex,
           validIn,
           UNF,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [12:0] totalCostIn_0;  // sfix13
  input   signed [12:0] totalCostIn_1;  // sfix13
  input   signed [12:0] totalCostIn_2;  // sfix13
  input   signed [12:0] totalCostIn_3;  // sfix13
  input   signed [12:0] totalCostIn_4;  // sfix13
  input   signed [12:0] totalCostIn_5;  // sfix13
  input   signed [12:0] totalCostIn_6;  // sfix13
  input   signed [12:0] totalCostIn_7;  // sfix13
  input   signed [12:0] totalCostIn_8;  // sfix13
  input   signed [12:0] totalCostIn_9;  // sfix13
  input   signed [12:0] totalCostIn_10;  // sfix13
  input   signed [12:0] totalCostIn_11;  // sfix13
  input   signed [12:0] totalCostIn_12;  // sfix13
  input   signed [12:0] totalCostIn_13;  // sfix13
  input   signed [12:0] totalCostIn_14;  // sfix13
  input   signed [12:0] totalCostIn_15;  // sfix13
  input   signed [12:0] minIndexVal;  // sfix13
  input   [7:0] minIndex;  // uint8
  input   validIn;
  output  UNF;
  output  validOut;


  wire signed [12:0] totalCostIn [0:15];  // sfix13 [16]
  wire [7:0] Constant2_out1;  // uint8
  reg signed [12:0] Delay134_out1 [0:15];  // sfix13 [16]
  wire [7:0] Constant_out1;  // uint8
  wire signed [8:0] Add_1;  // sfix9
  wire signed [8:0] Add_2;  // sfix9
  wire signed [8:0] Add_out1;  // sfix9
  reg signed [12:0] Delay135_out1;  // sfix13
  wire [7:0] Constant3_out1;  // uint8
  wire signed [21:0] Product1_mul_temp;  // sfix22
  wire signed [8:0] Product1_1;  // sfix9
  wire signed [20:0] Product1_out1;  // sfix21
  reg signed [20:0] Delay131_out1;  // sfix21
  wire [0:15] For_Each_Subsystem_out1;  // boolean [16]
  wire [0:15] For_Each_Subsystem_out1_1;  // boolean [16]
  reg  [0:15] Delay_out1;  // boolean [16]
  wire Delay_out1_0;
  wire [7:0] Index_out1 [0:15];  // uint8 [16]
  wire [0:15] For_Each_Subsystem1_out1;  // boolean [16]
  wire [0:15] For_Each_Subsystem1_out1_1;  // boolean [16]
  reg  [0:15] Delay1_out1;  // boolean [16]
  wire Delay_out1_1;
  wire Delay_out1_2;
  wire Delay_out1_3;
  wire Delay_out1_4;
  wire Delay_out1_5;
  wire Delay_out1_6;
  wire Delay_out1_7;
  wire Delay_out1_8;
  wire Delay_out1_9;
  wire Delay_out1_10;
  wire Delay_out1_11;
  wire Delay_out1_12;
  wire Delay_out1_13;
  wire Delay_out1_14;
  wire Delay_out1_15;
  wire Delay1_out1_0;
  wire Delay_out1_0_1;
  wire Delay1_out1_1;
  wire Delay_out1_1_1;
  wire Delay1_out1_2;
  wire Delay_out1_2_1;
  wire Delay1_out1_3;
  wire Delay_out1_3_1;
  wire Delay1_out1_4;
  wire Delay_out1_4_1;
  wire Delay1_out1_5;
  wire Delay_out1_5_1;
  wire Delay1_out1_6;
  wire Delay_out1_6_1;
  wire Delay1_out1_7;
  wire Delay_out1_7_1;
  wire Delay1_out1_8;
  wire Delay_out1_8_1;
  wire Delay1_out1_9;
  wire Delay_out1_9_1;
  wire Delay1_out1_10;
  wire Delay_out1_10_1;
  wire Delay1_out1_11;
  wire Delay_out1_11_1;
  wire Delay1_out1_12;
  wire Delay_out1_12_1;
  wire Delay1_out1_13;
  wire Delay_out1_13_1;
  wire Delay1_out1_14;
  wire Delay_out1_14_1;
  wire Delay1_out1_15;
  wire Delay_out1_15_1;
  wire [0:15] Logical_Operator_out1;  // boolean [16]
  reg  [0:15] Delay2_out1;  // boolean [16]
  wire Delay2_out1_0;
  wire Delay2_out1_1;
  wire Delay2_out1_2;
  wire Delay2_out1_3;
  wire Delay2_out1_4;
  wire Delay2_out1_5;
  wire Delay2_out1_6;
  wire Delay2_out1_7;
  wire Delay2_out1_8;
  wire Delay2_out1_9;
  wire Delay2_out1_10;
  wire Delay2_out1_11;
  wire Delay2_out1_12;
  wire Delay2_out1_13;
  wire Delay2_out1_14;
  wire Delay2_out1_15;
  wire Logical_Operator1_out1;
  reg  Delay4_out1;
  reg  [0:4] Delay3_reg;  // ufix1 [5]
  wire [0:4] Delay3_reg_next;  // ufix1 [5]
  wire Delay3_out1;


  assign totalCostIn[0] = totalCostIn_0;
  assign totalCostIn[1] = totalCostIn_1;
  assign totalCostIn[2] = totalCostIn_2;
  assign totalCostIn[3] = totalCostIn_3;
  assign totalCostIn[4] = totalCostIn_4;
  assign totalCostIn[5] = totalCostIn_5;
  assign totalCostIn[6] = totalCostIn_6;
  assign totalCostIn[7] = totalCostIn_7;
  assign totalCostIn[8] = totalCostIn_8;
  assign totalCostIn[9] = totalCostIn_9;
  assign totalCostIn[10] = totalCostIn_10;
  assign totalCostIn[11] = totalCostIn_11;
  assign totalCostIn[12] = totalCostIn_12;
  assign totalCostIn[13] = totalCostIn_13;
  assign totalCostIn[14] = totalCostIn_14;
  assign totalCostIn[15] = totalCostIn_15;

  assign Constant2_out1 = 8'b01100100;



  always @(posedge clk or posedge reset)
    begin : Delay134_process
      if (reset == 1'b1) begin
        Delay134_out1[0] <= 13'sb0000000000000;
        Delay134_out1[1] <= 13'sb0000000000000;
        Delay134_out1[2] <= 13'sb0000000000000;
        Delay134_out1[3] <= 13'sb0000000000000;
        Delay134_out1[4] <= 13'sb0000000000000;
        Delay134_out1[5] <= 13'sb0000000000000;
        Delay134_out1[6] <= 13'sb0000000000000;
        Delay134_out1[7] <= 13'sb0000000000000;
        Delay134_out1[8] <= 13'sb0000000000000;
        Delay134_out1[9] <= 13'sb0000000000000;
        Delay134_out1[10] <= 13'sb0000000000000;
        Delay134_out1[11] <= 13'sb0000000000000;
        Delay134_out1[12] <= 13'sb0000000000000;
        Delay134_out1[13] <= 13'sb0000000000000;
        Delay134_out1[14] <= 13'sb0000000000000;
        Delay134_out1[15] <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay134_out1[0] <= totalCostIn[0];
          Delay134_out1[1] <= totalCostIn[1];
          Delay134_out1[2] <= totalCostIn[2];
          Delay134_out1[3] <= totalCostIn[3];
          Delay134_out1[4] <= totalCostIn[4];
          Delay134_out1[5] <= totalCostIn[5];
          Delay134_out1[6] <= totalCostIn[6];
          Delay134_out1[7] <= totalCostIn[7];
          Delay134_out1[8] <= totalCostIn[8];
          Delay134_out1[9] <= totalCostIn[9];
          Delay134_out1[10] <= totalCostIn[10];
          Delay134_out1[11] <= totalCostIn[11];
          Delay134_out1[12] <= totalCostIn[12];
          Delay134_out1[13] <= totalCostIn[13];
          Delay134_out1[14] <= totalCostIn[14];
          Delay134_out1[15] <= totalCostIn[15];
        end
      end
    end



  assign Constant_out1 = 8'b00000101;



  assign Add_1 = {1'b0, Constant2_out1};
  assign Add_2 = {1'b0, Constant_out1};
  assign Add_out1 = Add_1 - Add_2;



  always @(posedge clk or posedge reset)
    begin : Delay135_process
      if (reset == 1'b1) begin
        Delay135_out1 <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay135_out1 <= minIndexVal;
        end
      end
    end



  assign Constant3_out1 = 8'b01100100;



  assign Product1_1 = {1'b0, Constant3_out1};
  assign Product1_mul_temp = Delay135_out1 * Product1_1;
  assign Product1_out1 = Product1_mul_temp[20:0];



  always @(posedge clk or posedge reset)
    begin : Delay131_process
      if (reset == 1'b1) begin
        Delay131_out1 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay131_out1 <= Product1_out1;
        end
      end
    end



  generate
    genvar k1;
    for(k1 = 0; k1 < 16; k1 = k1 + 1) begin : GEN_LABEL1
        SGBMHDLAl_ip_src_For_Each_Subsystem_block7 u_For_Each_Subsystem (.clk(clk),
                                                                         .reset(reset),
                                                                         .enb(enb),
                                                                         .total_cost(Delay134_out1[k1]),  // sfix13
                                                                         .total_cost1(Add_out1),  // sfix9
                                                                         .min_index_val(Delay131_out1),  // sfix21
                                                                         .Out1(For_Each_Subsystem_out1[k1])
                                                                         );
    end
  endgenerate

  assign For_Each_Subsystem_out1_1[0] = For_Each_Subsystem_out1[0];
  assign For_Each_Subsystem_out1_1[1] = For_Each_Subsystem_out1[1];
  assign For_Each_Subsystem_out1_1[2] = For_Each_Subsystem_out1[2];
  assign For_Each_Subsystem_out1_1[3] = For_Each_Subsystem_out1[3];
  assign For_Each_Subsystem_out1_1[4] = For_Each_Subsystem_out1[4];
  assign For_Each_Subsystem_out1_1[5] = For_Each_Subsystem_out1[5];
  assign For_Each_Subsystem_out1_1[6] = For_Each_Subsystem_out1[6];
  assign For_Each_Subsystem_out1_1[7] = For_Each_Subsystem_out1[7];
  assign For_Each_Subsystem_out1_1[8] = For_Each_Subsystem_out1[8];
  assign For_Each_Subsystem_out1_1[9] = For_Each_Subsystem_out1[9];
  assign For_Each_Subsystem_out1_1[10] = For_Each_Subsystem_out1[10];
  assign For_Each_Subsystem_out1_1[11] = For_Each_Subsystem_out1[11];
  assign For_Each_Subsystem_out1_1[12] = For_Each_Subsystem_out1[12];
  assign For_Each_Subsystem_out1_1[13] = For_Each_Subsystem_out1[13];
  assign For_Each_Subsystem_out1_1[14] = For_Each_Subsystem_out1[14];
  assign For_Each_Subsystem_out1_1[15] = For_Each_Subsystem_out1[15];

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1[0] <= 1'b0;
        Delay_out1[1] <= 1'b0;
        Delay_out1[2] <= 1'b0;
        Delay_out1[3] <= 1'b0;
        Delay_out1[4] <= 1'b0;
        Delay_out1[5] <= 1'b0;
        Delay_out1[6] <= 1'b0;
        Delay_out1[7] <= 1'b0;
        Delay_out1[8] <= 1'b0;
        Delay_out1[9] <= 1'b0;
        Delay_out1[10] <= 1'b0;
        Delay_out1[11] <= 1'b0;
        Delay_out1[12] <= 1'b0;
        Delay_out1[13] <= 1'b0;
        Delay_out1[14] <= 1'b0;
        Delay_out1[15] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1[0] <= For_Each_Subsystem_out1_1[0];
          Delay_out1[1] <= For_Each_Subsystem_out1_1[1];
          Delay_out1[2] <= For_Each_Subsystem_out1_1[2];
          Delay_out1[3] <= For_Each_Subsystem_out1_1[3];
          Delay_out1[4] <= For_Each_Subsystem_out1_1[4];
          Delay_out1[5] <= For_Each_Subsystem_out1_1[5];
          Delay_out1[6] <= For_Each_Subsystem_out1_1[6];
          Delay_out1[7] <= For_Each_Subsystem_out1_1[7];
          Delay_out1[8] <= For_Each_Subsystem_out1_1[8];
          Delay_out1[9] <= For_Each_Subsystem_out1_1[9];
          Delay_out1[10] <= For_Each_Subsystem_out1_1[10];
          Delay_out1[11] <= For_Each_Subsystem_out1_1[11];
          Delay_out1[12] <= For_Each_Subsystem_out1_1[12];
          Delay_out1[13] <= For_Each_Subsystem_out1_1[13];
          Delay_out1[14] <= For_Each_Subsystem_out1_1[14];
          Delay_out1[15] <= For_Each_Subsystem_out1_1[15];
        end
      end
    end



  assign Delay_out1_0 = Delay_out1[0];

  assign Index_out1[0] = 8'b00000001;
  assign Index_out1[1] = 8'b00000010;
  assign Index_out1[2] = 8'b00000011;
  assign Index_out1[3] = 8'b00000100;
  assign Index_out1[4] = 8'b00000101;
  assign Index_out1[5] = 8'b00000110;
  assign Index_out1[6] = 8'b00000111;
  assign Index_out1[7] = 8'b00001000;
  assign Index_out1[8] = 8'b00001001;
  assign Index_out1[9] = 8'b00001010;
  assign Index_out1[10] = 8'b00001011;
  assign Index_out1[11] = 8'b00001100;
  assign Index_out1[12] = 8'b00001101;
  assign Index_out1[13] = 8'b00001110;
  assign Index_out1[14] = 8'b00001111;
  assign Index_out1[15] = 8'b00010000;



  generate
    genvar k;
    for(k = 0; k < 16; k = k + 1) begin : GEN_LABEL
        SGBMHDLAl_ip_src_For_Each_Subsystem1_block u_For_Each_Subsystem1 (.clk(clk),
                                                                          .reset(reset),
                                                                          .enb(enb),
                                                                          .min_Index(minIndex),  // uint8
                                                                          .Index(Index_out1[k]),  // uint8
                                                                          .Out1(For_Each_Subsystem1_out1[k])
                                                                          );
    end
  endgenerate

  assign For_Each_Subsystem1_out1_1[0] = For_Each_Subsystem1_out1[0];
  assign For_Each_Subsystem1_out1_1[1] = For_Each_Subsystem1_out1[1];
  assign For_Each_Subsystem1_out1_1[2] = For_Each_Subsystem1_out1[2];
  assign For_Each_Subsystem1_out1_1[3] = For_Each_Subsystem1_out1[3];
  assign For_Each_Subsystem1_out1_1[4] = For_Each_Subsystem1_out1[4];
  assign For_Each_Subsystem1_out1_1[5] = For_Each_Subsystem1_out1[5];
  assign For_Each_Subsystem1_out1_1[6] = For_Each_Subsystem1_out1[6];
  assign For_Each_Subsystem1_out1_1[7] = For_Each_Subsystem1_out1[7];
  assign For_Each_Subsystem1_out1_1[8] = For_Each_Subsystem1_out1[8];
  assign For_Each_Subsystem1_out1_1[9] = For_Each_Subsystem1_out1[9];
  assign For_Each_Subsystem1_out1_1[10] = For_Each_Subsystem1_out1[10];
  assign For_Each_Subsystem1_out1_1[11] = For_Each_Subsystem1_out1[11];
  assign For_Each_Subsystem1_out1_1[12] = For_Each_Subsystem1_out1[12];
  assign For_Each_Subsystem1_out1_1[13] = For_Each_Subsystem1_out1[13];
  assign For_Each_Subsystem1_out1_1[14] = For_Each_Subsystem1_out1[14];
  assign For_Each_Subsystem1_out1_1[15] = For_Each_Subsystem1_out1[15];

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1[0] <= 1'b0;
        Delay1_out1[1] <= 1'b0;
        Delay1_out1[2] <= 1'b0;
        Delay1_out1[3] <= 1'b0;
        Delay1_out1[4] <= 1'b0;
        Delay1_out1[5] <= 1'b0;
        Delay1_out1[6] <= 1'b0;
        Delay1_out1[7] <= 1'b0;
        Delay1_out1[8] <= 1'b0;
        Delay1_out1[9] <= 1'b0;
        Delay1_out1[10] <= 1'b0;
        Delay1_out1[11] <= 1'b0;
        Delay1_out1[12] <= 1'b0;
        Delay1_out1[13] <= 1'b0;
        Delay1_out1[14] <= 1'b0;
        Delay1_out1[15] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1[0] <= For_Each_Subsystem1_out1_1[0];
          Delay1_out1[1] <= For_Each_Subsystem1_out1_1[1];
          Delay1_out1[2] <= For_Each_Subsystem1_out1_1[2];
          Delay1_out1[3] <= For_Each_Subsystem1_out1_1[3];
          Delay1_out1[4] <= For_Each_Subsystem1_out1_1[4];
          Delay1_out1[5] <= For_Each_Subsystem1_out1_1[5];
          Delay1_out1[6] <= For_Each_Subsystem1_out1_1[6];
          Delay1_out1[7] <= For_Each_Subsystem1_out1_1[7];
          Delay1_out1[8] <= For_Each_Subsystem1_out1_1[8];
          Delay1_out1[9] <= For_Each_Subsystem1_out1_1[9];
          Delay1_out1[10] <= For_Each_Subsystem1_out1_1[10];
          Delay1_out1[11] <= For_Each_Subsystem1_out1_1[11];
          Delay1_out1[12] <= For_Each_Subsystem1_out1_1[12];
          Delay1_out1[13] <= For_Each_Subsystem1_out1_1[13];
          Delay1_out1[14] <= For_Each_Subsystem1_out1_1[14];
          Delay1_out1[15] <= For_Each_Subsystem1_out1_1[15];
        end
      end
    end



  assign Delay_out1_1 = Delay_out1[1];

  assign Delay_out1_2 = Delay_out1[2];

  assign Delay_out1_3 = Delay_out1[3];

  assign Delay_out1_4 = Delay_out1[4];

  assign Delay_out1_5 = Delay_out1[5];

  assign Delay_out1_6 = Delay_out1[6];

  assign Delay_out1_7 = Delay_out1[7];

  assign Delay_out1_8 = Delay_out1[8];

  assign Delay_out1_9 = Delay_out1[9];

  assign Delay_out1_10 = Delay_out1[10];

  assign Delay_out1_11 = Delay_out1[11];

  assign Delay_out1_12 = Delay_out1[12];

  assign Delay_out1_13 = Delay_out1[13];

  assign Delay_out1_14 = Delay_out1[14];

  assign Delay_out1_15 = Delay_out1[15];

  assign Delay1_out1_0 = Delay1_out1[0];

  assign Delay_out1_0_1 = Delay_out1_0 & Delay1_out1_0;



  assign Delay1_out1_1 = Delay1_out1[1];

  assign Delay_out1_1_1 = Delay_out1_1 & Delay1_out1_1;



  assign Delay1_out1_2 = Delay1_out1[2];

  assign Delay_out1_2_1 = Delay_out1_2 & Delay1_out1_2;



  assign Delay1_out1_3 = Delay1_out1[3];

  assign Delay_out1_3_1 = Delay_out1_3 & Delay1_out1_3;



  assign Delay1_out1_4 = Delay1_out1[4];

  assign Delay_out1_4_1 = Delay_out1_4 & Delay1_out1_4;



  assign Delay1_out1_5 = Delay1_out1[5];

  assign Delay_out1_5_1 = Delay_out1_5 & Delay1_out1_5;



  assign Delay1_out1_6 = Delay1_out1[6];

  assign Delay_out1_6_1 = Delay_out1_6 & Delay1_out1_6;



  assign Delay1_out1_7 = Delay1_out1[7];

  assign Delay_out1_7_1 = Delay_out1_7 & Delay1_out1_7;



  assign Delay1_out1_8 = Delay1_out1[8];

  assign Delay_out1_8_1 = Delay_out1_8 & Delay1_out1_8;



  assign Delay1_out1_9 = Delay1_out1[9];

  assign Delay_out1_9_1 = Delay_out1_9 & Delay1_out1_9;



  assign Delay1_out1_10 = Delay1_out1[10];

  assign Delay_out1_10_1 = Delay_out1_10 & Delay1_out1_10;



  assign Delay1_out1_11 = Delay1_out1[11];

  assign Delay_out1_11_1 = Delay_out1_11 & Delay1_out1_11;



  assign Delay1_out1_12 = Delay1_out1[12];

  assign Delay_out1_12_1 = Delay_out1_12 & Delay1_out1_12;



  assign Delay1_out1_13 = Delay1_out1[13];

  assign Delay_out1_13_1 = Delay_out1_13 & Delay1_out1_13;



  assign Delay1_out1_14 = Delay1_out1[14];

  assign Delay_out1_14_1 = Delay_out1_14 & Delay1_out1_14;



  assign Delay1_out1_15 = Delay1_out1[15];

  assign Delay_out1_15_1 = Delay_out1_15 & Delay1_out1_15;



  assign Logical_Operator_out1[0] = Delay_out1_0_1;
  assign Logical_Operator_out1[1] = Delay_out1_1_1;
  assign Logical_Operator_out1[2] = Delay_out1_2_1;
  assign Logical_Operator_out1[3] = Delay_out1_3_1;
  assign Logical_Operator_out1[4] = Delay_out1_4_1;
  assign Logical_Operator_out1[5] = Delay_out1_5_1;
  assign Logical_Operator_out1[6] = Delay_out1_6_1;
  assign Logical_Operator_out1[7] = Delay_out1_7_1;
  assign Logical_Operator_out1[8] = Delay_out1_8_1;
  assign Logical_Operator_out1[9] = Delay_out1_9_1;
  assign Logical_Operator_out1[10] = Delay_out1_10_1;
  assign Logical_Operator_out1[11] = Delay_out1_11_1;
  assign Logical_Operator_out1[12] = Delay_out1_12_1;
  assign Logical_Operator_out1[13] = Delay_out1_13_1;
  assign Logical_Operator_out1[14] = Delay_out1_14_1;
  assign Logical_Operator_out1[15] = Delay_out1_15_1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1[0] <= 1'b0;
        Delay2_out1[1] <= 1'b0;
        Delay2_out1[2] <= 1'b0;
        Delay2_out1[3] <= 1'b0;
        Delay2_out1[4] <= 1'b0;
        Delay2_out1[5] <= 1'b0;
        Delay2_out1[6] <= 1'b0;
        Delay2_out1[7] <= 1'b0;
        Delay2_out1[8] <= 1'b0;
        Delay2_out1[9] <= 1'b0;
        Delay2_out1[10] <= 1'b0;
        Delay2_out1[11] <= 1'b0;
        Delay2_out1[12] <= 1'b0;
        Delay2_out1[13] <= 1'b0;
        Delay2_out1[14] <= 1'b0;
        Delay2_out1[15] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1[0] <= Logical_Operator_out1[0];
          Delay2_out1[1] <= Logical_Operator_out1[1];
          Delay2_out1[2] <= Logical_Operator_out1[2];
          Delay2_out1[3] <= Logical_Operator_out1[3];
          Delay2_out1[4] <= Logical_Operator_out1[4];
          Delay2_out1[5] <= Logical_Operator_out1[5];
          Delay2_out1[6] <= Logical_Operator_out1[6];
          Delay2_out1[7] <= Logical_Operator_out1[7];
          Delay2_out1[8] <= Logical_Operator_out1[8];
          Delay2_out1[9] <= Logical_Operator_out1[9];
          Delay2_out1[10] <= Logical_Operator_out1[10];
          Delay2_out1[11] <= Logical_Operator_out1[11];
          Delay2_out1[12] <= Logical_Operator_out1[12];
          Delay2_out1[13] <= Logical_Operator_out1[13];
          Delay2_out1[14] <= Logical_Operator_out1[14];
          Delay2_out1[15] <= Logical_Operator_out1[15];
        end
      end
    end



  assign Delay2_out1_0 = Delay2_out1[0];

  assign Delay2_out1_1 = Delay2_out1[1];

  assign Delay2_out1_2 = Delay2_out1[2];

  assign Delay2_out1_3 = Delay2_out1[3];

  assign Delay2_out1_4 = Delay2_out1[4];

  assign Delay2_out1_5 = Delay2_out1[5];

  assign Delay2_out1_6 = Delay2_out1[6];

  assign Delay2_out1_7 = Delay2_out1[7];

  assign Delay2_out1_8 = Delay2_out1[8];

  assign Delay2_out1_9 = Delay2_out1[9];

  assign Delay2_out1_10 = Delay2_out1[10];

  assign Delay2_out1_11 = Delay2_out1[11];

  assign Delay2_out1_12 = Delay2_out1[12];

  assign Delay2_out1_13 = Delay2_out1[13];

  assign Delay2_out1_14 = Delay2_out1[14];

  assign Delay2_out1_15 = Delay2_out1[15];

  assign Logical_Operator1_out1 = Delay2_out1_15 | (Delay2_out1_14 | (Delay2_out1_13 | (Delay2_out1_12 | (Delay2_out1_11 | (Delay2_out1_10 | (Delay2_out1_9 | (Delay2_out1_8 | (Delay2_out1_7 | (Delay2_out1_6 | (Delay2_out1_5 | (Delay2_out1_4 | (Delay2_out1_3 | (Delay2_out1_2 | (Delay2_out1_0 | Delay2_out1_1))))))))))))));



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Logical_Operator1_out1;
        end
      end
    end



  assign UNF = Delay4_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg[0] <= 1'b0;
        Delay3_reg[1] <= 1'b0;
        Delay3_reg[2] <= 1'b0;
        Delay3_reg[3] <= 1'b0;
        Delay3_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
          Delay3_reg[2] <= Delay3_reg_next[2];
          Delay3_reg[3] <= Delay3_reg_next[3];
          Delay3_reg[4] <= Delay3_reg_next[4];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[4];
  assign Delay3_reg_next[0] = validIn;
  assign Delay3_reg_next[1] = Delay3_reg[0];
  assign Delay3_reg_next[2] = Delay3_reg[1];
  assign Delay3_reg_next[3] = Delay3_reg[2];
  assign Delay3_reg_next[4] = Delay3_reg[3];



  assign validOut = Delay3_out1;

endmodule  // SGBMHDLAl_ip_src_UniquenessFcn

