// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_TopLeftToBottomRight.v
// Created: 2021-04-19 19:46:10
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_TopLeftToBottomRight
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/DirectionalCost/TopLeftToBottomRight
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_TopLeftToBottomRight
          (clk,
           reset,
           enb,
           matchCostIn_0,
           matchCostIn_1,
           matchCostIn_2,
           matchCostIn_3,
           matchCostIn_4,
           matchCostIn_5,
           matchCostIn_6,
           matchCostIn_7,
           matchCostIn_8,
           matchCostIn_9,
           matchCostIn_10,
           matchCostIn_11,
           matchCostIn_12,
           matchCostIn_13,
           matchCostIn_14,
           matchCostIn_15,
           busIn_vStart,
           busIn_valid,
           tlbrCost_0,
           tlbrCost_1,
           tlbrCost_2,
           tlbrCost_3,
           tlbrCost_4,
           tlbrCost_5,
           tlbrCost_6,
           tlbrCost_7,
           tlbrCost_8,
           tlbrCost_9,
           tlbrCost_10,
           tlbrCost_11,
           tlbrCost_12,
           tlbrCost_13,
           tlbrCost_14,
           tlbrCost_15,
           tlbrBus_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [4:0] matchCostIn_0;  // ufix5
  input   [4:0] matchCostIn_1;  // ufix5
  input   [4:0] matchCostIn_2;  // ufix5
  input   [4:0] matchCostIn_3;  // ufix5
  input   [4:0] matchCostIn_4;  // ufix5
  input   [4:0] matchCostIn_5;  // ufix5
  input   [4:0] matchCostIn_6;  // ufix5
  input   [4:0] matchCostIn_7;  // ufix5
  input   [4:0] matchCostIn_8;  // ufix5
  input   [4:0] matchCostIn_9;  // ufix5
  input   [4:0] matchCostIn_10;  // ufix5
  input   [4:0] matchCostIn_11;  // ufix5
  input   [4:0] matchCostIn_12;  // ufix5
  input   [4:0] matchCostIn_13;  // ufix5
  input   [4:0] matchCostIn_14;  // ufix5
  input   [4:0] matchCostIn_15;  // ufix5
  input   busIn_vStart;
  input   busIn_valid;
  output  signed [9:0] tlbrCost_0;  // sfix10
  output  signed [9:0] tlbrCost_1;  // sfix10
  output  signed [9:0] tlbrCost_2;  // sfix10
  output  signed [9:0] tlbrCost_3;  // sfix10
  output  signed [9:0] tlbrCost_4;  // sfix10
  output  signed [9:0] tlbrCost_5;  // sfix10
  output  signed [9:0] tlbrCost_6;  // sfix10
  output  signed [9:0] tlbrCost_7;  // sfix10
  output  signed [9:0] tlbrCost_8;  // sfix10
  output  signed [9:0] tlbrCost_9;  // sfix10
  output  signed [9:0] tlbrCost_10;  // sfix10
  output  signed [9:0] tlbrCost_11;  // sfix10
  output  signed [9:0] tlbrCost_12;  // sfix10
  output  signed [9:0] tlbrCost_13;  // sfix10
  output  signed [9:0] tlbrCost_14;  // sfix10
  output  signed [9:0] tlbrCost_15;  // sfix10
  output  tlbrBus_valid;


  wire valid;
  reg  Delay_out1;
  wire vStart;
  reg [9:0] HDL_Counter_out1;  // ufix10
  wire CC_out1;
  wire LO_out1;
  wire [4:0] matchCostIn [0:15];  // ufix5 [16]
  reg [4:0] Delay1_out1 [0:15];  // ufix5 [16]
  wire signed [9:0] tlbrSubsystem_out1_0;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_1;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_2;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_3;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_4;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_5;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_6;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_7;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_8;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_9;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_10;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_11;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_12;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_13;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_14;  // sfix10
  wire signed [9:0] tlbrSubsystem_out1_15;  // sfix10
  reg  Delay2_out1_valid;


  assign valid = busIn_valid;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= valid;
        end
      end
    end



  assign vStart = busIn_vStart;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 623
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter_out1 <= 10'b0000000000;
          end
          else if (Delay_out1 == 1'b1) begin
            if (HDL_Counter_out1 >= 10'b1001101111) begin
              HDL_Counter_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter_out1 <= HDL_Counter_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign CC_out1 = HDL_Counter_out1 < 10'b1001101111;



  assign LO_out1 = Delay_out1 & CC_out1;



  assign matchCostIn[0] = matchCostIn_0;
  assign matchCostIn[1] = matchCostIn_1;
  assign matchCostIn[2] = matchCostIn_2;
  assign matchCostIn[3] = matchCostIn_3;
  assign matchCostIn[4] = matchCostIn_4;
  assign matchCostIn[5] = matchCostIn_5;
  assign matchCostIn[6] = matchCostIn_6;
  assign matchCostIn[7] = matchCostIn_7;
  assign matchCostIn[8] = matchCostIn_8;
  assign matchCostIn[9] = matchCostIn_9;
  assign matchCostIn[10] = matchCostIn_10;
  assign matchCostIn[11] = matchCostIn_11;
  assign matchCostIn[12] = matchCostIn_12;
  assign matchCostIn[13] = matchCostIn_13;
  assign matchCostIn[14] = matchCostIn_14;
  assign matchCostIn[15] = matchCostIn_15;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1[0] <= 5'b00000;
        Delay1_out1[1] <= 5'b00000;
        Delay1_out1[2] <= 5'b00000;
        Delay1_out1[3] <= 5'b00000;
        Delay1_out1[4] <= 5'b00000;
        Delay1_out1[5] <= 5'b00000;
        Delay1_out1[6] <= 5'b00000;
        Delay1_out1[7] <= 5'b00000;
        Delay1_out1[8] <= 5'b00000;
        Delay1_out1[9] <= 5'b00000;
        Delay1_out1[10] <= 5'b00000;
        Delay1_out1[11] <= 5'b00000;
        Delay1_out1[12] <= 5'b00000;
        Delay1_out1[13] <= 5'b00000;
        Delay1_out1[14] <= 5'b00000;
        Delay1_out1[15] <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay1_out1[0] <= matchCostIn[0];
          Delay1_out1[1] <= matchCostIn[1];
          Delay1_out1[2] <= matchCostIn[2];
          Delay1_out1[3] <= matchCostIn[3];
          Delay1_out1[4] <= matchCostIn[4];
          Delay1_out1[5] <= matchCostIn[5];
          Delay1_out1[6] <= matchCostIn[6];
          Delay1_out1[7] <= matchCostIn[7];
          Delay1_out1[8] <= matchCostIn[8];
          Delay1_out1[9] <= matchCostIn[9];
          Delay1_out1[10] <= matchCostIn[10];
          Delay1_out1[11] <= matchCostIn[11];
          Delay1_out1[12] <= matchCostIn[12];
          Delay1_out1[13] <= matchCostIn[13];
          Delay1_out1[14] <= matchCostIn[14];
          Delay1_out1[15] <= matchCostIn[15];
        end
      end
    end



  SGBMHDLAl_ip_src_tlbrSubsystem u_tlbrSubsystem (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .enable(LO_out1),
                                                  .matchCostIn_0(Delay1_out1[0]),  // ufix5
                                                  .matchCostIn_1(Delay1_out1[1]),  // ufix5
                                                  .matchCostIn_2(Delay1_out1[2]),  // ufix5
                                                  .matchCostIn_3(Delay1_out1[3]),  // ufix5
                                                  .matchCostIn_4(Delay1_out1[4]),  // ufix5
                                                  .matchCostIn_5(Delay1_out1[5]),  // ufix5
                                                  .matchCostIn_6(Delay1_out1[6]),  // ufix5
                                                  .matchCostIn_7(Delay1_out1[7]),  // ufix5
                                                  .matchCostIn_8(Delay1_out1[8]),  // ufix5
                                                  .matchCostIn_9(Delay1_out1[9]),  // ufix5
                                                  .matchCostIn_10(Delay1_out1[10]),  // ufix5
                                                  .matchCostIn_11(Delay1_out1[11]),  // ufix5
                                                  .matchCostIn_12(Delay1_out1[12]),  // ufix5
                                                  .matchCostIn_13(Delay1_out1[13]),  // ufix5
                                                  .matchCostIn_14(Delay1_out1[14]),  // ufix5
                                                  .matchCostIn_15(Delay1_out1[15]),  // ufix5
                                                  .Enable_1(Delay_out1),
                                                  .tlbrCost_0(tlbrSubsystem_out1_0),  // sfix10
                                                  .tlbrCost_1(tlbrSubsystem_out1_1),  // sfix10
                                                  .tlbrCost_2(tlbrSubsystem_out1_2),  // sfix10
                                                  .tlbrCost_3(tlbrSubsystem_out1_3),  // sfix10
                                                  .tlbrCost_4(tlbrSubsystem_out1_4),  // sfix10
                                                  .tlbrCost_5(tlbrSubsystem_out1_5),  // sfix10
                                                  .tlbrCost_6(tlbrSubsystem_out1_6),  // sfix10
                                                  .tlbrCost_7(tlbrSubsystem_out1_7),  // sfix10
                                                  .tlbrCost_8(tlbrSubsystem_out1_8),  // sfix10
                                                  .tlbrCost_9(tlbrSubsystem_out1_9),  // sfix10
                                                  .tlbrCost_10(tlbrSubsystem_out1_10),  // sfix10
                                                  .tlbrCost_11(tlbrSubsystem_out1_11),  // sfix10
                                                  .tlbrCost_12(tlbrSubsystem_out1_12),  // sfix10
                                                  .tlbrCost_13(tlbrSubsystem_out1_13),  // sfix10
                                                  .tlbrCost_14(tlbrSubsystem_out1_14),  // sfix10
                                                  .tlbrCost_15(tlbrSubsystem_out1_15)  // sfix10
                                                  );

  assign tlbrCost_0 = tlbrSubsystem_out1_0;

  assign tlbrCost_1 = tlbrSubsystem_out1_1;

  assign tlbrCost_2 = tlbrSubsystem_out1_2;

  assign tlbrCost_3 = tlbrSubsystem_out1_3;

  assign tlbrCost_4 = tlbrSubsystem_out1_4;

  assign tlbrCost_5 = tlbrSubsystem_out1_5;

  assign tlbrCost_6 = tlbrSubsystem_out1_6;

  assign tlbrCost_7 = tlbrSubsystem_out1_7;

  assign tlbrCost_8 = tlbrSubsystem_out1_8;

  assign tlbrCost_9 = tlbrSubsystem_out1_9;

  assign tlbrCost_10 = tlbrSubsystem_out1_10;

  assign tlbrCost_11 = tlbrSubsystem_out1_11;

  assign tlbrCost_12 = tlbrSubsystem_out1_12;

  assign tlbrCost_13 = tlbrSubsystem_out1_13;

  assign tlbrCost_14 = tlbrSubsystem_out1_14;

  assign tlbrCost_15 = tlbrSubsystem_out1_15;

  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay2_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1_valid <= busIn_valid;
        end
      end
    end



  assign tlbrBus_valid = Delay2_out1_valid;

endmodule  // SGBMHDLAl_ip_src_TopLeftToBottomRight

