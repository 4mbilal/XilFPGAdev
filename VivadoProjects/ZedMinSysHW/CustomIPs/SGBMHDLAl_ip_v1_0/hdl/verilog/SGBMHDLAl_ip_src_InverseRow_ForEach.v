// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_InverseRow_ForEach.v
// Created: 2021-04-19 19:46:09
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_InverseRow_ForEach
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/DirectionalCost/RightToLeft/InverseRow_ForEach
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_InverseRow_ForEach
          (clk,
           reset,
           enb,
           In,
           busIn_hStart,
           busIn_hEnd,
           busIn_vStart,
           busIn_vEnd,
           busIn_valid,
           Out,
           valid_Out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [9:0] In;  // sfix10
  input   busIn_hStart;
  input   busIn_hEnd;
  input   busIn_vStart;
  input   busIn_vEnd;
  input   busIn_valid;
  output  signed [9:0] Out;  // sfix10
  output  valid_Out;


  reg signed [9:0] Delay4_out1;  // sfix10
  reg signed [9:0] Delay2_out1;  // sfix10
  wire vStart;
  wire hStart;
  reg  Delay6_out1;
  reg  HDL_Counter2_out1;  // ufix1
  wire Compare_To_Constant_out1;
  wire valid;
  reg  Delay5_out1;
  reg  Delay1_out1;
  wire Constant_out1;
  reg [9:0] HDL_Counter1_out1;  // ufix10
  wire HDL_Counter1_step_roll2InitialValue;  // ufix1
  reg [9:0] HDL_Counter1_stepreg;  // ufix10
  reg [9:0] HDL_Counter1_stepregneg;  // ufix10
  wire [9:0] HDL_Counter1_count_step;  // ufix10
  reg [9:0] HDL_Counter_out1;  // ufix10
  wire [9:0] Switch_out1;  // ufix10
  wire hEnd;
  reg  Delay8_out1;
  reg  Delay3_out1;
  reg  HDL_Counter5_out1;  // ufix1
  wire Compare_To_Constant1_out1;
  wire Compare_To_Constant4_out1;
  wire Compare_To_Constant3_out1;
  reg [9:0] HDL_Counter6_out1;  // ufix10
  wire Logical_Operator1_out1;
  reg [1:0] HDL_Counter7_out1;  // ufix2
  wire Rd_En_out1;
  wire Logical_Operator_out1;
  reg [9:0] HDL_Counter4_out1;  // ufix10
  wire Constant1_out1;
  reg [9:0] HDL_Counter3_out1;  // ufix10
  wire HDL_Counter3_step_roll2InitialValue;  // ufix1
  reg [9:0] HDL_Counter3_stepreg;  // ufix10
  reg [9:0] HDL_Counter3_stepregneg;  // ufix10
  wire [9:0] HDL_Counter3_count_step;  // ufix10
  wire [9:0] Switch1_out1;  // ufix10
  wire signed [9:0] Simple_Dual_Port_RAM_out1;  // sfix10
  reg  Delay7_out1;


  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= In;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Delay4_out1;
        end
      end
    end



  assign vStart = busIn_vStart;

  assign hStart = busIn_hStart;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= hStart;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter2_process
      if (reset == 1'b1) begin
        HDL_Counter2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter2_out1 <= 1'b0;
          end
          else if (Delay6_out1 == 1'b1) begin
            HDL_Counter2_out1 <=  ~ HDL_Counter2_out1;
          end
        end
      end
    end



  assign Compare_To_Constant_out1 = HDL_Counter2_out1 == 1'b1;



  assign valid = busIn_valid;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Delay5_out1;
        end
      end
    end



  assign Constant_out1 = 1'b0;



  // Count limited, Unsigned Counter
  //  initial value   = 623
  //  step value      = 1
  //  count to value  = 0
  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_step_process
      if (reset == 1'b1) begin
        HDL_Counter1_stepreg <= 10'b0000000001;
        HDL_Counter1_stepregneg <= 10'b1111111111;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter1_stepreg <= 10'b0000000001;
          end
          else if (Delay1_out1 == 1'b1) begin
            if (HDL_Counter1_step_roll2InitialValue == 1'b1) begin
              HDL_Counter1_stepreg <= 10'b1001101111;
            end
            else begin
              HDL_Counter1_stepreg <= 10'b0000000001;
            end
          end
          if (vStart == 1'b1) begin
            HDL_Counter1_stepregneg <= 10'b1111111111;
          end
          else if (Delay1_out1 == 1'b1) begin
            if (HDL_Counter1_step_roll2InitialValue == 1'b1) begin
              HDL_Counter1_stepregneg <= 10'b1001101111;
            end
            else begin
              HDL_Counter1_stepregneg <= 10'b1111111111;
            end
          end
        end
      end
    end

  assign HDL_Counter1_step_roll2InitialValue = (((HDL_Counter1_out1 == 10'b1111111111) && (Constant_out1 == 1'b1)) || ((HDL_Counter1_out1 == 10'b0000000001) && (Constant_out1 == 1'b0)) ? 1'b1 :
              1'b0);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 10'b1001101111;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter1_out1 <= 10'b1001101111;
          end
          else if (Delay1_out1 == 1'b1) begin
            HDL_Counter1_out1 <= HDL_Counter1_out1 + HDL_Counter1_count_step;
          end
        end
      end
    end

  assign HDL_Counter1_count_step = (Constant_out1 == 1'b1 ? HDL_Counter1_stepreg :
              HDL_Counter1_stepregneg);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 623
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter_out1 <= 10'b0000000000;
          end
          else if (Delay1_out1 == 1'b1) begin
            if (HDL_Counter_out1 >= 10'b1001101111) begin
              HDL_Counter_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter_out1 <= HDL_Counter_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign Switch_out1 = (Compare_To_Constant_out1 == 1'b0 ? HDL_Counter1_out1 :
              HDL_Counter_out1);



  assign hEnd = busIn_hEnd;

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Delay8_out1;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter5_process
      if (reset == 1'b1) begin
        HDL_Counter5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter5_out1 <= 1'b0;
          end
          else if (Delay3_out1 == 1'b1) begin
            HDL_Counter5_out1 <=  ~ HDL_Counter5_out1;
          end
        end
      end
    end



  assign Compare_To_Constant1_out1 = HDL_Counter5_out1 == 1'b1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 623
  always @(posedge clk or posedge reset)
    begin : HDL_Counter6_process
      if (reset == 1'b1) begin
        HDL_Counter6_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (Compare_To_Constant4_out1 == 1'b1) begin
            HDL_Counter6_out1 <= 10'b0000000000;
          end
          else if (Compare_To_Constant3_out1 == 1'b1) begin
            if (HDL_Counter6_out1 >= 10'b1001101111) begin
              HDL_Counter6_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter6_out1 <= HDL_Counter6_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign Compare_To_Constant4_out1 = HDL_Counter6_out1 == 10'b1001101111;



  assign Logical_Operator1_out1 = vStart | Compare_To_Constant4_out1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : HDL_Counter7_process
      if (reset == 1'b1) begin
        HDL_Counter7_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          if (Logical_Operator1_out1 == 1'b1) begin
            HDL_Counter7_out1 <= 2'b00;
          end
          else if (Delay3_out1 == 1'b1) begin
            if (HDL_Counter7_out1 >= 2'b01) begin
              HDL_Counter7_out1 <= 2'b00;
            end
            else begin
              HDL_Counter7_out1 <= HDL_Counter7_out1 + 2'b01;
            end
          end
        end
      end
    end



  assign Compare_To_Constant3_out1 = HDL_Counter7_out1 == 2'b01;



  assign Rd_En_out1 = HDL_Counter6_out1 <= 10'b1001101111;



  assign Logical_Operator_out1 = Compare_To_Constant3_out1 & Rd_En_out1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 623
  always @(posedge clk or posedge reset)
    begin : HDL_Counter4_process
      if (reset == 1'b1) begin
        HDL_Counter4_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter4_out1 <= 10'b0000000000;
          end
          else if (Logical_Operator_out1 == 1'b1) begin
            if (HDL_Counter4_out1 >= 10'b1001101111) begin
              HDL_Counter4_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter4_out1 <= HDL_Counter4_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign Constant1_out1 = 1'b0;



  // Count limited, Unsigned Counter
  //  initial value   = 623
  //  step value      = 1
  //  count to value  = 0
  always @(posedge clk or posedge reset)
    begin : HDL_Counter3_step_process
      if (reset == 1'b1) begin
        HDL_Counter3_stepreg <= 10'b0000000001;
        HDL_Counter3_stepregneg <= 10'b1111111111;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter3_stepreg <= 10'b0000000001;
          end
          else if (Logical_Operator_out1 == 1'b1) begin
            if (HDL_Counter3_step_roll2InitialValue == 1'b1) begin
              HDL_Counter3_stepreg <= 10'b1001101111;
            end
            else begin
              HDL_Counter3_stepreg <= 10'b0000000001;
            end
          end
          if (vStart == 1'b1) begin
            HDL_Counter3_stepregneg <= 10'b1111111111;
          end
          else if (Logical_Operator_out1 == 1'b1) begin
            if (HDL_Counter3_step_roll2InitialValue == 1'b1) begin
              HDL_Counter3_stepregneg <= 10'b1001101111;
            end
            else begin
              HDL_Counter3_stepregneg <= 10'b1111111111;
            end
          end
        end
      end
    end

  assign HDL_Counter3_step_roll2InitialValue = (((HDL_Counter3_out1 == 10'b1111111111) && (Constant1_out1 == 1'b1)) || ((HDL_Counter3_out1 == 10'b0000000001) && (Constant1_out1 == 1'b0)) ? 1'b1 :
              1'b0);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter3_process
      if (reset == 1'b1) begin
        HDL_Counter3_out1 <= 10'b1001101111;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter3_out1 <= 10'b1001101111;
          end
          else if (Logical_Operator_out1 == 1'b1) begin
            HDL_Counter3_out1 <= HDL_Counter3_out1 + HDL_Counter3_count_step;
          end
        end
      end
    end

  assign HDL_Counter3_count_step = (Constant1_out1 == 1'b1 ? HDL_Counter3_stepreg :
              HDL_Counter3_stepregneg);



  assign Switch1_out1 = (Compare_To_Constant1_out1 == 1'b0 ? HDL_Counter4_out1 :
              HDL_Counter3_out1);



  SGBMHDLAl_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(10),
                                               .DataWidth(10)
                                               )
                                             u_Simple_Dual_Port_RAM (.clk(clk),
                                                                     .enb(enb),
                                                                     .wr_din(Delay2_out1),
                                                                     .wr_addr(Switch_out1),
                                                                     .wr_en(Delay1_out1),
                                                                     .rd_addr(Switch1_out1),
                                                                     .rd_dout(Simple_Dual_Port_RAM_out1)
                                                                     );

  assign Out = Simple_Dual_Port_RAM_out1;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Logical_Operator_out1;
        end
      end
    end



  assign valid_Out = Delay7_out1;

endmodule  // SGBMHDLAl_ip_src_InverseRow_ForEach

