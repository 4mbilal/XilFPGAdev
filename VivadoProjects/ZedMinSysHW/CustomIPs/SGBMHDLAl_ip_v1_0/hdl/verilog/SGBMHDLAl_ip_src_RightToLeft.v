// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\SGBMDisparity\SGBMHDLAl_ip_src_RightToLeft.v
// Created: 2021-04-19 19:46:09
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SGBMHDLAl_ip_src_RightToLeft
// Source Path: SGBMDisparity/SGBMHDLAlgorithm/SGBMHDLAlgorithmWorker/DirectionalCost/RightToLeft
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SGBMHDLAl_ip_src_RightToLeft
          (clk,
           reset,
           enb,
           matchCostIn_0,
           matchCostIn_1,
           matchCostIn_2,
           matchCostIn_3,
           matchCostIn_4,
           matchCostIn_5,
           matchCostIn_6,
           matchCostIn_7,
           matchCostIn_8,
           matchCostIn_9,
           matchCostIn_10,
           matchCostIn_11,
           matchCostIn_12,
           matchCostIn_13,
           matchCostIn_14,
           matchCostIn_15,
           busIn_hStart,
           busIn_hEnd,
           busIn_vStart,
           busIn_vEnd,
           busIn_valid,
           rlCost_0,
           rlCost_1,
           rlCost_2,
           rlCost_3,
           rlCost_4,
           rlCost_5,
           rlCost_6,
           rlCost_7,
           rlCost_8,
           rlCost_9,
           rlCost_10,
           rlCost_11,
           rlCost_12,
           rlCost_13,
           rlCost_14,
           rlCost_15,
           rlBus_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [4:0] matchCostIn_0;  // ufix5
  input   [4:0] matchCostIn_1;  // ufix5
  input   [4:0] matchCostIn_2;  // ufix5
  input   [4:0] matchCostIn_3;  // ufix5
  input   [4:0] matchCostIn_4;  // ufix5
  input   [4:0] matchCostIn_5;  // ufix5
  input   [4:0] matchCostIn_6;  // ufix5
  input   [4:0] matchCostIn_7;  // ufix5
  input   [4:0] matchCostIn_8;  // ufix5
  input   [4:0] matchCostIn_9;  // ufix5
  input   [4:0] matchCostIn_10;  // ufix5
  input   [4:0] matchCostIn_11;  // ufix5
  input   [4:0] matchCostIn_12;  // ufix5
  input   [4:0] matchCostIn_13;  // ufix5
  input   [4:0] matchCostIn_14;  // ufix5
  input   [4:0] matchCostIn_15;  // ufix5
  input   busIn_hStart;
  input   busIn_hEnd;
  input   busIn_vStart;
  input   busIn_vEnd;
  input   busIn_valid;
  output  signed [9:0] rlCost_0;  // sfix10
  output  signed [9:0] rlCost_1;  // sfix10
  output  signed [9:0] rlCost_2;  // sfix10
  output  signed [9:0] rlCost_3;  // sfix10
  output  signed [9:0] rlCost_4;  // sfix10
  output  signed [9:0] rlCost_5;  // sfix10
  output  signed [9:0] rlCost_6;  // sfix10
  output  signed [9:0] rlCost_7;  // sfix10
  output  signed [9:0] rlCost_8;  // sfix10
  output  signed [9:0] rlCost_9;  // sfix10
  output  signed [9:0] rlCost_10;  // sfix10
  output  signed [9:0] rlCost_11;  // sfix10
  output  signed [9:0] rlCost_12;  // sfix10
  output  signed [9:0] rlCost_13;  // sfix10
  output  signed [9:0] rlCost_14;  // sfix10
  output  signed [9:0] rlCost_15;  // sfix10
  output  rlBus_valid;


  wire vStart;
  wire valid;
  reg  Delay2_out1;
  reg [9:0] HDL_Counter_out1;  // ufix10
  wire Compare_To_Constant_out1;
  wire [4:0] matchCostIn [0:15];  // ufix5 [16]
  reg [4:0] Delay3_out1 [0:15];  // ufix5 [16]
  wire signed [9:0] rlSubsystem_out1_0;  // sfix10
  wire signed [9:0] rlSubsystem_out1_1;  // sfix10
  wire signed [9:0] rlSubsystem_out1_2;  // sfix10
  wire signed [9:0] rlSubsystem_out1_3;  // sfix10
  wire signed [9:0] rlSubsystem_out1_4;  // sfix10
  wire signed [9:0] rlSubsystem_out1_5;  // sfix10
  wire signed [9:0] rlSubsystem_out1_6;  // sfix10
  wire signed [9:0] rlSubsystem_out1_7;  // sfix10
  wire signed [9:0] rlSubsystem_out1_8;  // sfix10
  wire signed [9:0] rlSubsystem_out1_9;  // sfix10
  wire signed [9:0] rlSubsystem_out1_10;  // sfix10
  wire signed [9:0] rlSubsystem_out1_11;  // sfix10
  wire signed [9:0] rlSubsystem_out1_12;  // sfix10
  wire signed [9:0] rlSubsystem_out1_13;  // sfix10
  wire signed [9:0] rlSubsystem_out1_14;  // sfix10
  wire signed [9:0] rlSubsystem_out1_15;  // sfix10
  wire signed [9:0] Delay6_out1 [0:15];  // sfix10 [16]
  reg  Delay4_out1_hStart;
  reg  Delay1_out1_hStart;
  reg  Delay4_out1_hEnd;
  reg  Delay1_out1_hEnd;
  reg  Delay4_out1_vStart;
  reg  Delay1_out1_vStart;
  reg  Delay4_out1_vEnd;
  reg  Delay1_out1_vEnd;
  reg  Delay4_out1_valid;
  reg  Delay1_out1_valid;
  wire signed [9:0] InverseRow_ForEach_out1 [0:15];  // sfix10 [16]
  wire [0:15] InverseRow_ForEach_out2;  // boolean [16]
  wire InverseRow_ForEach_out2_0;
  wire InverseRow_ForEach_out2_1;
  wire InverseRow_ForEach_out2_2;
  wire InverseRow_ForEach_out2_3;
  wire InverseRow_ForEach_out2_4;
  wire InverseRow_ForEach_out2_5;
  wire InverseRow_ForEach_out2_6;
  wire InverseRow_ForEach_out2_7;
  wire InverseRow_ForEach_out2_8;
  wire InverseRow_ForEach_out2_9;
  wire InverseRow_ForEach_out2_10;
  wire InverseRow_ForEach_out2_11;
  wire InverseRow_ForEach_out2_12;
  wire InverseRow_ForEach_out2_13;
  wire InverseRow_ForEach_out2_14;
  wire InverseRow_ForEach_out2_15;
  wire Logical_Operator_out1;
  wire pixelBusGenerator_out1_valid;


  assign vStart = busIn_vStart;

  assign valid = busIn_valid;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= valid;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 623
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (vStart == 1'b1) begin
            HDL_Counter_out1 <= 10'b0000000000;
          end
          else if (Delay2_out1 == 1'b1) begin
            if (HDL_Counter_out1 >= 10'b1001101111) begin
              HDL_Counter_out1 <= 10'b0000000000;
            end
            else begin
              HDL_Counter_out1 <= HDL_Counter_out1 + 10'b0000000001;
            end
          end
        end
      end
    end



  assign Compare_To_Constant_out1 = HDL_Counter_out1 < 10'b1001101111;



  assign matchCostIn[0] = matchCostIn_0;
  assign matchCostIn[1] = matchCostIn_1;
  assign matchCostIn[2] = matchCostIn_2;
  assign matchCostIn[3] = matchCostIn_3;
  assign matchCostIn[4] = matchCostIn_4;
  assign matchCostIn[5] = matchCostIn_5;
  assign matchCostIn[6] = matchCostIn_6;
  assign matchCostIn[7] = matchCostIn_7;
  assign matchCostIn[8] = matchCostIn_8;
  assign matchCostIn[9] = matchCostIn_9;
  assign matchCostIn[10] = matchCostIn_10;
  assign matchCostIn[11] = matchCostIn_11;
  assign matchCostIn[12] = matchCostIn_12;
  assign matchCostIn[13] = matchCostIn_13;
  assign matchCostIn[14] = matchCostIn_14;
  assign matchCostIn[15] = matchCostIn_15;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1[0] <= 5'b00000;
        Delay3_out1[1] <= 5'b00000;
        Delay3_out1[2] <= 5'b00000;
        Delay3_out1[3] <= 5'b00000;
        Delay3_out1[4] <= 5'b00000;
        Delay3_out1[5] <= 5'b00000;
        Delay3_out1[6] <= 5'b00000;
        Delay3_out1[7] <= 5'b00000;
        Delay3_out1[8] <= 5'b00000;
        Delay3_out1[9] <= 5'b00000;
        Delay3_out1[10] <= 5'b00000;
        Delay3_out1[11] <= 5'b00000;
        Delay3_out1[12] <= 5'b00000;
        Delay3_out1[13] <= 5'b00000;
        Delay3_out1[14] <= 5'b00000;
        Delay3_out1[15] <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay3_out1[0] <= matchCostIn[0];
          Delay3_out1[1] <= matchCostIn[1];
          Delay3_out1[2] <= matchCostIn[2];
          Delay3_out1[3] <= matchCostIn[3];
          Delay3_out1[4] <= matchCostIn[4];
          Delay3_out1[5] <= matchCostIn[5];
          Delay3_out1[6] <= matchCostIn[6];
          Delay3_out1[7] <= matchCostIn[7];
          Delay3_out1[8] <= matchCostIn[8];
          Delay3_out1[9] <= matchCostIn[9];
          Delay3_out1[10] <= matchCostIn[10];
          Delay3_out1[11] <= matchCostIn[11];
          Delay3_out1[12] <= matchCostIn[12];
          Delay3_out1[13] <= matchCostIn[13];
          Delay3_out1[14] <= matchCostIn[14];
          Delay3_out1[15] <= matchCostIn[15];
        end
      end
    end



  SGBMHDLAl_ip_src_rlSubsystem u_rlSubsystem (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .enable(Compare_To_Constant_out1),
                                              .matchCostIn_0(Delay3_out1[0]),  // ufix5
                                              .matchCostIn_1(Delay3_out1[1]),  // ufix5
                                              .matchCostIn_2(Delay3_out1[2]),  // ufix5
                                              .matchCostIn_3(Delay3_out1[3]),  // ufix5
                                              .matchCostIn_4(Delay3_out1[4]),  // ufix5
                                              .matchCostIn_5(Delay3_out1[5]),  // ufix5
                                              .matchCostIn_6(Delay3_out1[6]),  // ufix5
                                              .matchCostIn_7(Delay3_out1[7]),  // ufix5
                                              .matchCostIn_8(Delay3_out1[8]),  // ufix5
                                              .matchCostIn_9(Delay3_out1[9]),  // ufix5
                                              .matchCostIn_10(Delay3_out1[10]),  // ufix5
                                              .matchCostIn_11(Delay3_out1[11]),  // ufix5
                                              .matchCostIn_12(Delay3_out1[12]),  // ufix5
                                              .matchCostIn_13(Delay3_out1[13]),  // ufix5
                                              .matchCostIn_14(Delay3_out1[14]),  // ufix5
                                              .matchCostIn_15(Delay3_out1[15]),  // ufix5
                                              .Enable_1(Delay2_out1),
                                              .Out1_0(rlSubsystem_out1_0),  // sfix10
                                              .Out1_1(rlSubsystem_out1_1),  // sfix10
                                              .Out1_2(rlSubsystem_out1_2),  // sfix10
                                              .Out1_3(rlSubsystem_out1_3),  // sfix10
                                              .Out1_4(rlSubsystem_out1_4),  // sfix10
                                              .Out1_5(rlSubsystem_out1_5),  // sfix10
                                              .Out1_6(rlSubsystem_out1_6),  // sfix10
                                              .Out1_7(rlSubsystem_out1_7),  // sfix10
                                              .Out1_8(rlSubsystem_out1_8),  // sfix10
                                              .Out1_9(rlSubsystem_out1_9),  // sfix10
                                              .Out1_10(rlSubsystem_out1_10),  // sfix10
                                              .Out1_11(rlSubsystem_out1_11),  // sfix10
                                              .Out1_12(rlSubsystem_out1_12),  // sfix10
                                              .Out1_13(rlSubsystem_out1_13),  // sfix10
                                              .Out1_14(rlSubsystem_out1_14),  // sfix10
                                              .Out1_15(rlSubsystem_out1_15)  // sfix10
                                              );

  assign Delay6_out1[0] = rlSubsystem_out1_0;
  assign Delay6_out1[1] = rlSubsystem_out1_1;
  assign Delay6_out1[2] = rlSubsystem_out1_2;
  assign Delay6_out1[3] = rlSubsystem_out1_3;
  assign Delay6_out1[4] = rlSubsystem_out1_4;
  assign Delay6_out1[5] = rlSubsystem_out1_5;
  assign Delay6_out1[6] = rlSubsystem_out1_6;
  assign Delay6_out1[7] = rlSubsystem_out1_7;
  assign Delay6_out1[8] = rlSubsystem_out1_8;
  assign Delay6_out1[9] = rlSubsystem_out1_9;
  assign Delay6_out1[10] = rlSubsystem_out1_10;
  assign Delay6_out1[11] = rlSubsystem_out1_11;
  assign Delay6_out1[12] = rlSubsystem_out1_12;
  assign Delay6_out1[13] = rlSubsystem_out1_13;
  assign Delay6_out1[14] = rlSubsystem_out1_14;
  assign Delay6_out1[15] = rlSubsystem_out1_15;

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        Delay4_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_hStart <= busIn_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        Delay1_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_hStart <= Delay4_out1_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Delay4_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_hEnd <= busIn_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        Delay1_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_hEnd <= Delay4_out1_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay4_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_vStart <= busIn_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_5_process
      if (reset == 1'b1) begin
        Delay1_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_vStart <= Delay4_out1_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_6_process
      if (reset == 1'b1) begin
        Delay4_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_vEnd <= busIn_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_7_process
      if (reset == 1'b1) begin
        Delay1_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_vEnd <= Delay4_out1_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_8_process
      if (reset == 1'b1) begin
        Delay4_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1_valid <= busIn_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_9_process
      if (reset == 1'b1) begin
        Delay1_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1_valid <= Delay4_out1_valid;
        end
      end
    end



  generate
    genvar k;
    for(k = 0; k < 16; k = k + 1) begin : GEN_LABEL
        SGBMHDLAl_ip_src_InverseRow_ForEach u_InverseRow_ForEach (.clk(clk),
                                                                  .reset(reset),
                                                                  .enb(enb),
                                                                  .In(Delay6_out1[k]),  // sfix10
                                                                  .busIn_hStart(Delay1_out1_hStart),
                                                                  .busIn_hEnd(Delay1_out1_hEnd),
                                                                  .busIn_vStart(Delay1_out1_vStart),
                                                                  .busIn_vEnd(Delay1_out1_vEnd),
                                                                  .busIn_valid(Delay1_out1_valid),
                                                                  .Out(InverseRow_ForEach_out1[k]),  // sfix10
                                                                  .valid_Out(InverseRow_ForEach_out2[k])
                                                                  );
    end
  endgenerate

  assign rlCost_0 = InverseRow_ForEach_out1[0];

  assign rlCost_1 = InverseRow_ForEach_out1[1];

  assign rlCost_2 = InverseRow_ForEach_out1[2];

  assign rlCost_3 = InverseRow_ForEach_out1[3];

  assign rlCost_4 = InverseRow_ForEach_out1[4];

  assign rlCost_5 = InverseRow_ForEach_out1[5];

  assign rlCost_6 = InverseRow_ForEach_out1[6];

  assign rlCost_7 = InverseRow_ForEach_out1[7];

  assign rlCost_8 = InverseRow_ForEach_out1[8];

  assign rlCost_9 = InverseRow_ForEach_out1[9];

  assign rlCost_10 = InverseRow_ForEach_out1[10];

  assign rlCost_11 = InverseRow_ForEach_out1[11];

  assign rlCost_12 = InverseRow_ForEach_out1[12];

  assign rlCost_13 = InverseRow_ForEach_out1[13];

  assign rlCost_14 = InverseRow_ForEach_out1[14];

  assign rlCost_15 = InverseRow_ForEach_out1[15];

  assign InverseRow_ForEach_out2_0 = InverseRow_ForEach_out2[0];

  assign InverseRow_ForEach_out2_1 = InverseRow_ForEach_out2[1];

  assign InverseRow_ForEach_out2_2 = InverseRow_ForEach_out2[2];

  assign InverseRow_ForEach_out2_3 = InverseRow_ForEach_out2[3];

  assign InverseRow_ForEach_out2_4 = InverseRow_ForEach_out2[4];

  assign InverseRow_ForEach_out2_5 = InverseRow_ForEach_out2[5];

  assign InverseRow_ForEach_out2_6 = InverseRow_ForEach_out2[6];

  assign InverseRow_ForEach_out2_7 = InverseRow_ForEach_out2[7];

  assign InverseRow_ForEach_out2_8 = InverseRow_ForEach_out2[8];

  assign InverseRow_ForEach_out2_9 = InverseRow_ForEach_out2[9];

  assign InverseRow_ForEach_out2_10 = InverseRow_ForEach_out2[10];

  assign InverseRow_ForEach_out2_11 = InverseRow_ForEach_out2[11];

  assign InverseRow_ForEach_out2_12 = InverseRow_ForEach_out2[12];

  assign InverseRow_ForEach_out2_13 = InverseRow_ForEach_out2[13];

  assign InverseRow_ForEach_out2_14 = InverseRow_ForEach_out2[14];

  assign InverseRow_ForEach_out2_15 = InverseRow_ForEach_out2[15];

  assign Logical_Operator_out1 = InverseRow_ForEach_out2_15 & (InverseRow_ForEach_out2_14 & (InverseRow_ForEach_out2_13 & (InverseRow_ForEach_out2_12 & (InverseRow_ForEach_out2_11 & (InverseRow_ForEach_out2_10 & (InverseRow_ForEach_out2_9 & (InverseRow_ForEach_out2_8 & (InverseRow_ForEach_out2_7 & (InverseRow_ForEach_out2_6 & (InverseRow_ForEach_out2_5 & (InverseRow_ForEach_out2_4 & (InverseRow_ForEach_out2_3 & (InverseRow_ForEach_out2_2 & (InverseRow_ForEach_out2_0 & InverseRow_ForEach_out2_1))))))))))))));



  SGBMHDLAl_ip_src_pixelBusGenerator_block u_pixelBusGenerator (.clk(clk),
                                                                .reset(reset),
                                                                .enb(enb),
                                                                .validIn(Logical_Operator_out1),
                                                                .busOut_valid(pixelBusGenerator_out1_valid)
                                                                );

  assign rlBus_valid = pixelBusGenerator_out1_valid;

endmodule  // SGBMHDLAl_ip_src_RightToLeft

