-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Gaussian\DIPfilte_ip_src_filter_block.vhd
-- Created: 2021-04-25 06:11:50
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DIPfilte_ip_src_filter_block
-- Source Path: Gaussian/DIPGauss/filter
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DIPfilte_ip_src_DIPGauss_pkg.ALL;

ENTITY DIPfilte_ip_src_filter_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelIn                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable                            :   IN    std_logic;
        pixelOut                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END DIPfilte_ip_src_filter_block;


ARCHITECTURE rtl OF DIPfilte_ip_src_filter_block IS

  -- Component Declarations
  COMPONENT DIPfilte_ip_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT DIPfilte_ip_src_Filter
    PORT( d1                              :   IN    vector_of_std_logic_vector8(0 TO 5);  -- uint8 [6]
          d2                              :   IN    vector_of_std_logic_vector8(0 TO 5);  -- uint8 [6]
          d3                              :   IN    vector_of_std_logic_vector8(0 TO 5);  -- uint8 [6]
          d4                              :   IN    vector_of_std_logic_vector8(0 TO 5);  -- uint8 [6]
          d5                              :   IN    vector_of_std_logic_vector8(0 TO 5);  -- uint8 [6]
          y                               :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DIPfilte_ip_src_SimpleDualPortRAM_generic
    USE ENTITY work.DIPfilte_ip_src_SimpleDualPortRAM_generic(rtl);

  FOR ALL : DIPfilte_ip_src_Filter
    USE ENTITY work.DIPfilte_ip_src_Filter(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL alphavalid                       : std_logic;
  SIGNAL pixelIn_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay_reg                 : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Tapped_Delay_out1                : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Tapped_Delay_out1_1              : vector_of_std_logic_vector8(0 TO 5);  -- ufix8 [6]
  SIGNAL Tapped_Delay_out1_0              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL mergedDelay_waddr                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL mergedOutput                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Line_Buffer_Horiz3_out1          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay3_reg                : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Tapped_Delay3_out1               : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Tapped_Delay3_out1_0             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL slicedInput_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Line_Buffer_Horiz2_out1          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay2_reg                : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Tapped_Delay2_out1               : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Tapped_Delay2_out1_0             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay1_out1               : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Tapped_Delay1_out1_0             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL mergedInput                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedDelay_regin                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedDelay_regout               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedDelay_regout_unsigned      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Line_Buffer_Horiz1_out1          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay1_reg                : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Tapped_Delay1_out1_1             : vector_of_std_logic_vector8(0 TO 5);  -- ufix8 [6]
  SIGNAL Tapped_Delay2_out1_1             : vector_of_std_logic_vector8(0 TO 5);  -- ufix8 [6]
  SIGNAL slicedInput_3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Line_Buffer_Horiz4_out1          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay3_out1_1             : vector_of_std_logic_vector8(0 TO 5);  -- ufix8 [6]
  SIGNAL Tapped_Delay4_reg                : vector_of_unsigned8(0 TO 4);  -- ufix8 [5]
  SIGNAL Tapped_Delay4_out1               : vector_of_unsigned8(0 TO 5);  -- uint8 [6]
  SIGNAL Tapped_Delay4_out1_1             : vector_of_std_logic_vector8(0 TO 5);  -- ufix8 [6]
  SIGNAL y                                : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_unsigned                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_bypass                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_last_value                     : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_ShiftRegisterRAM_generic : DIPfilte_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 10,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => enb_gated,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              rd_dout => mergedDelay_regout
              );

  u_Filter : DIPfilte_ip_src_Filter
    PORT MAP( d1 => Tapped_Delay_out1_1,  -- uint8 [6]
              d2 => Tapped_Delay1_out1_1,  -- uint8 [6]
              d3 => Tapped_Delay2_out1_1,  -- uint8 [6]
              d4 => Tapped_Delay3_out1_1,  -- uint8 [6]
              d5 => Tapped_Delay4_out1_1,  -- uint8 [6]
              y => y  -- uint8
              );

  alphavalid <= Enable;

  enb_gated <= alphavalid AND enb;

  pixelIn_unsigned <= unsigned(pixelIn);

  Tapped_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay_reg(4) <= pixelIn_unsigned;
        Tapped_Delay_reg(0 TO 3) <= Tapped_Delay_reg(1 TO 4);
      END IF;
    END IF;
  END PROCESS Tapped_Delay_process;

  Tapped_Delay_out1(0 TO 4) <= Tapped_Delay_reg(0 TO 4);
  Tapped_Delay_out1(5) <= pixelIn_unsigned;

  outputgen4: FOR k IN 0 TO 5 GENERATE
    Tapped_Delay_out1_1(k) <= std_logic_vector(Tapped_Delay_out1(k));
  END GENERATE;

  Tapped_Delay_out1_0 <= Tapped_Delay_out1(0);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 632
  -- 
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_waddr <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#278#, 10) THEN 
          mergedDelay_waddr <= to_unsigned(16#000#, 10);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#001#, 10);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 632
  -- 
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_raddr <= to_unsigned(16#001#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#278#, 10) THEN 
          mergedDelay_raddr <= to_unsigned(16#000#, 10);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#001#, 10);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  slicedInput <= mergedOutput(15 DOWNTO 8);

  Line_Buffer_Horiz3_out1 <= slicedInput;

  Tapped_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay3_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay3_reg(4) <= Line_Buffer_Horiz3_out1;
        Tapped_Delay3_reg(0 TO 3) <= Tapped_Delay3_reg(1 TO 4);
      END IF;
    END IF;
  END PROCESS Tapped_Delay3_process;

  Tapped_Delay3_out1(0 TO 4) <= Tapped_Delay3_reg(0 TO 4);
  Tapped_Delay3_out1(5) <= Line_Buffer_Horiz3_out1;

  Tapped_Delay3_out1_0 <= Tapped_Delay3_out1(0);

  slicedInput_1 <= mergedOutput(23 DOWNTO 16);

  Line_Buffer_Horiz2_out1 <= slicedInput_1;

  Tapped_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay2_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay2_reg(4) <= Line_Buffer_Horiz2_out1;
        Tapped_Delay2_reg(0 TO 3) <= Tapped_Delay2_reg(1 TO 4);
      END IF;
    END IF;
  END PROCESS Tapped_Delay2_process;

  Tapped_Delay2_out1(0 TO 4) <= Tapped_Delay2_reg(0 TO 4);
  Tapped_Delay2_out1(5) <= Line_Buffer_Horiz2_out1;

  Tapped_Delay2_out1_0 <= Tapped_Delay2_out1(0);

  Tapped_Delay1_out1_0 <= Tapped_Delay1_out1(0);

  mergedInput <= Tapped_Delay_out1_0 & Tapped_Delay1_out1_0 & Tapped_Delay2_out1_0 & Tapped_Delay3_out1_0;

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedDelay_regin <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mergedOutput <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput_2 <= mergedOutput(31 DOWNTO 24);

  Line_Buffer_Horiz1_out1 <= slicedInput_2;

  Tapped_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay1_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay1_reg(4) <= Line_Buffer_Horiz1_out1;
        Tapped_Delay1_reg(0 TO 3) <= Tapped_Delay1_reg(1 TO 4);
      END IF;
    END IF;
  END PROCESS Tapped_Delay1_process;

  Tapped_Delay1_out1(0 TO 4) <= Tapped_Delay1_reg(0 TO 4);
  Tapped_Delay1_out1(5) <= Line_Buffer_Horiz1_out1;

  outputgen3: FOR k IN 0 TO 5 GENERATE
    Tapped_Delay1_out1_1(k) <= std_logic_vector(Tapped_Delay1_out1(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 5 GENERATE
    Tapped_Delay2_out1_1(k) <= std_logic_vector(Tapped_Delay2_out1(k));
  END GENERATE;

  slicedInput_3 <= mergedOutput(7 DOWNTO 0);

  Line_Buffer_Horiz4_out1 <= slicedInput_3;

  outputgen1: FOR k IN 0 TO 5 GENERATE
    Tapped_Delay3_out1_1(k) <= std_logic_vector(Tapped_Delay3_out1(k));
  END GENERATE;

  Tapped_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay4_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay4_reg(4) <= Line_Buffer_Horiz4_out1;
        Tapped_Delay4_reg(0 TO 3) <= Tapped_Delay4_reg(1 TO 4);
      END IF;
    END IF;
  END PROCESS Tapped_Delay4_process;

  Tapped_Delay4_out1(0 TO 4) <= Tapped_Delay4_reg(0 TO 4);
  Tapped_Delay4_out1(5) <= Line_Buffer_Horiz4_out1;

  outputgen: FOR k IN 0 TO 5 GENERATE
    Tapped_Delay4_out1_1(k) <= std_logic_vector(Tapped_Delay4_out1(k));
  END GENERATE;

  y_unsigned <= unsigned(y);

  pixelOut_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_last_value <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        y_last_value <= y_bypass;
      END IF;
    END IF;
  END PROCESS pixelOut_bypass_process;


  
  y_bypass <= y_last_value WHEN alphavalid = '0' ELSE
      y_unsigned;

  pixelOut <= std_logic_vector(y_bypass);

END rtl;

