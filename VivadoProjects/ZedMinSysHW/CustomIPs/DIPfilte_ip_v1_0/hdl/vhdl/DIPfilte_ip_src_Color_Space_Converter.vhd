-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Gaussian\DIPfilte_ip_src_Color_Space_Converter.vhd
-- Created: 2021-04-25 06:11:50
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DIPfilte_ip_src_Color_Space_Converter
-- Source Path: Gaussian/DIPGauss/Color Space Converter
-- Hierarchy Level: 1
-- 
-- Color Space Converter
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DIPfilte_ip_src_DIPGauss_pkg.ALL;

ENTITY DIPfilte_ip_src_Color_Space_Converter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in0                               :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        in1_hStart                        :   IN    std_logic;
        in1_hEnd                          :   IN    std_logic;
        in1_vStart                        :   IN    std_logic;
        in1_vEnd                          :   IN    std_logic;
        in1_valid                         :   IN    std_logic;
        out0                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        out1_hStart                       :   OUT   std_logic;
        out1_hEnd                         :   OUT   std_logic;
        out1_vStart                       :   OUT   std_logic;
        out1_vEnd                         :   OUT   std_logic;
        out1_valid                        :   OUT   std_logic
        );
END DIPfilte_ip_src_Color_Space_Converter;


ARCHITECTURE rtl OF DIPfilte_ip_src_Color_Space_Converter IS

  -- Component Declarations
  COMPONENT DIPfilte_ip_src_RGB2INTENSITY
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          R                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          G                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          B                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          hStartIn                        :   IN    std_logic;
          hEndIn                          :   IN    std_logic;
          vStartIn                        :   IN    std_logic;
          vEndIn                          :   IN    std_logic;
          validIn                         :   IN    std_logic;
          Intensity                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          hStartOut                       :   OUT   std_logic;
          hEndOut                         :   OUT   std_logic;
          vStartOut                       :   OUT   std_logic;
          vEndOut                         :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DIPfilte_ip_src_RGB2INTENSITY
    USE ENTITY work.DIPfilte_ip_src_RGB2INTENSITY(rtl);

  -- Signals
  SIGNAL pixelIn_0                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelIn_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelIn_2                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL In1Reg                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL In2Reg                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL In3Reg                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL hStartInReg                      : std_logic;
  SIGNAL hEndInReg                        : std_logic;
  SIGNAL vStartInReg                      : std_logic;
  SIGNAL vEndInReg                        : std_logic;
  SIGNAL validInReg                       : std_logic;
  SIGNAL pixelOut                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL hStartOut                        : std_logic;
  SIGNAL hEndOut                          : std_logic;
  SIGNAL vStartOut                        : std_logic;
  SIGNAL vEndOut                          : std_logic;
  SIGNAL validOut                         : std_logic;

BEGIN
  u_rgb2intensityNet_inst : DIPfilte_ip_src_RGB2INTENSITY
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              R => std_logic_vector(In1Reg),  -- uint8
              G => std_logic_vector(In2Reg),  -- uint8
              B => std_logic_vector(In3Reg),  -- uint8
              hStartIn => hStartInReg,
              hEndIn => hEndInReg,
              vStartIn => vStartInReg,
              vEndIn => vEndInReg,
              validIn => validInReg,
              Intensity => pixelOut,  -- uint8
              hStartOut => hStartOut,
              hEndOut => hEndOut,
              vStartOut => vStartOut,
              vEndOut => vEndOut,
              validOut => validOut
              );

  pixelIn_0 <= unsigned(in0(0));

  pixelIn_1 <= unsigned(in0(1));

  pixelIn_2 <= unsigned(in0(2));

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      In1Reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        In1Reg <= pixelIn_0;
      END IF;
    END IF;
  END PROCESS reg_process;


  reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      In2Reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        In2Reg <= pixelIn_1;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      In3Reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        In3Reg <= pixelIn_2;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hStartInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hStartInReg <= in1_hStart;
      END IF;
    END IF;
  END PROCESS reg_3_process;


  reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hEndInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hEndInReg <= in1_hEnd;
      END IF;
    END IF;
  END PROCESS reg_4_process;


  reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vStartInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vStartInReg <= in1_vStart;
      END IF;
    END IF;
  END PROCESS reg_5_process;


  reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vEndInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vEndInReg <= in1_vEnd;
      END IF;
    END IF;
  END PROCESS reg_6_process;


  reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        validInReg <= in1_valid;
      END IF;
    END IF;
  END PROCESS reg_7_process;


  out1_hStart <= hStartOut;

  out1_hEnd <= hEndOut;

  out1_vStart <= vStartOut;

  out1_vEnd <= vEndOut;

  out1_valid <= validOut;

  out0 <= pixelOut;

END rtl;

