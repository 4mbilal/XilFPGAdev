-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Disparity_CT\Disparity_ip_src_CensusTransform.vhd
-- Created: 2021-04-24 14:26:20
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Disparity_ip_src_CensusTransform
-- Source Path: Disparity_CT/DisparityCT/CensusTransform
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Disparity_ip_src_DisparityCT_pkg.ALL;

ENTITY Disparity_ip_src_CensusTransform IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelIn                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable                            :   IN    std_logic;
        CTout                             :   OUT   std_logic_vector(30 DOWNTO 0)  -- ufix31
        );
END Disparity_ip_src_CensusTransform;


ARCHITECTURE rtl OF Disparity_ip_src_CensusTransform IS

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL alphavalid                       : std_logic;
  SIGNAL pixelIn_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay4_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay4_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay5_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay5_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay6_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay7_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay7_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay8_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay8_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay9_reg                       : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay9_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_reg                       : vector_of_unsigned8(0 TO 631);  -- ufix8 [632]
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay10_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay10_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay12_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay12_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay13_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay13_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay14_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay15_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay15_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay16_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay16_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay17_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay17_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay18_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay18_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_reg                      : vector_of_unsigned8(0 TO 631);  -- ufix8 [632]
  SIGNAL Delay11_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay19_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay19_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay30_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay30_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay31_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay31_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay32_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay32_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay33_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay33_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay34_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay34_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay35_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay35_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay36_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay36_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay29_reg                      : vector_of_unsigned8(0 TO 631);  -- ufix8 [632]
  SIGNAL Delay29_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay20_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay20_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay22_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay22_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay23_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay23_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay24_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay24_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay25_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay25_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay26_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay26_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay27_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay27_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay28_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay28_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay21_reg                      : vector_of_unsigned8(0 TO 631);  -- ufix8 [632]
  SIGNAL Delay21_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay37_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay37_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay50_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay50_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay58_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay58_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay59_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay59_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay60_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay60_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay61_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay61_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay62_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay62_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay63_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay63_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay48_reg                      : vector_of_unsigned8(0 TO 631);  -- ufix8 [632]
  SIGNAL Delay48_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay38_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay38_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay40_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay40_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay41_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay41_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay42_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay42_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay43_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay43_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay44_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay44_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay45_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay45_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay46_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay46_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay39_reg                      : vector_of_unsigned8(0 TO 631);  -- ufix8 [632]
  SIGNAL Delay39_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay47_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay47_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay51_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay51_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay52_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay52_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay53_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay53_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay54_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay54_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay55_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay55_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay56_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay56_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay57_reg                      : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Delay57_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL Relational_Operator6_relop1      : std_logic;
  SIGNAL Relational_Operator7_relop1      : std_logic;
  SIGNAL Relational_Operator8_relop1      : std_logic;
  SIGNAL Relational_Operator9_relop1      : std_logic;
  SIGNAL Relational_Operator10_relop1     : std_logic;
  SIGNAL Relational_Operator11_relop1     : std_logic;
  SIGNAL Relational_Operator12_relop1     : std_logic;
  SIGNAL Relational_Operator13_relop1     : std_logic;
  SIGNAL Relational_Operator14_relop1     : std_logic;
  SIGNAL Relational_Operator15_relop1     : std_logic;
  SIGNAL Relational_Operator16_relop1     : std_logic;
  SIGNAL Relational_Operator17_relop1     : std_logic;
  SIGNAL Relational_Operator18_relop1     : std_logic;
  SIGNAL Relational_Operator19_relop1     : std_logic;
  SIGNAL Relational_Operator20_relop1     : std_logic;
  SIGNAL Relational_Operator21_relop1     : std_logic;
  SIGNAL Relational_Operator22_relop1     : std_logic;
  SIGNAL Relational_Operator23_relop1     : std_logic;
  SIGNAL Relational_Operator24_relop1     : std_logic;
  SIGNAL Relational_Operator25_relop1     : std_logic;
  SIGNAL Relational_Operator26_relop1     : std_logic;
  SIGNAL Relational_Operator27_relop1     : std_logic;
  SIGNAL Relational_Operator28_relop1     : std_logic;
  SIGNAL Relational_Operator29_relop1     : std_logic;
  SIGNAL Relational_Operator30_relop1     : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Concat_out1_bypass           : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Concat_out1_last_value       : unsigned(30 DOWNTO 0);  -- ufix31

BEGIN
  alphavalid <= Enable;

  enb_gated <= alphavalid AND enb;

  pixelIn_unsigned <= unsigned(pixelIn);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_reg(0) <= pixelIn_unsigned;
        Delay1_reg(1 TO 8) <= Delay1_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(8);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay3_reg(0) <= Delay1_out1;
        Delay3_reg(1 TO 8) <= Delay3_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(8);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay4_reg(0) <= Delay3_out1;
        Delay4_reg(1 TO 8) <= Delay4_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(8);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay5_reg(0) <= Delay4_out1;
        Delay5_reg(1 TO 8) <= Delay5_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(8);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay6_reg(0) <= Delay5_out1;
        Delay6_reg(1 TO 8) <= Delay6_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(8);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay7_reg(0) <= Delay6_out1;
        Delay7_reg(1 TO 8) <= Delay7_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(8);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay8_reg(0) <= Delay7_out1;
        Delay8_reg(1 TO 8) <= Delay8_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(8);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay9_reg(0) <= Delay8_out1;
        Delay9_reg(1 TO 8) <= Delay9_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(8);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay2_reg(0) <= Delay9_out1;
        Delay2_reg(1 TO 631) <= Delay2_reg(0 TO 630);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(631);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay10_reg(0) <= Delay2_out1;
        Delay10_reg(1 TO 8) <= Delay10_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(8);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay12_reg(0) <= Delay10_out1;
        Delay12_reg(1 TO 8) <= Delay12_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(8);

  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay13_reg(0) <= Delay12_out1;
        Delay13_reg(1 TO 8) <= Delay13_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(8);

  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay14_reg(0) <= Delay13_out1;
        Delay14_reg(1 TO 8) <= Delay14_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay14_process;

  Delay14_out1 <= Delay14_reg(8);

  Delay15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay15_reg(0) <= Delay14_out1;
        Delay15_reg(1 TO 8) <= Delay15_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out1 <= Delay15_reg(8);

  Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay16_reg(0) <= Delay15_out1;
        Delay16_reg(1 TO 8) <= Delay16_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay16_process;

  Delay16_out1 <= Delay16_reg(8);

  Delay17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay17_reg(0) <= Delay16_out1;
        Delay17_reg(1 TO 8) <= Delay17_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay17_process;

  Delay17_out1 <= Delay17_reg(8);

  Delay18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay18_reg(0) <= Delay17_out1;
        Delay18_reg(1 TO 8) <= Delay18_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay18_process;

  Delay18_out1 <= Delay18_reg(8);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay11_reg(0) <= Delay18_out1;
        Delay11_reg(1 TO 631) <= Delay11_reg(0 TO 630);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(631);

  Delay19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay19_reg(0) <= Delay11_out1;
        Delay19_reg(1 TO 8) <= Delay19_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay19_process;

  Delay19_out1 <= Delay19_reg(8);

  Delay30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay30_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay30_reg(0) <= Delay19_out1;
        Delay30_reg(1 TO 8) <= Delay30_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay30_process;

  Delay30_out1 <= Delay30_reg(8);

  Delay31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay31_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay31_reg(0) <= Delay30_out1;
        Delay31_reg(1 TO 8) <= Delay31_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay31_process;

  Delay31_out1 <= Delay31_reg(8);

  Delay32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay32_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay32_reg(0) <= Delay31_out1;
        Delay32_reg(1 TO 8) <= Delay32_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay32_process;

  Delay32_out1 <= Delay32_reg(8);

  Delay33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay33_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay33_reg(0) <= Delay32_out1;
        Delay33_reg(1 TO 8) <= Delay33_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay33_process;

  Delay33_out1 <= Delay33_reg(8);

  Delay34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay34_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay34_reg(0) <= Delay33_out1;
        Delay34_reg(1 TO 8) <= Delay34_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay34_process;

  Delay34_out1 <= Delay34_reg(8);

  Delay35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay35_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay35_reg(0) <= Delay34_out1;
        Delay35_reg(1 TO 8) <= Delay35_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay35_process;

  Delay35_out1 <= Delay35_reg(8);

  Delay36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay36_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay36_reg(0) <= Delay35_out1;
        Delay36_reg(1 TO 8) <= Delay36_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay36_process;

  Delay36_out1 <= Delay36_reg(8);

  Delay29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay29_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay29_reg(0) <= Delay36_out1;
        Delay29_reg(1 TO 631) <= Delay29_reg(0 TO 630);
      END IF;
    END IF;
  END PROCESS Delay29_process;

  Delay29_out1 <= Delay29_reg(631);

  Delay20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay20_reg(0) <= Delay29_out1;
        Delay20_reg(1 TO 8) <= Delay20_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay20_process;

  Delay20_out1 <= Delay20_reg(8);

  Delay22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay22_reg(0) <= Delay20_out1;
        Delay22_reg(1 TO 8) <= Delay22_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay22_process;

  Delay22_out1 <= Delay22_reg(8);

  Delay23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay23_reg(0) <= Delay22_out1;
        Delay23_reg(1 TO 8) <= Delay23_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay23_process;

  Delay23_out1 <= Delay23_reg(8);

  Delay24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay24_reg(0) <= Delay23_out1;
        Delay24_reg(1 TO 8) <= Delay24_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay24_process;

  Delay24_out1 <= Delay24_reg(8);

  Delay25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay25_reg(0) <= Delay24_out1;
        Delay25_reg(1 TO 8) <= Delay25_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay25_process;

  Delay25_out1 <= Delay25_reg(8);

  Delay26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay26_reg(0) <= Delay25_out1;
        Delay26_reg(1 TO 8) <= Delay26_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay26_process;

  Delay26_out1 <= Delay26_reg(8);

  Delay27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay27_reg(0) <= Delay26_out1;
        Delay27_reg(1 TO 8) <= Delay27_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay27_process;

  Delay27_out1 <= Delay27_reg(8);

  Delay28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay28_reg(0) <= Delay27_out1;
        Delay28_reg(1 TO 8) <= Delay28_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay28_process;

  Delay28_out1 <= Delay28_reg(8);

  Delay21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay21_reg(0) <= Delay28_out1;
        Delay21_reg(1 TO 631) <= Delay21_reg(0 TO 630);
      END IF;
    END IF;
  END PROCESS Delay21_process;

  Delay21_out1 <= Delay21_reg(631);

  Delay37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay37_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay37_reg(0) <= Delay21_out1;
        Delay37_reg(1 TO 8) <= Delay37_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay37_process;

  Delay37_out1 <= Delay37_reg(8);

  Delay50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay50_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay50_reg(0) <= Delay37_out1;
        Delay50_reg(1 TO 8) <= Delay50_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay50_process;

  Delay50_out1 <= Delay50_reg(8);

  Delay58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay58_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay58_reg(0) <= Delay50_out1;
        Delay58_reg(1 TO 8) <= Delay58_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay58_process;

  Delay58_out1 <= Delay58_reg(8);

  Delay59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay59_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay59_reg(0) <= Delay58_out1;
        Delay59_reg(1 TO 8) <= Delay59_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay59_process;

  Delay59_out1 <= Delay59_reg(8);

  Delay60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay60_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay60_reg(0) <= Delay59_out1;
        Delay60_reg(1 TO 8) <= Delay60_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay60_process;

  Delay60_out1 <= Delay60_reg(8);

  Delay61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay61_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay61_reg(0) <= Delay60_out1;
        Delay61_reg(1 TO 8) <= Delay61_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay61_process;

  Delay61_out1 <= Delay61_reg(8);

  Delay62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay62_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay62_reg(0) <= Delay61_out1;
        Delay62_reg(1 TO 8) <= Delay62_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay62_process;

  Delay62_out1 <= Delay62_reg(8);

  Delay63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay63_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay63_reg(0) <= Delay62_out1;
        Delay63_reg(1 TO 8) <= Delay63_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay63_process;

  Delay63_out1 <= Delay63_reg(8);

  Delay48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay48_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay48_reg(0) <= Delay63_out1;
        Delay48_reg(1 TO 631) <= Delay48_reg(0 TO 630);
      END IF;
    END IF;
  END PROCESS Delay48_process;

  Delay48_out1 <= Delay48_reg(631);

  Delay38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay38_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay38_reg(0) <= Delay48_out1;
        Delay38_reg(1 TO 8) <= Delay38_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay38_process;

  Delay38_out1 <= Delay38_reg(8);

  Delay40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay40_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay40_reg(0) <= Delay38_out1;
        Delay40_reg(1 TO 8) <= Delay40_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay40_process;

  Delay40_out1 <= Delay40_reg(8);

  Delay41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay41_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay41_reg(0) <= Delay40_out1;
        Delay41_reg(1 TO 8) <= Delay41_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay41_process;

  Delay41_out1 <= Delay41_reg(8);

  Delay42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay42_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay42_reg(0) <= Delay41_out1;
        Delay42_reg(1 TO 8) <= Delay42_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay42_process;

  Delay42_out1 <= Delay42_reg(8);

  Delay43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay43_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay43_reg(0) <= Delay42_out1;
        Delay43_reg(1 TO 8) <= Delay43_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay43_process;

  Delay43_out1 <= Delay43_reg(8);

  Delay44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay44_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay44_reg(0) <= Delay43_out1;
        Delay44_reg(1 TO 8) <= Delay44_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay44_process;

  Delay44_out1 <= Delay44_reg(8);

  Delay45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay45_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay45_reg(0) <= Delay44_out1;
        Delay45_reg(1 TO 8) <= Delay45_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay45_process;

  Delay45_out1 <= Delay45_reg(8);

  Delay46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay46_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay46_reg(0) <= Delay45_out1;
        Delay46_reg(1 TO 8) <= Delay46_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay46_process;

  Delay46_out1 <= Delay46_reg(8);

  Delay39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay39_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay39_reg(0) <= Delay46_out1;
        Delay39_reg(1 TO 631) <= Delay39_reg(0 TO 630);
      END IF;
    END IF;
  END PROCESS Delay39_process;

  Delay39_out1 <= Delay39_reg(631);

  Delay47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay47_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay47_reg(0) <= Delay39_out1;
        Delay47_reg(1 TO 8) <= Delay47_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay47_process;

  Delay47_out1 <= Delay47_reg(8);

  Delay51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay51_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay51_reg(0) <= Delay47_out1;
        Delay51_reg(1 TO 8) <= Delay51_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay51_process;

  Delay51_out1 <= Delay51_reg(8);

  Delay52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay52_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay52_reg(0) <= Delay51_out1;
        Delay52_reg(1 TO 8) <= Delay52_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay52_process;

  Delay52_out1 <= Delay52_reg(8);

  Delay53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay53_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay53_reg(0) <= Delay52_out1;
        Delay53_reg(1 TO 8) <= Delay53_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay53_process;

  Delay53_out1 <= Delay53_reg(8);

  Delay54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay54_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay54_reg(0) <= Delay53_out1;
        Delay54_reg(1 TO 8) <= Delay54_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay54_process;

  Delay54_out1 <= Delay54_reg(8);

  Delay55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay55_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay55_reg(0) <= Delay54_out1;
        Delay55_reg(1 TO 8) <= Delay55_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay55_process;

  Delay55_out1 <= Delay55_reg(8);

  Delay56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay56_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay56_reg(0) <= Delay55_out1;
        Delay56_reg(1 TO 8) <= Delay56_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay56_process;

  Delay56_out1 <= Delay56_reg(8);

  Delay57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay57_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay57_reg(0) <= Delay56_out1;
        Delay57_reg(1 TO 8) <= Delay57_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay57_process;

  Delay57_out1 <= Delay57_reg(8);

  
  Relational_Operator_relop1 <= '1' WHEN pixelIn_unsigned >= Delay57_out1 ELSE
      '0';

  
  Relational_Operator1_relop1 <= '1' WHEN Delay1_out1 >= Delay56_out1 ELSE
      '0';

  
  Relational_Operator2_relop1 <= '1' WHEN Delay3_out1 >= Delay55_out1 ELSE
      '0';

  
  Relational_Operator3_relop1 <= '1' WHEN Delay4_out1 >= Delay54_out1 ELSE
      '0';

  
  Relational_Operator4_relop1 <= '1' WHEN Delay5_out1 >= Delay53_out1 ELSE
      '0';

  
  Relational_Operator5_relop1 <= '1' WHEN Delay6_out1 >= Delay52_out1 ELSE
      '0';

  
  Relational_Operator6_relop1 <= '1' WHEN Delay7_out1 >= Delay51_out1 ELSE
      '0';

  
  Relational_Operator7_relop1 <= '1' WHEN Delay8_out1 >= Delay47_out1 ELSE
      '0';

  
  Relational_Operator8_relop1 <= '1' WHEN Delay9_out1 >= Delay39_out1 ELSE
      '0';

  
  Relational_Operator9_relop1 <= '1' WHEN Delay2_out1 >= Delay46_out1 ELSE
      '0';

  
  Relational_Operator10_relop1 <= '1' WHEN Delay10_out1 >= Delay45_out1 ELSE
      '0';

  
  Relational_Operator11_relop1 <= '1' WHEN Delay12_out1 >= Delay44_out1 ELSE
      '0';

  
  Relational_Operator12_relop1 <= '1' WHEN Delay13_out1 >= Delay43_out1 ELSE
      '0';

  
  Relational_Operator13_relop1 <= '1' WHEN Delay14_out1 >= Delay42_out1 ELSE
      '0';

  
  Relational_Operator14_relop1 <= '1' WHEN Delay15_out1 >= Delay41_out1 ELSE
      '0';

  
  Relational_Operator15_relop1 <= '1' WHEN Delay16_out1 >= Delay40_out1 ELSE
      '0';

  
  Relational_Operator16_relop1 <= '1' WHEN Delay17_out1 >= Delay38_out1 ELSE
      '0';

  
  Relational_Operator17_relop1 <= '1' WHEN Delay18_out1 >= Delay48_out1 ELSE
      '0';

  
  Relational_Operator18_relop1 <= '1' WHEN Delay11_out1 >= Delay63_out1 ELSE
      '0';

  
  Relational_Operator19_relop1 <= '1' WHEN Delay19_out1 >= Delay56_out1 ELSE
      '0';

  
  Relational_Operator20_relop1 <= '1' WHEN Delay30_out1 >= Delay61_out1 ELSE
      '0';

  
  Relational_Operator21_relop1 <= '1' WHEN Delay31_out1 >= Delay60_out1 ELSE
      '0';

  
  Relational_Operator22_relop1 <= '1' WHEN Delay32_out1 >= Delay59_out1 ELSE
      '0';

  
  Relational_Operator23_relop1 <= '1' WHEN Delay33_out1 >= Delay58_out1 ELSE
      '0';

  
  Relational_Operator24_relop1 <= '1' WHEN Delay34_out1 >= Delay50_out1 ELSE
      '0';

  
  Relational_Operator25_relop1 <= '1' WHEN Delay35_out1 >= Delay37_out1 ELSE
      '0';

  
  Relational_Operator26_relop1 <= '1' WHEN Delay36_out1 >= Delay21_out1 ELSE
      '0';

  
  Relational_Operator27_relop1 <= '1' WHEN Delay29_out1 >= Delay28_out1 ELSE
      '0';

  
  Relational_Operator28_relop1 <= '1' WHEN Delay20_out1 >= Delay27_out1 ELSE
      '0';

  
  Relational_Operator29_relop1 <= '1' WHEN Delay22_out1 >= Delay26_out1 ELSE
      '0';

  
  Relational_Operator30_relop1 <= '1' WHEN Delay23_out1 >= Delay25_out1 ELSE
      '0';

  Bit_Concat_out1 <= unsigned'(Relational_Operator_relop1 & Relational_Operator1_relop1 & Relational_Operator2_relop1 & Relational_Operator3_relop1 & Relational_Operator4_relop1 & Relational_Operator5_relop1 & Relational_Operator6_relop1 & Relational_Operator7_relop1 & Relational_Operator8_relop1 & Relational_Operator9_relop1 & Relational_Operator10_relop1 & Relational_Operator11_relop1 & Relational_Operator12_relop1 & Relational_Operator13_relop1 & Relational_Operator14_relop1 & Relational_Operator15_relop1 & Relational_Operator16_relop1 & Relational_Operator17_relop1 & Relational_Operator18_relop1 & Relational_Operator19_relop1 & Relational_Operator20_relop1 & Relational_Operator21_relop1 & Relational_Operator22_relop1 & Relational_Operator23_relop1 & Relational_Operator24_relop1 & Relational_Operator25_relop1 & Relational_Operator26_relop1 & Relational_Operator27_relop1 & Relational_Operator28_relop1 & Relational_Operator29_relop1 & Relational_Operator30_relop1);

  CTout_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Bit_Concat_out1_last_value <= to_unsigned(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Bit_Concat_out1_last_value <= Bit_Concat_out1_bypass;
      END IF;
    END IF;
  END PROCESS CTout_bypass_process;


  
  Bit_Concat_out1_bypass <= Bit_Concat_out1_last_value WHEN alphavalid = '0' ELSE
      Bit_Concat_out1;

  CTout <= std_logic_vector(Bit_Concat_out1_bypass);

END rtl;

