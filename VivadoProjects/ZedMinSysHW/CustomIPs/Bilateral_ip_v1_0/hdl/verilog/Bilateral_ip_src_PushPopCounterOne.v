// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BilateralFilterIP\Bilateral_ip_src_PushPopCounterOne.v
// Created: 2021-04-16 01:15:52
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Bilateral_ip_src_PushPopCounterOne
// Source Path: BilateralFilterIP/BilateralFilter_HW/Bilateral Filter1/LineBuffer/DATA_MEMORY/PushPopCounterOne
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Bilateral_ip_src_PushPopCounterOne
          (clk,
           reset,
           enb,
           hStartIn,
           popIn,
           popEnable,
           hEndIn,
           wrAddr,
           pushOut,
           rdAddr,
           popOut,
           EndofLine);


  input   clk;
  input   reset;
  input   enb;
  input   hStartIn;
  input   popIn;
  input   popEnable;
  input   hEndIn;
  output  [9:0] wrAddr;  // ufix10
  output  pushOut;
  output  [9:0] rdAddr;  // ufix10
  output  popOut;
  output  EndofLine;


  reg [9:0] writeCount;  // ufix10
  reg  [0:1] intdelay_reg;  // ufix1 [2]
  wire [0:1] intdelay_reg_next;  // ufix1 [2]
  wire writeStoreEn;
  reg [9:0] writeCountNext;  // ufix10
  reg [9:0] writeCountCurrent;  // ufix10
  wire readReset;
  wire InBetweenEn;
  wire ConstantZero;
  wire InBetweenRegIn;
  reg  InBetween;
  wire readCountCompare;
  wire popTerm2;
  wire relop_relop1;
  wire popTerm1;
  wire popCounter;
  wire readReset_1;
  reg  readPop;
  reg [9:0] readCount;  // ufix10
  wire popcountless;
  wire relop_relop1_1;
  wire startOrEnd;
  wire [9:0] constantTwo;  // ufix10
  wire [9:0] readCountAhead;  // ufix10
  wire relop_relop1_2;


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Write_Count_process
      if (reset == 1'b1) begin
        writeCount <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (hStartIn == 1'b1) begin
            writeCount <= 10'b0000000000;
          end
          else if (popIn == 1'b1) begin
            writeCount <= writeCount + 10'b0000000001;
          end
        end
      end
    end



  assign wrAddr = writeCount;

  assign pushOut = popIn;

  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
        end
      end
    end

  assign writeStoreEn = intdelay_reg[1];
  assign intdelay_reg_next[0] = hEndIn;
  assign intdelay_reg_next[1] = intdelay_reg[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        writeCountNext <= 10'b0000000000;
      end
      else begin
        if (enb && writeStoreEn) begin
          writeCountNext <= writeCount;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        writeCountCurrent <= 10'b0000000000;
      end
      else begin
        if (enb && hStartIn) begin
          writeCountCurrent <= writeCountNext;
        end
      end
    end



  assign readReset =  ~ hStartIn;



  assign InBetweenEn = hStartIn | hEndIn;



  assign ConstantZero = 1'b0;



  assign InBetweenRegIn = (hStartIn == 1'b0 ? hEndIn :
              ConstantZero);



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        InBetween <= 1'b0;
      end
      else begin
        if (enb && InBetweenEn) begin
          InBetween <= InBetweenRegIn;
        end
      end
    end



  assign popTerm2 = readCountCompare & InBetween;



  assign readCountCompare = popEnable & relop_relop1;



  assign popTerm1 = popIn & readCountCompare;



  assign popCounter = popTerm1 | popTerm2;



  always @(posedge clk or posedge reset)
    begin : readResetREG_process
      if (reset == 1'b1) begin
        readPop <= 1'b0;
      end
      else begin
        if (enb) begin
          if (readReset_1 == 1'b1) begin
            readPop <= 1'b0;
          end
          else begin
            if (hStartIn) begin
              readPop <= hStartIn;
            end
          end
        end
      end
    end



  assign relop_relop1 = readCount < writeCountCurrent;



  assign popcountless = popCounter & (relop_relop1 & readPop);



  assign relop_relop1_1 = readCount == writeCountCurrent;



  assign readReset_1 = popIn & (relop_relop1_1 & readReset);



  assign startOrEnd = hStartIn | readReset_1;



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Read_Count_process
      if (reset == 1'b1) begin
        readCount <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (startOrEnd == 1'b1) begin
            readCount <= 10'b0000000000;
          end
          else if (popcountless == 1'b1) begin
            readCount <= readCount + 10'b0000000001;
          end
        end
      end
    end



  assign rdAddr = readCount;

  assign popOut = popCounter;

  assign constantTwo = 10'b0000000101;



  assign readCountAhead = readCount + constantTwo;



  assign relop_relop1_2 = readCountAhead == writeCountCurrent;



  assign EndofLine = relop_relop1_2;

endmodule  // Bilateral_ip_src_PushPopCounterOne

