// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BilateralFilterIP\Bilateral_ip_src_LineSpaceAverager.v
// Created: 2021-04-16 01:15:52
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Bilateral_ip_src_LineSpaceAverager
// Source Path: BilateralFilterIP/BilateralFilter_HW/Bilateral Filter1/LineBuffer/LineSpaceAverager
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Bilateral_ip_src_LineSpaceAverager
          (clk,
           reset,
           enb,
           InBetween,
           InLine,
           LineSpaceAverage);


  input   clk;
  input   reset;
  input   enb;
  input   InBetween;
  input   InLine;
  output  [15:0] LineSpaceAverage;  // ufix16


  reg [15:0] LineSpaceCounter;  // ufix16
  reg [15:0] LineSpaceCounterD1;  // ufix16
  reg [15:0] LineSpaceCounterD2;  // ufix16
  wire [16:0] adder_1;  // ufix17
  wire [16:0] adder_2;  // ufix17
  wire [16:0] AddTerm1;  // ufix17
  reg [16:0] AddTerm1REG;  // ufix17
  reg [15:0] LineSpaceCounterD3;  // ufix16
  reg [15:0] LineSpaceCounterD4;  // ufix16
  wire [16:0] adder_4;  // ufix17
  wire [16:0] adder_5;  // ufix17
  wire [16:0] AddTerm2;  // ufix17
  reg [16:0] AddTerm2REG;  // ufix17
  wire [17:0] adder_7;  // ufix18
  wire [17:0] adder_8;  // ufix18
  wire [17:0] AddTerm3;  // ufix18
  reg [17:0] AddTerm3REG;  // ufix18
  wire [17:0] AddTerm3_1;  // ufix18
  reg [17:0] AddTerm3REG_1;  // ufix18


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Read_Count_process
      if (reset == 1'b1) begin
        LineSpaceCounter <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          if (InLine == 1'b1) begin
            LineSpaceCounter <= 16'b0000000000000000;
          end
          else if (InBetween == 1'b1) begin
            LineSpaceCounter <= LineSpaceCounter + 16'b0000000000000001;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        LineSpaceCounterD1 <= 16'b0000000000000000;
      end
      else begin
        if (enb && InLine) begin
          LineSpaceCounterD1 <= LineSpaceCounter;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        LineSpaceCounterD2 <= 16'b0000000000000000;
      end
      else begin
        if (enb && InLine) begin
          LineSpaceCounterD2 <= LineSpaceCounterD1;
        end
      end
    end



  assign adder_1 = {1'b0, LineSpaceCounterD1};
  assign adder_2 = {1'b0, LineSpaceCounterD2};
  assign AddTerm1 = adder_1 + adder_2;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        AddTerm1REG <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          AddTerm1REG <= AddTerm1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        LineSpaceCounterD3 <= 16'b0000000000000000;
      end
      else begin
        if (enb && InLine) begin
          LineSpaceCounterD3 <= LineSpaceCounterD2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        LineSpaceCounterD4 <= 16'b0000000000000000;
      end
      else begin
        if (enb && InLine) begin
          LineSpaceCounterD4 <= LineSpaceCounterD3;
        end
      end
    end



  assign adder_4 = {1'b0, LineSpaceCounterD3};
  assign adder_5 = {1'b0, LineSpaceCounterD4};
  assign AddTerm2 = adder_4 + adder_5;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        AddTerm2REG <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          AddTerm2REG <= AddTerm2;
        end
      end
    end



  assign adder_7 = {1'b0, AddTerm1REG};
  assign adder_8 = {1'b0, AddTerm2REG};
  assign AddTerm3 = adder_7 + adder_8;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_6_process
      if (reset == 1'b1) begin
        AddTerm3REG <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          AddTerm3REG <= AddTerm3;
        end
      end
    end



  assign AddTerm3_1 = AddTerm3REG >> 8'd2;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_7_process
      if (reset == 1'b1) begin
        AddTerm3REG_1 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          AddTerm3REG_1 <= AddTerm3_1;
        end
      end
    end



  assign LineSpaceAverage = AddTerm3REG_1[15:0];



endmodule  // Bilateral_ip_src_LineSpaceAverager

