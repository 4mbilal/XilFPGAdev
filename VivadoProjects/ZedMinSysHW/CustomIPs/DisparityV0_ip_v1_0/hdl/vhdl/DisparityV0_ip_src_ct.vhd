-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Disparity_CT\DisparityV0_ip_src_ct.vhd
-- Created: 2021-04-25 08:29:30
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DisparityV0_ip_src_ct
-- Source Path: Disparity_CT/DisparityV0/ct
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DisparityV0_ip_src_DisparityV0_pkg.ALL;

ENTITY DisparityV0_ip_src_ct IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelIn                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        Enable                            :   IN    std_logic;
        pixelOut                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END DisparityV0_ip_src_ct;


ARCHITECTURE rtl OF DisparityV0_ip_src_ct IS

  -- Component Declarations
  COMPONENT DisparityV0_ip_src_LB_D
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LB                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          D                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  COMPONENT DisparityV0_ip_src_LB_D1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LB                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          D                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  COMPONENT DisparityV0_ip_src_LB_D2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LB                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          D                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  COMPONENT DisparityV0_ip_src_LB_D3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LB                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          D                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  COMPONENT DisparityV0_ip_src_LB_D4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LB                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          D                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  COMPONENT DisparityV0_ip_src_LB_D5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          LB                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          D                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  COMPONENT DisparityV0_ip_src_Filter
    PORT( d1                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          d2                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          d3                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          d4                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          d5                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          d6                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          d7                              :   IN    vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DisparityV0_ip_src_LB_D
    USE ENTITY work.DisparityV0_ip_src_LB_D(rtl);

  FOR ALL : DisparityV0_ip_src_LB_D1
    USE ENTITY work.DisparityV0_ip_src_LB_D1(rtl);

  FOR ALL : DisparityV0_ip_src_LB_D2
    USE ENTITY work.DisparityV0_ip_src_LB_D2(rtl);

  FOR ALL : DisparityV0_ip_src_LB_D3
    USE ENTITY work.DisparityV0_ip_src_LB_D3(rtl);

  FOR ALL : DisparityV0_ip_src_LB_D4
    USE ENTITY work.DisparityV0_ip_src_LB_D4(rtl);

  FOR ALL : DisparityV0_ip_src_LB_D5
    USE ENTITY work.DisparityV0_ip_src_LB_D5(rtl);

  FOR ALL : DisparityV0_ip_src_Filter
    USE ENTITY work.DisparityV0_ip_src_Filter(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL alphavalid                       : std_logic;
  SIGNAL LB_D_out1                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL LB_D_out2                        : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL LB_D1_out1                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL LB_D1_out2                       : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL LB_D2_out1                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL LB_D2_out2                       : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL LB_D3_out1                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL LB_D3_out2                       : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL LB_D4_out1                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL LB_D4_out2                       : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL LB_D5_out1                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL LB_D5_out2                       : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL LB_D5_out1_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay_reg                 : vector_of_unsigned8(0 TO 7);  -- ufix8 [8]
  SIGNAL Tapped_Delay_out1                : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Tapped_Delay_out1_1              : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL y                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL y_unsigned                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_bypass                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL y_last_value                     : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_LB_D : DisparityV0_ip_src_LB_D
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              In_rsvd => pixelIn,  -- uint8
              LB => LB_D_out1,  -- uint8
              D => LB_D_out2  -- uint8 [9]
              );

  u_LB_D1 : DisparityV0_ip_src_LB_D1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              In_rsvd => LB_D_out1,  -- uint8
              LB => LB_D1_out1,  -- uint8
              D => LB_D1_out2  -- uint8 [9]
              );

  u_LB_D2 : DisparityV0_ip_src_LB_D2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              In_rsvd => LB_D1_out1,  -- uint8
              LB => LB_D2_out1,  -- uint8
              D => LB_D2_out2  -- uint8 [9]
              );

  u_LB_D3 : DisparityV0_ip_src_LB_D3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              In_rsvd => LB_D2_out1,  -- uint8
              LB => LB_D3_out1,  -- uint8
              D => LB_D3_out2  -- uint8 [9]
              );

  u_LB_D4 : DisparityV0_ip_src_LB_D4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              In_rsvd => LB_D3_out1,  -- uint8
              LB => LB_D4_out1,  -- uint8
              D => LB_D4_out2  -- uint8 [9]
              );

  u_LB_D5 : DisparityV0_ip_src_LB_D5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              In_rsvd => LB_D4_out1,  -- uint8
              LB => LB_D5_out1,  -- uint8
              D => LB_D5_out2  -- uint8 [9]
              );

  u_Filter : DisparityV0_ip_src_Filter
    PORT MAP( d1 => LB_D_out2,  -- uint8 [9]
              d2 => LB_D1_out2,  -- uint8 [9]
              d3 => LB_D2_out2,  -- uint8 [9]
              d4 => LB_D3_out2,  -- uint8 [9]
              d5 => LB_D4_out2,  -- uint8 [9]
              d6 => LB_D5_out2,  -- uint8 [9]
              d7 => Tapped_Delay_out1_1,  -- uint8 [9]
              y => y  -- uint32
              );

  alphavalid <= Enable;

  enb_gated <= alphavalid AND enb;

  LB_D5_out1_unsigned <= unsigned(LB_D5_out1);

  Tapped_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Tapped_Delay_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Tapped_Delay_reg(7) <= LB_D5_out1_unsigned;
        Tapped_Delay_reg(0 TO 6) <= Tapped_Delay_reg(1 TO 7);
      END IF;
    END IF;
  END PROCESS Tapped_Delay_process;

  Tapped_Delay_out1(0 TO 7) <= Tapped_Delay_reg(0 TO 7);
  Tapped_Delay_out1(8) <= LB_D5_out1_unsigned;

  outputgen: FOR k IN 0 TO 8 GENERATE
    Tapped_Delay_out1_1(k) <= std_logic_vector(Tapped_Delay_out1(k));
  END GENERATE;

  y_unsigned <= unsigned(y);

  pixelOut_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        y_last_value <= y_bypass;
      END IF;
    END IF;
  END PROCESS pixelOut_bypass_process;


  
  y_bypass <= y_last_value WHEN alphavalid = '0' ELSE
      y_unsigned;

  pixelOut <= std_logic_vector(y_bypass);

END rtl;

