// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_4K_480p\Segmentat_ip_src_Comparisons.v
// Created: 2021-04-17 16:46:28
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Segmentat_ip_src_Comparisons
// Source Path: Sementation_4K_480p/Segmentation_HW/K-Means/Comparisons
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Segmentat_ip_src_Comparisons
          (RGB_pixel_0,
           RGB_pixel_1,
           RGB_pixel_2,
           Ks_0,
           Ks_1,
           Ks_2,
           Ks_3,
           Ks_4,
           Ks_5,
           Ks_6,
           Ks_7,
           Ks_8,
           Ks_9,
           Ks_10,
           Ks_11,
           Y_disable,
           SAD_SSE,
           K_out_0,
           K_out_1,
           K_out_2,
           Address);


  input   signed [17:0] RGB_pixel_0;  // sfix18_En8
  input   signed [17:0] RGB_pixel_1;  // sfix18_En8
  input   signed [17:0] RGB_pixel_2;  // sfix18_En8
  input   signed [17:0] Ks_0;  // sfix18_En8
  input   signed [17:0] Ks_1;  // sfix18_En8
  input   signed [17:0] Ks_2;  // sfix18_En8
  input   signed [17:0] Ks_3;  // sfix18_En8
  input   signed [17:0] Ks_4;  // sfix18_En8
  input   signed [17:0] Ks_5;  // sfix18_En8
  input   signed [17:0] Ks_6;  // sfix18_En8
  input   signed [17:0] Ks_7;  // sfix18_En8
  input   signed [17:0] Ks_8;  // sfix18_En8
  input   signed [17:0] Ks_9;  // sfix18_En8
  input   signed [17:0] Ks_10;  // sfix18_En8
  input   signed [17:0] Ks_11;  // sfix18_En8
  input   [7:0] Y_disable;  // uint8
  input   [7:0] SAD_SSE;  // uint8
  output  signed [17:0] K_out_0;  // sfix18_En8
  output  signed [17:0] K_out_1;  // sfix18_En8
  output  signed [17:0] K_out_2;  // sfix18_En8
  output  [1:0] Address;  // ufix2


  wire signed [37:0] SSE1_out1;  // sfix38_En16
  wire signed [37:0] SSE2_out1;  // sfix38_En16
  wire Relational_Operator_relop1;
  wire signed [37:0] Switch1_out1;  // sfix38_En16
  wire signed [37:0] SSE3_out1;  // sfix38_En16
  wire signed [37:0] SSE4_out1;  // sfix38_En16
  wire Relational_Operator1_relop1;
  wire signed [37:0] Switch2_out1;  // sfix38_En16
  wire Relational_Operator2_relop1;
  wire signed [17:0] Demux_out4 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux_out3 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch4_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux_out2 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Demux_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch3_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Switch5_out1 [0:2];  // sfix18_En8 [3]
  wire Logical_Operator_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator4_out1;
  wire Logical_Operator2_out1;
  wire Logical_Operator3_out1;
  wire Logical_Operator5_out1;
  wire [1:0] Bit_Concat_out1;  // ufix2


  Segmentat_ip_src_SSE1 u_SSE1 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_0),  // sfix18_En8
                                .In2_1(Ks_1),  // sfix18_En8
                                .In2_2(Ks_2),  // sfix18_En8
                                .Y_disable(Y_disable),  // uint8
                                .SAD_SSE(SAD_SSE),  // uint8
                                .Out1(SSE1_out1)  // sfix38_En16
                                );

  Segmentat_ip_src_SSE2 u_SSE2 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_3),  // sfix18_En8
                                .In2_1(Ks_4),  // sfix18_En8
                                .In2_2(Ks_5),  // sfix18_En8
                                .Y_disable(Y_disable),  // uint8
                                .SAD_SSE(SAD_SSE),  // uint8
                                .Out1(SSE2_out1)  // sfix38_En16
                                );

  assign Relational_Operator_relop1 = SSE1_out1 <= SSE2_out1;



  assign Switch1_out1 = (Relational_Operator_relop1 == 1'b0 ? SSE2_out1 :
              SSE1_out1);



  Segmentat_ip_src_SSE3 u_SSE3 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_6),  // sfix18_En8
                                .In2_1(Ks_7),  // sfix18_En8
                                .In2_2(Ks_8),  // sfix18_En8
                                .Y_disable(Y_disable),  // uint8
                                .SAD_SSE(SAD_SSE),  // uint8
                                .Out1(SSE3_out1)  // sfix38_En16
                                );

  Segmentat_ip_src_SSE4 u_SSE4 (.In1_0(RGB_pixel_0),  // sfix18_En8
                                .In1_1(RGB_pixel_1),  // sfix18_En8
                                .In1_2(RGB_pixel_2),  // sfix18_En8
                                .In2_0(Ks_9),  // sfix18_En8
                                .In2_1(Ks_10),  // sfix18_En8
                                .In2_2(Ks_11),  // sfix18_En8
                                .Y_disable(Y_disable),  // uint8
                                .SAD_SSE(SAD_SSE),  // uint8
                                .Out1(SSE4_out1)  // sfix38_En16
                                );

  assign Relational_Operator1_relop1 = SSE3_out1 <= SSE4_out1;



  assign Switch2_out1 = (Relational_Operator1_relop1 == 1'b0 ? SSE4_out1 :
              SSE3_out1);



  assign Relational_Operator2_relop1 = Switch1_out1 <= Switch2_out1;



  assign Demux_out4[0] = Ks_9;
  assign Demux_out4[1] = Ks_10;
  assign Demux_out4[2] = Ks_11;

  assign Demux_out3[0] = Ks_6;
  assign Demux_out3[1] = Ks_7;
  assign Demux_out3[2] = Ks_8;

  assign Switch4_out1[0] = (Relational_Operator1_relop1 == 1'b0 ? Demux_out4[0] :
              Demux_out3[0]);
  assign Switch4_out1[1] = (Relational_Operator1_relop1 == 1'b0 ? Demux_out4[1] :
              Demux_out3[1]);
  assign Switch4_out1[2] = (Relational_Operator1_relop1 == 1'b0 ? Demux_out4[2] :
              Demux_out3[2]);



  assign Demux_out2[0] = Ks_3;
  assign Demux_out2[1] = Ks_4;
  assign Demux_out2[2] = Ks_5;

  assign Demux_out1[0] = Ks_0;
  assign Demux_out1[1] = Ks_1;
  assign Demux_out1[2] = Ks_2;

  assign Switch3_out1[0] = (Relational_Operator_relop1 == 1'b0 ? Demux_out2[0] :
              Demux_out1[0]);
  assign Switch3_out1[1] = (Relational_Operator_relop1 == 1'b0 ? Demux_out2[1] :
              Demux_out1[1]);
  assign Switch3_out1[2] = (Relational_Operator_relop1 == 1'b0 ? Demux_out2[2] :
              Demux_out1[2]);



  assign Switch5_out1[0] = (Relational_Operator2_relop1 == 1'b0 ? Switch4_out1[0] :
              Switch3_out1[0]);
  assign Switch5_out1[1] = (Relational_Operator2_relop1 == 1'b0 ? Switch4_out1[1] :
              Switch3_out1[1]);
  assign Switch5_out1[2] = (Relational_Operator2_relop1 == 1'b0 ? Switch4_out1[2] :
              Switch3_out1[2]);



  assign K_out_0 = Switch5_out1[0];

  assign K_out_1 = Switch5_out1[1];

  assign K_out_2 = Switch5_out1[2];

  assign Logical_Operator_out1 =  ~ Relational_Operator2_relop1;



  assign Logical_Operator1_out1 =  ~ Relational_Operator_relop1;



  assign Logical_Operator4_out1 = Logical_Operator1_out1 & Relational_Operator2_relop1;



  assign Logical_Operator2_out1 =  ~ Relational_Operator1_relop1;



  assign Logical_Operator3_out1 = Logical_Operator_out1 & Logical_Operator2_out1;



  assign Logical_Operator5_out1 = Logical_Operator4_out1 | Logical_Operator3_out1;



  assign Bit_Concat_out1 = {Logical_Operator_out1, Logical_Operator5_out1};



  assign Address = Bit_Concat_out1;

endmodule  // Segmentat_ip_src_Comparisons

