// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Sementation_4K_480p\Segmentat_ip_src_K_Means.v
// Created: 2021-04-17 16:46:28
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Segmentat_ip_src_K_Means
// Source Path: Sementation_4K_480p/Segmentation_HW/K-Means
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Segmentat_ip_src_K_Means
          (clk,
           reset,
           enb,
           pixelIn_0,
           pixelIn_1,
           pixelIn_2,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           Y_disable,
           SAD_SSE,
           pixelOut_0,
           pixelOut_1,
           pixelOut_2,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] pixelIn_0;  // uint8
  input   [7:0] pixelIn_1;  // uint8
  input   [7:0] pixelIn_2;  // uint8
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  input   [7:0] Y_disable;  // uint8
  input   [7:0] SAD_SSE;  // uint8
  output  [7:0] pixelOut_0;  // uint8
  output  [7:0] pixelOut_1;  // uint8
  output  [7:0] pixelOut_2;  // uint8
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire [7:0] Color_Space_Converter_out1_0;  // uint8
  wire [7:0] Color_Space_Converter_out1_1;  // uint8
  wire [7:0] Color_Space_Converter_out1_2;  // uint8
  wire Color_Space_Converter_out2_hStart;
  wire Color_Space_Converter_out2_hEnd;
  wire Color_Space_Converter_out2_vStart;
  wire Color_Space_Converter_out2_vEnd;
  wire Color_Space_Converter_out2_valid;
  wire [7:0] Color_Space_Converter_out1 [0:2];  // uint8 [3]
  wire signed [17:0] Data_Type_Conversion2_out1 [0:2];  // sfix18_En8 [3]
  wire [7:0] K2_out1;  // uint8
  wire switch_compare_1;
  wire signed [17:0] K0_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] K1_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] K3_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] K4_out1 [0:2];  // sfix18_En8 [3]
  wire signed [17:0] Mux2_out1_reshape [0:11];  // sfix18_En8 [12]
  wire signed [17:0] Switch_out1 [0:11];  // sfix18_En8 [12]
  wire [1:0] y;  // ufix2
  wire signed [17:0] Clustering_out1_0;  // sfix18_En8
  wire signed [17:0] Clustering_out1_1;  // sfix18_En8
  wire signed [17:0] Clustering_out1_2;  // sfix18_En8
  wire signed [17:0] Clustering_out1_3;  // sfix18_En8
  wire signed [17:0] Clustering_out1_4;  // sfix18_En8
  wire signed [17:0] Clustering_out1_5;  // sfix18_En8
  wire signed [17:0] Clustering_out1_6;  // sfix18_En8
  wire signed [17:0] Clustering_out1_7;  // sfix18_En8
  wire signed [17:0] Clustering_out1_8;  // sfix18_En8
  wire signed [17:0] Clustering_out1_9;  // sfix18_En8
  wire signed [17:0] Clustering_out1_10;  // sfix18_En8
  wire signed [17:0] Clustering_out1_11;  // sfix18_En8
  wire signed [17:0] Clustering_out1 [0:11];  // sfix18_En8 [12]
  wire signed [17:0] Comparisons_out1_0;  // sfix18_En8
  wire signed [17:0] Comparisons_out1_1;  // sfix18_En8
  wire signed [17:0] Comparisons_out1_2;  // sfix18_En8
  wire [7:0] Constant_out1;  // uint8
  wire switch_compare_1_1;
  wire signed [17:0] Comparisons_out1 [0:2];  // sfix18_En8 [3]
  wire [7:0] Data_Type_Conversion1_out1 [0:2];  // uint8 [3]
  wire [7:0] Data_Type_Conversion3_out1 [0:2];  // uint8 [3]
  wire [7:0] Switch1_out1 [0:2];  // uint8 [3]
  wire [7:0] Color_Space_Converter1_out1_0;  // uint8
  wire [7:0] Color_Space_Converter1_out1_1;  // uint8
  wire [7:0] Color_Space_Converter1_out1_2;  // uint8
  wire Color_Space_Converter1_out2_hStart;
  wire Color_Space_Converter1_out2_hEnd;
  wire Color_Space_Converter1_out2_vStart;
  wire Color_Space_Converter1_out2_vEnd;
  wire Color_Space_Converter1_out2_valid;


  Segmentat_ip_src_Color_Space_Converter u_Color_Space_Converter (.clk(clk),
                                                                  .reset(reset),
                                                                  .enb(enb),
                                                                  .in0_0(pixelIn_0),  // uint8
                                                                  .in0_1(pixelIn_1),  // uint8
                                                                  .in0_2(pixelIn_2),  // uint8
                                                                  .in1_hStart(ctrlIn_hStart),
                                                                  .in1_hEnd(ctrlIn_hEnd),
                                                                  .in1_vStart(ctrlIn_vStart),
                                                                  .in1_vEnd(ctrlIn_vEnd),
                                                                  .in1_valid(ctrlIn_valid),
                                                                  .out0_0(Color_Space_Converter_out1_0),  // uint8
                                                                  .out0_1(Color_Space_Converter_out1_1),  // uint8
                                                                  .out0_2(Color_Space_Converter_out1_2),  // uint8
                                                                  .out1_hStart(Color_Space_Converter_out2_hStart),
                                                                  .out1_hEnd(Color_Space_Converter_out2_hEnd),
                                                                  .out1_vStart(Color_Space_Converter_out2_vStart),
                                                                  .out1_vEnd(Color_Space_Converter_out2_vEnd),
                                                                  .out1_valid(Color_Space_Converter_out2_valid)
                                                                  );

  assign Color_Space_Converter_out1[0] = Color_Space_Converter_out1_0;
  assign Color_Space_Converter_out1[1] = Color_Space_Converter_out1_1;
  assign Color_Space_Converter_out1[2] = Color_Space_Converter_out1_2;

  assign Data_Type_Conversion2_out1[0] = {2'b0, {Color_Space_Converter_out1[0], 8'b00000000}};
  assign Data_Type_Conversion2_out1[1] = {2'b0, {Color_Space_Converter_out1[1], 8'b00000000}};
  assign Data_Type_Conversion2_out1[2] = {2'b0, {Color_Space_Converter_out1[2], 8'b00000000}};



  assign K2_out1 = 8'b00000000;



  assign switch_compare_1 = K2_out1 >= 8'b00000001;



  assign K0_out1[0] = 18'sb001111111100000000;
  assign K0_out1[1] = 18'sb000000000000000000;
  assign K0_out1[2] = 18'sb000000000000000000;



  assign K1_out1[0] = 18'sb000000000000000000;
  assign K1_out1[1] = 18'sb001111111100000000;
  assign K1_out1[2] = 18'sb000000000000000000;



  assign K3_out1[0] = 18'sb000000000000000000;
  assign K3_out1[1] = 18'sb000000000000000000;
  assign K3_out1[2] = 18'sb001111111100000000;



  assign K4_out1[0] = 18'sb000000000000000000;
  assign K4_out1[1] = 18'sb001111111100000000;
  assign K4_out1[2] = 18'sb001111111100000000;



  assign Mux2_out1_reshape[0] = K0_out1[0];
  assign Mux2_out1_reshape[1] = K0_out1[1];
  assign Mux2_out1_reshape[2] = K0_out1[2];
  assign Mux2_out1_reshape[3] = K1_out1[0];
  assign Mux2_out1_reshape[4] = K1_out1[1];
  assign Mux2_out1_reshape[5] = K1_out1[2];
  assign Mux2_out1_reshape[6] = K3_out1[0];
  assign Mux2_out1_reshape[7] = K3_out1[1];
  assign Mux2_out1_reshape[8] = K3_out1[2];
  assign Mux2_out1_reshape[9] = K4_out1[0];
  assign Mux2_out1_reshape[10] = K4_out1[1];
  assign Mux2_out1_reshape[11] = K4_out1[2];

  Segmentat_ip_src_Clustering u_Clustering (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .K_addr(y),  // ufix2
                                            .RGB_pixel_0(Data_Type_Conversion2_out1[0]),  // sfix18_En8
                                            .RGB_pixel_1(Data_Type_Conversion2_out1[1]),  // sfix18_En8
                                            .RGB_pixel_2(Data_Type_Conversion2_out1[2]),  // sfix18_En8
                                            .Ctrl_vStart(Color_Space_Converter_out2_vStart),
                                            .Ctrl_valid(Color_Space_Converter_out2_valid),
                                            .K_out_0(Clustering_out1_0),  // sfix18_En8
                                            .K_out_1(Clustering_out1_1),  // sfix18_En8
                                            .K_out_2(Clustering_out1_2),  // sfix18_En8
                                            .K_out_3(Clustering_out1_3),  // sfix18_En8
                                            .K_out_4(Clustering_out1_4),  // sfix18_En8
                                            .K_out_5(Clustering_out1_5),  // sfix18_En8
                                            .K_out_6(Clustering_out1_6),  // sfix18_En8
                                            .K_out_7(Clustering_out1_7),  // sfix18_En8
                                            .K_out_8(Clustering_out1_8),  // sfix18_En8
                                            .K_out_9(Clustering_out1_9),  // sfix18_En8
                                            .K_out_10(Clustering_out1_10),  // sfix18_En8
                                            .K_out_11(Clustering_out1_11)  // sfix18_En8
                                            );

  assign Clustering_out1[0] = Clustering_out1_0;
  assign Clustering_out1[1] = Clustering_out1_1;
  assign Clustering_out1[2] = Clustering_out1_2;
  assign Clustering_out1[3] = Clustering_out1_3;
  assign Clustering_out1[4] = Clustering_out1_4;
  assign Clustering_out1[5] = Clustering_out1_5;
  assign Clustering_out1[6] = Clustering_out1_6;
  assign Clustering_out1[7] = Clustering_out1_7;
  assign Clustering_out1[8] = Clustering_out1_8;
  assign Clustering_out1[9] = Clustering_out1_9;
  assign Clustering_out1[10] = Clustering_out1_10;
  assign Clustering_out1[11] = Clustering_out1_11;

  assign Switch_out1[0] = (switch_compare_1 == 1'b0 ? Clustering_out1[0] :
              Mux2_out1_reshape[0]);
  assign Switch_out1[1] = (switch_compare_1 == 1'b0 ? Clustering_out1[1] :
              Mux2_out1_reshape[1]);
  assign Switch_out1[2] = (switch_compare_1 == 1'b0 ? Clustering_out1[2] :
              Mux2_out1_reshape[2]);
  assign Switch_out1[3] = (switch_compare_1 == 1'b0 ? Clustering_out1[3] :
              Mux2_out1_reshape[3]);
  assign Switch_out1[4] = (switch_compare_1 == 1'b0 ? Clustering_out1[4] :
              Mux2_out1_reshape[4]);
  assign Switch_out1[5] = (switch_compare_1 == 1'b0 ? Clustering_out1[5] :
              Mux2_out1_reshape[5]);
  assign Switch_out1[6] = (switch_compare_1 == 1'b0 ? Clustering_out1[6] :
              Mux2_out1_reshape[6]);
  assign Switch_out1[7] = (switch_compare_1 == 1'b0 ? Clustering_out1[7] :
              Mux2_out1_reshape[7]);
  assign Switch_out1[8] = (switch_compare_1 == 1'b0 ? Clustering_out1[8] :
              Mux2_out1_reshape[8]);
  assign Switch_out1[9] = (switch_compare_1 == 1'b0 ? Clustering_out1[9] :
              Mux2_out1_reshape[9]);
  assign Switch_out1[10] = (switch_compare_1 == 1'b0 ? Clustering_out1[10] :
              Mux2_out1_reshape[10]);
  assign Switch_out1[11] = (switch_compare_1 == 1'b0 ? Clustering_out1[11] :
              Mux2_out1_reshape[11]);



  Segmentat_ip_src_Comparisons u_Comparisons (.RGB_pixel_0(Data_Type_Conversion2_out1[0]),  // sfix18_En8
                                              .RGB_pixel_1(Data_Type_Conversion2_out1[1]),  // sfix18_En8
                                              .RGB_pixel_2(Data_Type_Conversion2_out1[2]),  // sfix18_En8
                                              .Ks_0(Switch_out1[0]),  // sfix18_En8
                                              .Ks_1(Switch_out1[1]),  // sfix18_En8
                                              .Ks_2(Switch_out1[2]),  // sfix18_En8
                                              .Ks_3(Switch_out1[3]),  // sfix18_En8
                                              .Ks_4(Switch_out1[4]),  // sfix18_En8
                                              .Ks_5(Switch_out1[5]),  // sfix18_En8
                                              .Ks_6(Switch_out1[6]),  // sfix18_En8
                                              .Ks_7(Switch_out1[7]),  // sfix18_En8
                                              .Ks_8(Switch_out1[8]),  // sfix18_En8
                                              .Ks_9(Switch_out1[9]),  // sfix18_En8
                                              .Ks_10(Switch_out1[10]),  // sfix18_En8
                                              .Ks_11(Switch_out1[11]),  // sfix18_En8
                                              .Y_disable(Y_disable),  // uint8
                                              .SAD_SSE(SAD_SSE),  // uint8
                                              .K_out_0(Comparisons_out1_0),  // sfix18_En8
                                              .K_out_1(Comparisons_out1_1),  // sfix18_En8
                                              .K_out_2(Comparisons_out1_2),  // sfix18_En8
                                              .Address(y)  // ufix2
                                              );

  assign Constant_out1 = 8'b00000000;



  assign switch_compare_1_1 = Constant_out1 >= 8'b00000001;



  assign Comparisons_out1[0] = Comparisons_out1_0;
  assign Comparisons_out1[1] = Comparisons_out1_1;
  assign Comparisons_out1[2] = Comparisons_out1_2;

  assign Data_Type_Conversion1_out1[0] = Comparisons_out1[0][15:8] + Comparisons_out1[0][7];
  assign Data_Type_Conversion1_out1[1] = Comparisons_out1[1][15:8] + Comparisons_out1[1][7];
  assign Data_Type_Conversion1_out1[2] = Comparisons_out1[2][15:8] + Comparisons_out1[2][7];



  assign Data_Type_Conversion3_out1[0] = Data_Type_Conversion2_out1[0][15:8] + Data_Type_Conversion2_out1[0][7];
  assign Data_Type_Conversion3_out1[1] = Data_Type_Conversion2_out1[1][15:8] + Data_Type_Conversion2_out1[1][7];
  assign Data_Type_Conversion3_out1[2] = Data_Type_Conversion2_out1[2][15:8] + Data_Type_Conversion2_out1[2][7];



  assign Switch1_out1[0] = (switch_compare_1_1 == 1'b0 ? Data_Type_Conversion1_out1[0] :
              Data_Type_Conversion3_out1[0]);
  assign Switch1_out1[1] = (switch_compare_1_1 == 1'b0 ? Data_Type_Conversion1_out1[1] :
              Data_Type_Conversion3_out1[1]);
  assign Switch1_out1[2] = (switch_compare_1_1 == 1'b0 ? Data_Type_Conversion1_out1[2] :
              Data_Type_Conversion3_out1[2]);



  Segmentat_ip_src_Color_Space_Converter1 u_Color_Space_Converter1 (.clk(clk),
                                                                    .reset(reset),
                                                                    .enb(enb),
                                                                    .in0_0(Switch1_out1[0]),  // uint8
                                                                    .in0_1(Switch1_out1[1]),  // uint8
                                                                    .in0_2(Switch1_out1[2]),  // uint8
                                                                    .in1_hStart(Color_Space_Converter_out2_hStart),
                                                                    .in1_hEnd(Color_Space_Converter_out2_hEnd),
                                                                    .in1_vStart(Color_Space_Converter_out2_vStart),
                                                                    .in1_vEnd(Color_Space_Converter_out2_vEnd),
                                                                    .in1_valid(Color_Space_Converter_out2_valid),
                                                                    .out0_0(Color_Space_Converter1_out1_0),  // uint8
                                                                    .out0_1(Color_Space_Converter1_out1_1),  // uint8
                                                                    .out0_2(Color_Space_Converter1_out1_2),  // uint8
                                                                    .out1_hStart(Color_Space_Converter1_out2_hStart),
                                                                    .out1_hEnd(Color_Space_Converter1_out2_hEnd),
                                                                    .out1_vStart(Color_Space_Converter1_out2_vStart),
                                                                    .out1_vEnd(Color_Space_Converter1_out2_vEnd),
                                                                    .out1_valid(Color_Space_Converter1_out2_valid)
                                                                    );

  assign pixelOut_0 = Color_Space_Converter1_out1_0;

  assign pixelOut_1 = Color_Space_Converter1_out1_1;

  assign pixelOut_2 = Color_Space_Converter1_out1_2;

  assign ctrlOut_hStart = Color_Space_Converter1_out2_hStart;

  assign ctrlOut_hEnd = Color_Space_Converter1_out2_hEnd;

  assign ctrlOut_vStart = Color_Space_Converter1_out2_vStart;

  assign ctrlOut_vEnd = Color_Space_Converter1_out2_vEnd;

  assign ctrlOut_valid = Color_Space_Converter1_out2_valid;

endmodule  // Segmentat_ip_src_K_Means

