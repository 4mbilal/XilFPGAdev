// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\V1\ContrastS_ip_src_ContrastStretch_HW.v
// Created: 2021-04-17 05:04:37
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pixelOut                      ce_out        0.001
// ctrlOut_hStart                ce_out        0.001
// ctrlOut_hEnd                  ce_out        0.001
// ctrlOut_vStart                ce_out        0.001
// ctrlOut_vEnd                  ce_out        0.001
// ctrlOut_valid                 ce_out        0.001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ContrastS_ip_src_ContrastStretch_HW
// Source Path: V1/ContrastStretch_HW
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ContrastS_ip_src_ContrastStretch_HW
          (clk,
           reset,
           clk_enable,
           pixelIn,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           ce_out,
           pixelOut,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [31:0] pixelIn;  // uint32
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  output  ce_out;
  output  [31:0] pixelOut;  // uint32
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire enb;
  wire [7:0] FF_out1;  // uint8
  wire [7:0] RGB2Vector_out1_0;  // uint8
  wire [7:0] RGB2Vector_out1_1;  // uint8
  wire [7:0] RGB2Vector_out1_2;  // uint8
  wire [7:0] ContrastStretching_out1_0;  // uint8
  wire [7:0] ContrastStretching_out1_1;  // uint8
  wire [7:0] ContrastStretching_out1_2;  // uint8
  wire ContrastStretching_out2_hStart;
  wire ContrastStretching_out2_hEnd;
  wire ContrastStretching_out2_vStart;
  wire ContrastStretching_out2_vEnd;
  wire ContrastStretching_out2_valid;
  wire [31:0] Bit_Concat_out1;  // uint32
  reg  ContrastStretching_out2_hStart_1;
  reg  ContrastStretching_out2_hEnd_1;
  reg  ContrastStretching_out2_vStart_1;
  reg  ContrastStretching_out2_vEnd_1;
  reg  ContrastStretching_out2_valid_1;


  assign FF_out1 = 8'b11111111;



  ContrastS_ip_src_RGB2Vector u_RGB2Vector (.RGB(pixelIn),  // uint32
                                            .RGBVector_0(RGB2Vector_out1_0),  // uint8
                                            .RGBVector_1(RGB2Vector_out1_1),  // uint8
                                            .RGBVector_2(RGB2Vector_out1_2)  // uint8
                                            );

  ContrastS_ip_src_ContrastStretching u_ContrastStretching (.clk(clk),
                                                            .reset(reset),
                                                            .enb(clk_enable),
                                                            .pixelIn_0(RGB2Vector_out1_0),  // uint8
                                                            .pixelIn_1(RGB2Vector_out1_1),  // uint8
                                                            .pixelIn_2(RGB2Vector_out1_2),  // uint8
                                                            .ctrlIn_hStart(ctrlIn_hStart),
                                                            .ctrlIn_hEnd(ctrlIn_hEnd),
                                                            .ctrlIn_vStart(ctrlIn_vStart),
                                                            .ctrlIn_vEnd(ctrlIn_vEnd),
                                                            .ctrlIn_valid(ctrlIn_valid),
                                                            .pixelOut_0(ContrastStretching_out1_0),  // uint8
                                                            .pixelOut_1(ContrastStretching_out1_1),  // uint8
                                                            .pixelOut_2(ContrastStretching_out1_2),  // uint8
                                                            .ctrlOut_hStart(ContrastStretching_out2_hStart),
                                                            .ctrlOut_hEnd(ContrastStretching_out2_hEnd),
                                                            .ctrlOut_vStart(ContrastStretching_out2_vStart),
                                                            .ctrlOut_vEnd(ContrastStretching_out2_vEnd),
                                                            .ctrlOut_valid(ContrastStretching_out2_valid)
                                                            );

  assign Bit_Concat_out1 = {FF_out1, ContrastStretching_out1_0, ContrastStretching_out1_1, ContrastStretching_out1_2};



  assign pixelOut = Bit_Concat_out1;

  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        ContrastStretching_out2_hStart_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          ContrastStretching_out2_hStart_1 <= ContrastStretching_out2_hStart;
        end
      end
    end



  assign ctrlOut_hStart = ContrastStretching_out2_hStart_1;

  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        ContrastStretching_out2_hEnd_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          ContrastStretching_out2_hEnd_1 <= ContrastStretching_out2_hEnd;
        end
      end
    end



  assign ctrlOut_hEnd = ContrastStretching_out2_hEnd_1;

  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        ContrastStretching_out2_vStart_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          ContrastStretching_out2_vStart_1 <= ContrastStretching_out2_vStart;
        end
      end
    end



  assign ctrlOut_vStart = ContrastStretching_out2_vStart_1;

  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        ContrastStretching_out2_vEnd_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          ContrastStretching_out2_vEnd_1 <= ContrastStretching_out2_vEnd;
        end
      end
    end



  assign ctrlOut_vEnd = ContrastStretching_out2_vEnd_1;

  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        ContrastStretching_out2_valid_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          ContrastStretching_out2_valid_1 <= ContrastStretching_out2_valid;
        end
      end
    end



  assign ctrlOut_valid = ContrastStretching_out2_valid_1;

  assign ce_out = clk_enable;

endmodule  // ContrastS_ip_src_ContrastStretch_HW

