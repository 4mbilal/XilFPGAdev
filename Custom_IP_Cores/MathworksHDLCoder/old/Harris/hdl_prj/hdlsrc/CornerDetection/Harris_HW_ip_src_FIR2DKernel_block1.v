// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CornerDetection\Harris_HW_ip_src_FIR2DKernel_block1.v
// Created: 2020-01-15 11:28:57
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Harris_HW_ip_src_FIR2DKernel_block1
// Source Path: CornerDetection/Harris_HW/HDL Corner Algorithm/GaussianGx/FIR2DKernel
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Harris_HW_ip_src_FIR2DKernel_block1
          (clk,
           reset,
           enb,
           dataIn_0,
           dataIn_1,
           dataIn_2,
           dataIn_3,
           dataIn_4,
           vStartIn,
           vEndIn,
           hStartIn,
           hEndIn,
           validIn,
           processData,
           dataOut,
           vStartOut,
           vEndOut,
           hStartOut,
           hEndOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] dataIn_0;  // sfix18
  input   signed [17:0] dataIn_1;  // sfix18
  input   signed [17:0] dataIn_2;  // sfix18
  input   signed [17:0] dataIn_3;  // sfix18
  input   signed [17:0] dataIn_4;  // sfix18
  input   vStartIn;
  input   vEndIn;
  input   hStartIn;
  input   hEndIn;
  input   validIn;
  input   processData;
  output  signed [17:0] dataOut;  // sfix18
  output  vStartOut;
  output  vEndOut;
  output  hStartOut;
  output  hEndOut;
  output  validOut;


  reg signed [17:0] tapDelay_1_reg [0:3];  // sfix18 [4]
  wire signed [17:0] tapDelay_1_reg_next [0:3];  // sfix18 [4]
  wire signed [17:0] tapOutData_1 [0:4];  // sfix18 [5]
  wire signed [17:0] tapOutData_1_0;  // sfix18
  reg signed [17:0] preAdd1_stage1_1;  // sfix18
  reg signed [17:0] tapDelay_5_reg [0:3];  // sfix18 [4]
  wire signed [17:0] tapDelay_5_reg_next [0:3];  // sfix18 [4]
  wire signed [17:0] tapOutData_5 [0:4];  // sfix18 [5]
  wire signed [17:0] tapOutData_5_0;  // sfix18
  reg signed [17:0] preAdd1_stage1_2;  // sfix18
  wire signed [18:0] adder_1;  // sfix19
  wire signed [18:0] adder_2;  // sfix19
  wire signed [18:0] preAdd1_stage1_add_1;  // sfix19
  reg signed [18:0] preAdd1_stage2_1;  // sfix19
  wire signed [17:0] tapOutData_1_4;  // sfix18
  reg signed [17:0] preAdd1_stage1_3;  // sfix18
  wire signed [17:0] tapOutData_5_4;  // sfix18
  reg signed [17:0] preAdd1_stage1_4;  // sfix18
  wire signed [18:0] adder_4;  // sfix19
  wire signed [18:0] adder_5;  // sfix19
  wire signed [18:0] preAdd1_stage1_add_2;  // sfix19
  reg signed [18:0] preAdd1_stage2_2;  // sfix19
  wire signed [19:0] adder_7;  // sfix20
  wire signed [19:0] adder_8;  // sfix20
  wire signed [19:0] preAdd1_stage2_add_1;  // sfix20
  reg signed [19:0] preAdd1_final_reg;  // sfix20
  reg signed [19:0] preAdd1_balance_reg;  // sfix20
  reg signed [19:0] multInDelay1_reg [0:1];  // sfix20 [2]
  wire signed [19:0] multInDelay1_reg_next [0:1];  // sfix20 [2]
  wire signed [19:0] multInReg1;  // sfix20
  wire signed [37:0] multOut1;  // sfix38_En21
  reg signed [37:0] multOutDelay1_reg [0:1];  // sfix38 [2]
  wire signed [37:0] multOutDelay1_reg_next [0:1];  // sfix38_En21 [2]
  wire signed [37:0] multOutReg1;  // sfix38_En21
  reg signed [37:0] add_stage1_1;  // sfix38_En21
  reg signed [17:0] tapDelay_2_reg [0:3];  // sfix18 [4]
  wire signed [17:0] tapDelay_2_reg_next [0:3];  // sfix18 [4]
  wire signed [17:0] tapOutData_2 [0:4];  // sfix18 [5]
  wire signed [17:0] tapOutData_2_0;  // sfix18
  reg signed [17:0] preAdd2_stage1_1;  // sfix18
  reg signed [17:0] tapDelay_4_reg [0:3];  // sfix18 [4]
  wire signed [17:0] tapDelay_4_reg_next [0:3];  // sfix18 [4]
  wire signed [17:0] tapOutData_4 [0:4];  // sfix18 [5]
  wire signed [17:0] tapOutData_4_0;  // sfix18
  reg signed [17:0] preAdd2_stage1_2;  // sfix18
  wire signed [18:0] adder_10;  // sfix19
  wire signed [18:0] adder_11;  // sfix19
  wire signed [18:0] preAdd2_stage1_add_1;  // sfix19
  reg signed [18:0] preAdd2_stage2_1;  // sfix19
  wire signed [17:0] tapOutData_1_1;  // sfix18
  reg signed [17:0] preAdd2_stage1_3;  // sfix18
  wire signed [17:0] tapOutData_5_1;  // sfix18
  reg signed [17:0] preAdd2_stage1_4;  // sfix18
  wire signed [18:0] adder_13;  // sfix19
  wire signed [18:0] adder_14;  // sfix19
  wire signed [18:0] preAdd2_stage1_add_2;  // sfix19
  reg signed [18:0] preAdd2_stage2_2;  // sfix19
  wire signed [19:0] adder_16;  // sfix20
  wire signed [19:0] adder_17;  // sfix20
  wire signed [19:0] preAdd2_stage2_add_1;  // sfix20
  reg signed [19:0] preAdd2_stage3_1;  // sfix20
  wire signed [17:0] tapOutData_1_3;  // sfix18
  reg signed [17:0] preAdd2_stage1_5;  // sfix18
  wire signed [17:0] tapOutData_5_3;  // sfix18
  reg signed [17:0] preAdd2_stage1_6;  // sfix18
  wire signed [18:0] adder_19;  // sfix19
  wire signed [18:0] adder_20;  // sfix19
  wire signed [18:0] preAdd2_stage1_add_3;  // sfix19
  reg signed [18:0] preAdd2_stage2_3;  // sfix19
  wire signed [17:0] tapOutData_2_4;  // sfix18
  reg signed [17:0] preAdd2_stage1_7;  // sfix18
  wire signed [17:0] tapOutData_4_4;  // sfix18
  reg signed [17:0] preAdd2_stage1_8;  // sfix18
  wire signed [18:0] adder_22;  // sfix19
  wire signed [18:0] adder_23;  // sfix19
  wire signed [18:0] preAdd2_stage1_add_4;  // sfix19
  reg signed [18:0] preAdd2_stage2_4;  // sfix19
  wire signed [19:0] adder_25;  // sfix20
  wire signed [19:0] adder_26;  // sfix20
  wire signed [19:0] preAdd2_stage2_add_2;  // sfix20
  reg signed [19:0] preAdd2_stage3_2;  // sfix20
  wire signed [20:0] adder_28;  // sfix21
  wire signed [20:0] adder_29;  // sfix21
  wire signed [20:0] preAdd2_stage3_add_1;  // sfix21
  reg signed [20:0] preAdd2_final_reg;  // sfix21
  reg signed [20:0] multInDelay2_reg [0:1];  // sfix21 [2]
  wire signed [20:0] multInDelay2_reg_next [0:1];  // sfix21 [2]
  wire signed [20:0] multInReg2;  // sfix21
  wire signed [38:0] multOut2;  // sfix39_En21
  reg signed [38:0] multOutDelay2_reg [0:1];  // sfix39 [2]
  wire signed [38:0] multOutDelay2_reg_next [0:1];  // sfix39_En21 [2]
  wire signed [38:0] multOutReg2;  // sfix39_En21
  reg signed [38:0] add_stage1_2;  // sfix39_En21
  wire signed [39:0] adder_add_cast;  // sfix40_En21
  wire signed [39:0] adder_add_cast_1;  // sfix40_En21
  wire signed [39:0] add_stage1_add_1;  // sfix40_En21
  reg signed [39:0] add_stage2_1;  // sfix40_En21
  reg signed [17:0] tapDelay_3_reg [0:3];  // sfix18 [4]
  wire signed [17:0] tapDelay_3_reg_next [0:3];  // sfix18 [4]
  wire signed [17:0] tapOutData_3 [0:4];  // sfix18 [5]
  wire signed [17:0] tapOutData_3_0;  // sfix18
  reg signed [17:0] preAdd3_stage1_1;  // sfix18
  wire signed [17:0] tapOutData_1_2;  // sfix18
  reg signed [17:0] preAdd3_stage1_2;  // sfix18
  wire signed [18:0] adder_32;  // sfix19
  wire signed [18:0] adder_33;  // sfix19
  wire signed [18:0] preAdd3_stage1_add_1;  // sfix19
  reg signed [18:0] preAdd3_stage2_1;  // sfix19
  wire signed [17:0] tapOutData_5_2;  // sfix18
  reg signed [17:0] preAdd3_stage1_3;  // sfix18
  wire signed [17:0] tapOutData_3_4;  // sfix18
  reg signed [17:0] preAdd3_stage1_4;  // sfix18
  wire signed [18:0] adder_35;  // sfix19
  wire signed [18:0] adder_36;  // sfix19
  wire signed [18:0] preAdd3_stage1_add_2;  // sfix19
  reg signed [18:0] preAdd3_stage2_2;  // sfix19
  wire signed [19:0] adder_38;  // sfix20
  wire signed [19:0] adder_39;  // sfix20
  wire signed [19:0] preAdd3_stage2_add_1;  // sfix20
  reg signed [19:0] preAdd3_final_reg;  // sfix20
  reg signed [19:0] preAdd3_balance_reg;  // sfix20
  reg signed [19:0] multInDelay3_reg [0:1];  // sfix20 [2]
  wire signed [19:0] multInDelay3_reg_next [0:1];  // sfix20 [2]
  wire signed [19:0] multInReg3;  // sfix20
  wire signed [37:0] multOut3;  // sfix38_En21
  reg signed [37:0] multOutDelay3_reg [0:1];  // sfix38 [2]
  wire signed [37:0] multOutDelay3_reg_next [0:1];  // sfix38_En21 [2]
  wire signed [37:0] multOutReg3;  // sfix38_En21
  reg signed [37:0] add_stage1_3;  // sfix38_En21
  wire signed [17:0] tapOutData_2_1;  // sfix18
  reg signed [17:0] preAdd4_stage1_1;  // sfix18
  wire signed [17:0] tapOutData_4_1;  // sfix18
  reg signed [17:0] preAdd4_stage1_2;  // sfix18
  wire signed [18:0] adder_41;  // sfix19
  wire signed [18:0] adder_42;  // sfix19
  wire signed [18:0] preAdd4_stage1_add_1;  // sfix19
  reg signed [18:0] preAdd4_stage2_1;  // sfix19
  wire signed [17:0] tapOutData_2_3;  // sfix18
  reg signed [17:0] preAdd4_stage1_3;  // sfix18
  wire signed [17:0] tapOutData_4_3;  // sfix18
  reg signed [17:0] preAdd4_stage1_4;  // sfix18
  wire signed [18:0] adder_44;  // sfix19
  wire signed [18:0] adder_45;  // sfix19
  wire signed [18:0] preAdd4_stage1_add_2;  // sfix19
  reg signed [18:0] preAdd4_stage2_2;  // sfix19
  wire signed [19:0] adder_47;  // sfix20
  wire signed [19:0] adder_48;  // sfix20
  wire signed [19:0] preAdd4_stage2_add_1;  // sfix20
  reg signed [19:0] preAdd4_final_reg;  // sfix20
  reg signed [19:0] preAdd4_balance_reg;  // sfix20
  reg signed [19:0] multInDelay4_reg [0:1];  // sfix20 [2]
  wire signed [19:0] multInDelay4_reg_next [0:1];  // sfix20 [2]
  wire signed [19:0] multInReg4;  // sfix20
  wire signed [37:0] multOut4;  // sfix38_En21
  reg signed [37:0] multOutDelay4_reg [0:1];  // sfix38 [2]
  wire signed [37:0] multOutDelay4_reg_next [0:1];  // sfix38_En21 [2]
  wire signed [37:0] multOutReg4;  // sfix38_En21
  reg signed [37:0] add_stage1_4;  // sfix38_En21
  wire signed [38:0] adder_add_cast_2;  // sfix39_En21
  wire signed [38:0] adder_add_cast_3;  // sfix39_En21
  wire signed [38:0] add_stage1_add_2;  // sfix39_En21
  reg signed [38:0] add_stage2_2;  // sfix39_En21
  wire signed [40:0] adder_add_cast_4;  // sfix41_En21
  wire signed [40:0] adder_add_cast_5;  // sfix41_En21
  wire signed [40:0] add_stage2_add_1;  // sfix41_En21
  reg signed [40:0] add_stage3_1;  // sfix41_En21
  wire signed [17:0] tapOutData_3_1;  // sfix18
  reg signed [17:0] preAdd5_stage1_1;  // sfix18
  wire signed [17:0] tapOutData_2_2;  // sfix18
  reg signed [17:0] preAdd5_stage1_2;  // sfix18
  wire signed [18:0] adder_52;  // sfix19
  wire signed [18:0] adder_53;  // sfix19
  wire signed [18:0] preAdd5_stage1_add_1;  // sfix19
  reg signed [18:0] preAdd5_stage2_1;  // sfix19
  wire signed [17:0] tapOutData_3_2;  // sfix18
  reg signed [17:0] preAdd5_stage1_3;  // sfix18
  wire signed [17:0] tapOutData_4_2;  // sfix18
  reg signed [17:0] preAdd5_stage1_4;  // sfix18
  wire signed [18:0] adder_55;  // sfix19
  wire signed [18:0] adder_56;  // sfix19
  wire signed [18:0] preAdd5_stage1_add_2;  // sfix19
  reg signed [18:0] preAdd5_stage2_2;  // sfix19
  wire signed [19:0] adder_58;  // sfix20
  wire signed [19:0] adder_59;  // sfix20
  wire signed [19:0] preAdd5_stage2_add_1;  // sfix20
  reg signed [19:0] preAdd5_stage3_1;  // sfix20
  wire signed [17:0] tapOutData_3_3;  // sfix18
  reg signed [17:0] preAdd5_stage3_2_reg_reg [0:2];  // sfix18 [3]
  wire signed [17:0] preAdd5_stage3_2_reg_reg_next [0:2];  // sfix18 [3]
  wire signed [17:0] preAdd5_stage3_2;  // sfix18
  wire signed [20:0] adder_61;  // sfix21
  wire signed [20:0] adder_62;  // sfix21
  wire signed [20:0] preAdd5_stage3_add_1;  // sfix21
  reg signed [20:0] preAdd5_final_reg;  // sfix21
  reg signed [20:0] multInDelay5_reg [0:1];  // sfix21 [2]
  wire signed [20:0] multInDelay5_reg_next [0:1];  // sfix21 [2]
  wire signed [20:0] multInReg5;  // sfix21
  wire signed [38:0] multOut5;  // sfix39_En21
  reg signed [38:0] multOutDelay5_reg [0:1];  // sfix39 [2]
  wire signed [38:0] multOutDelay5_reg_next [0:1];  // sfix39_En21 [2]
  wire signed [38:0] multOutReg5;  // sfix39_En21
  reg signed [38:0] add_stage3_2_reg_reg [0:2];  // sfix39 [3]
  wire signed [38:0] add_stage3_2_reg_reg_next [0:2];  // sfix39_En21 [3]
  wire signed [38:0] add_stage3_2;  // sfix39_En21
  wire signed [41:0] adder_add_cast_6;  // sfix42_En21
  wire signed [41:0] adder_add_cast_7;  // sfix42_En21
  wire signed [41:0] add_stage3_add_1;  // sfix42_En21
  reg signed [41:0] add_final_reg;  // sfix42_En21
  wire signed [17:0] add_final_reg_conv;  // sfix18
  reg signed [17:0] dataOut_2;  // sfix18
  reg  [0:1] vStartOut_tap_latency_reg;  // ufix1 [2]
  wire [0:1] vStartOut_tap_latency_reg_next;  // ufix1 [2]
  wire vStartIn_reg;
  wire vStartIn_reg_vldSig;
  reg  [0:12] vStartOut_fir_latency_reg;  // ufix1 [13]
  wire [0:12] vStartOut_fir_latency_reg_next;  // ufix1 [13]
  reg  [0:1] vEndOut_tap_latency_reg;  // ufix1 [2]
  wire [0:1] vEndOut_tap_latency_reg_next;  // ufix1 [2]
  wire vEndIn_reg;
  wire vEndIn_reg_vldSig;
  reg  [0:12] vEndOut_fir_latency_reg;  // ufix1 [13]
  wire [0:12] vEndOut_fir_latency_reg_next;  // ufix1 [13]
  reg  [0:1] hStartOut_tap_latency_reg;  // ufix1 [2]
  wire [0:1] hStartOut_tap_latency_reg_next;  // ufix1 [2]
  wire hStartIn_reg;
  wire hStartIn_reg_vldSig;
  reg  [0:12] hStartOut_fir_latency_reg;  // ufix1 [13]
  wire [0:12] hStartOut_fir_latency_reg_next;  // ufix1 [13]
  reg  [0:1] hEndOut_tap_latency_reg;  // ufix1 [2]
  wire [0:1] hEndOut_tap_latency_reg_next;  // ufix1 [2]
  wire hEndIn_reg;
  wire hEndIn_reg_vldSig;
  reg  [0:12] hEndOut_fir_latency_reg;  // ufix1 [13]
  wire [0:12] hEndOut_fir_latency_reg_next;  // ufix1 [13]
  reg  [0:1] validOut_tap_latency_reg;  // ufix1 [2]
  wire [0:1] validOut_tap_latency_reg_next;  // ufix1 [2]
  wire validIn_reg;
  wire validIn_reg_vldSig;
  reg  [0:12] validOut_fir_latency_reg;  // ufix1 [13]
  wire [0:12] validOut_fir_latency_reg_next;  // ufix1 [13]


  always @(posedge clk or posedge reset)
    begin : tapDelay_1_process
      if (reset == 1'b1) begin
        tapDelay_1_reg[0] <= 18'sb000000000000000000;
        tapDelay_1_reg[1] <= 18'sb000000000000000000;
        tapDelay_1_reg[2] <= 18'sb000000000000000000;
        tapDelay_1_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_1_reg[0] <= tapDelay_1_reg_next[0];
          tapDelay_1_reg[1] <= tapDelay_1_reg_next[1];
          tapDelay_1_reg[2] <= tapDelay_1_reg_next[2];
          tapDelay_1_reg[3] <= tapDelay_1_reg_next[3];
        end
      end
    end

  assign tapOutData_1[0] = tapDelay_1_reg[0];
  assign tapOutData_1[1] = tapDelay_1_reg[1];
  assign tapOutData_1[2] = tapDelay_1_reg[2];
  assign tapOutData_1[3] = tapDelay_1_reg[3];
  assign tapOutData_1[4] = dataIn_0;
  assign tapDelay_1_reg_next[0] = tapDelay_1_reg[1];
  assign tapDelay_1_reg_next[1] = tapDelay_1_reg[2];
  assign tapDelay_1_reg_next[2] = tapDelay_1_reg[3];
  assign tapDelay_1_reg_next[3] = dataIn_0;



  assign tapOutData_1_0 = tapOutData_1[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_1 <= tapOutData_1_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_5_process
      if (reset == 1'b1) begin
        tapDelay_5_reg[0] <= 18'sb000000000000000000;
        tapDelay_5_reg[1] <= 18'sb000000000000000000;
        tapDelay_5_reg[2] <= 18'sb000000000000000000;
        tapDelay_5_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_5_reg[0] <= tapDelay_5_reg_next[0];
          tapDelay_5_reg[1] <= tapDelay_5_reg_next[1];
          tapDelay_5_reg[2] <= tapDelay_5_reg_next[2];
          tapDelay_5_reg[3] <= tapDelay_5_reg_next[3];
        end
      end
    end

  assign tapOutData_5[0] = tapDelay_5_reg[0];
  assign tapOutData_5[1] = tapDelay_5_reg[1];
  assign tapOutData_5[2] = tapDelay_5_reg[2];
  assign tapOutData_5[3] = tapDelay_5_reg[3];
  assign tapOutData_5[4] = dataIn_4;
  assign tapDelay_5_reg_next[0] = tapDelay_5_reg[1];
  assign tapDelay_5_reg_next[1] = tapDelay_5_reg[2];
  assign tapDelay_5_reg_next[2] = tapDelay_5_reg[3];
  assign tapDelay_5_reg_next[3] = dataIn_4;



  assign tapOutData_5_0 = tapOutData_5[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_2 <= tapOutData_5_0;
        end
      end
    end



  assign adder_1 = {preAdd1_stage1_1[17], preAdd1_stage1_1};
  assign adder_2 = {preAdd1_stage1_2[17], preAdd1_stage1_2};
  assign preAdd1_stage1_add_1 = adder_1 + adder_2;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_1 <= preAdd1_stage1_add_1;
        end
      end
    end



  assign tapOutData_1_4 = tapOutData_1[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_3 <= tapOutData_1_4;
        end
      end
    end



  assign tapOutData_5_4 = tapOutData_5[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_4 <= tapOutData_5_4;
        end
      end
    end



  assign adder_4 = {preAdd1_stage1_3[17], preAdd1_stage1_3};
  assign adder_5 = {preAdd1_stage1_4[17], preAdd1_stage1_4};
  assign preAdd1_stage1_add_2 = adder_4 + adder_5;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_2 <= preAdd1_stage1_add_2;
        end
      end
    end



  assign adder_7 = {preAdd1_stage2_1[18], preAdd1_stage2_1};
  assign adder_8 = {preAdd1_stage2_2[18], preAdd1_stage2_2};
  assign preAdd1_stage2_add_1 = adder_7 + adder_8;



  always @(posedge clk or posedge reset)
    begin : preAdd1_final_process
      if (reset == 1'b1) begin
        preAdd1_final_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_final_reg <= preAdd1_stage2_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : preAdd1_balance_process
      if (reset == 1'b1) begin
        preAdd1_balance_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_balance_reg <= preAdd1_final_reg;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay1_process
      if (reset == 1'b1) begin
        multInDelay1_reg[0] <= 20'sb00000000000000000000;
        multInDelay1_reg[1] <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          multInDelay1_reg[0] <= multInDelay1_reg_next[0];
          multInDelay1_reg[1] <= multInDelay1_reg_next[1];
        end
      end
    end

  assign multInReg1 = multInDelay1_reg[1];
  assign multInDelay1_reg_next[0] = preAdd1_balance_reg;
  assign multInDelay1_reg_next[1] = multInDelay1_reg[0];



  assign multOut1 = 18'sb000111011000011110 * multInReg1;



  always @(posedge clk or posedge reset)
    begin : multOutDelay1_process
      if (reset == 1'b1) begin
        multOutDelay1_reg[0] <= 38'sh0000000000;
        multOutDelay1_reg[1] <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          multOutDelay1_reg[0] <= multOutDelay1_reg_next[0];
          multOutDelay1_reg[1] <= multOutDelay1_reg_next[1];
        end
      end
    end

  assign multOutReg1 = multOutDelay1_reg[1];
  assign multOutDelay1_reg_next[0] = multOut1;
  assign multOutDelay1_reg_next[1] = multOutDelay1_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage1_1_reg_process
      if (reset == 1'b1) begin
        add_stage1_1 <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage1_1 <= multOutReg1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_2_process
      if (reset == 1'b1) begin
        tapDelay_2_reg[0] <= 18'sb000000000000000000;
        tapDelay_2_reg[1] <= 18'sb000000000000000000;
        tapDelay_2_reg[2] <= 18'sb000000000000000000;
        tapDelay_2_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_2_reg[0] <= tapDelay_2_reg_next[0];
          tapDelay_2_reg[1] <= tapDelay_2_reg_next[1];
          tapDelay_2_reg[2] <= tapDelay_2_reg_next[2];
          tapDelay_2_reg[3] <= tapDelay_2_reg_next[3];
        end
      end
    end

  assign tapOutData_2[0] = tapDelay_2_reg[0];
  assign tapOutData_2[1] = tapDelay_2_reg[1];
  assign tapOutData_2[2] = tapDelay_2_reg[2];
  assign tapOutData_2[3] = tapDelay_2_reg[3];
  assign tapOutData_2[4] = dataIn_1;
  assign tapDelay_2_reg_next[0] = tapDelay_2_reg[1];
  assign tapDelay_2_reg_next[1] = tapDelay_2_reg[2];
  assign tapDelay_2_reg_next[2] = tapDelay_2_reg[3];
  assign tapDelay_2_reg_next[3] = dataIn_1;



  assign tapOutData_2_0 = tapOutData_2[0];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_1 <= tapOutData_2_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_4_process
      if (reset == 1'b1) begin
        tapDelay_4_reg[0] <= 18'sb000000000000000000;
        tapDelay_4_reg[1] <= 18'sb000000000000000000;
        tapDelay_4_reg[2] <= 18'sb000000000000000000;
        tapDelay_4_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_4_reg[0] <= tapDelay_4_reg_next[0];
          tapDelay_4_reg[1] <= tapDelay_4_reg_next[1];
          tapDelay_4_reg[2] <= tapDelay_4_reg_next[2];
          tapDelay_4_reg[3] <= tapDelay_4_reg_next[3];
        end
      end
    end

  assign tapOutData_4[0] = tapDelay_4_reg[0];
  assign tapOutData_4[1] = tapDelay_4_reg[1];
  assign tapOutData_4[2] = tapDelay_4_reg[2];
  assign tapOutData_4[3] = tapDelay_4_reg[3];
  assign tapOutData_4[4] = dataIn_3;
  assign tapDelay_4_reg_next[0] = tapDelay_4_reg[1];
  assign tapDelay_4_reg_next[1] = tapDelay_4_reg[2];
  assign tapDelay_4_reg_next[2] = tapDelay_4_reg[3];
  assign tapDelay_4_reg_next[3] = dataIn_3;



  assign tapOutData_4_0 = tapOutData_4[0];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_2 <= tapOutData_4_0;
        end
      end
    end



  assign adder_10 = {preAdd2_stage1_1[17], preAdd2_stage1_1};
  assign adder_11 = {preAdd2_stage1_2[17], preAdd2_stage1_2};
  assign preAdd2_stage1_add_1 = adder_10 + adder_11;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage2_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage2_1 <= preAdd2_stage1_add_1;
        end
      end
    end



  assign tapOutData_1_1 = tapOutData_1[1];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_3 <= tapOutData_1_1;
        end
      end
    end



  assign tapOutData_5_1 = tapOutData_5[1];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_4 <= tapOutData_5_1;
        end
      end
    end



  assign adder_13 = {preAdd2_stage1_3[17], preAdd2_stage1_3};
  assign adder_14 = {preAdd2_stage1_4[17], preAdd2_stage1_4};
  assign preAdd2_stage1_add_2 = adder_13 + adder_14;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage2_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage2_2 <= preAdd2_stage1_add_2;
        end
      end
    end



  assign adder_16 = {preAdd2_stage2_1[18], preAdd2_stage2_1};
  assign adder_17 = {preAdd2_stage2_2[18], preAdd2_stage2_2};
  assign preAdd2_stage2_add_1 = adder_16 + adder_17;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage3_1_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage3_1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage3_1 <= preAdd2_stage2_add_1;
        end
      end
    end



  assign tapOutData_1_3 = tapOutData_1[3];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_5_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_5 <= tapOutData_1_3;
        end
      end
    end



  assign tapOutData_5_3 = tapOutData_5[3];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_6_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_6 <= tapOutData_5_3;
        end
      end
    end



  assign adder_19 = {preAdd2_stage1_5[17], preAdd2_stage1_5};
  assign adder_20 = {preAdd2_stage1_6[17], preAdd2_stage1_6};
  assign preAdd2_stage1_add_3 = adder_19 + adder_20;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage2_3_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage2_3 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage2_3 <= preAdd2_stage1_add_3;
        end
      end
    end



  assign tapOutData_2_4 = tapOutData_2[4];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_7_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_7 <= tapOutData_2_4;
        end
      end
    end



  assign tapOutData_4_4 = tapOutData_4[4];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_8_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_8 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_8 <= tapOutData_4_4;
        end
      end
    end



  assign adder_22 = {preAdd2_stage1_7[17], preAdd2_stage1_7};
  assign adder_23 = {preAdd2_stage1_8[17], preAdd2_stage1_8};
  assign preAdd2_stage1_add_4 = adder_22 + adder_23;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage2_4_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage2_4 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage2_4 <= preAdd2_stage1_add_4;
        end
      end
    end



  assign adder_25 = {preAdd2_stage2_3[18], preAdd2_stage2_3};
  assign adder_26 = {preAdd2_stage2_4[18], preAdd2_stage2_4};
  assign preAdd2_stage2_add_2 = adder_25 + adder_26;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage3_2_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage3_2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage3_2 <= preAdd2_stage2_add_2;
        end
      end
    end



  assign adder_28 = {preAdd2_stage3_1[19], preAdd2_stage3_1};
  assign adder_29 = {preAdd2_stage3_2[19], preAdd2_stage3_2};
  assign preAdd2_stage3_add_1 = adder_28 + adder_29;



  always @(posedge clk or posedge reset)
    begin : preAdd2_final_process
      if (reset == 1'b1) begin
        preAdd2_final_reg <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_final_reg <= preAdd2_stage3_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay2_process
      if (reset == 1'b1) begin
        multInDelay2_reg[0] <= 21'sb000000000000000000000;
        multInDelay2_reg[1] <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          multInDelay2_reg[0] <= multInDelay2_reg_next[0];
          multInDelay2_reg[1] <= multInDelay2_reg_next[1];
        end
      end
    end

  assign multInReg2 = multInDelay2_reg[1];
  assign multInDelay2_reg_next[0] = preAdd2_final_reg;
  assign multInDelay2_reg_next[1] = multInDelay2_reg[0];



  assign multOut2 = 18'sb001110011000010000 * multInReg2;



  always @(posedge clk or posedge reset)
    begin : multOutDelay2_process
      if (reset == 1'b1) begin
        multOutDelay2_reg[0] <= 39'sh0000000000;
        multOutDelay2_reg[1] <= 39'sh0000000000;
      end
      else begin
        if (enb) begin
          multOutDelay2_reg[0] <= multOutDelay2_reg_next[0];
          multOutDelay2_reg[1] <= multOutDelay2_reg_next[1];
        end
      end
    end

  assign multOutReg2 = multOutDelay2_reg[1];
  assign multOutDelay2_reg_next[0] = multOut2;
  assign multOutDelay2_reg_next[1] = multOutDelay2_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage1_2_reg_process
      if (reset == 1'b1) begin
        add_stage1_2 <= 39'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage1_2 <= multOutReg2;
        end
      end
    end



  assign adder_add_cast = {{2{add_stage1_1[37]}}, add_stage1_1};
  assign adder_add_cast_1 = {add_stage1_2[38], add_stage1_2};
  assign add_stage1_add_1 = adder_add_cast + adder_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : add_stage2_1_reg_process
      if (reset == 1'b1) begin
        add_stage2_1 <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage2_1 <= add_stage1_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_3_process
      if (reset == 1'b1) begin
        tapDelay_3_reg[0] <= 18'sb000000000000000000;
        tapDelay_3_reg[1] <= 18'sb000000000000000000;
        tapDelay_3_reg[2] <= 18'sb000000000000000000;
        tapDelay_3_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_3_reg[0] <= tapDelay_3_reg_next[0];
          tapDelay_3_reg[1] <= tapDelay_3_reg_next[1];
          tapDelay_3_reg[2] <= tapDelay_3_reg_next[2];
          tapDelay_3_reg[3] <= tapDelay_3_reg_next[3];
        end
      end
    end

  assign tapOutData_3[0] = tapDelay_3_reg[0];
  assign tapOutData_3[1] = tapDelay_3_reg[1];
  assign tapOutData_3[2] = tapDelay_3_reg[2];
  assign tapOutData_3[3] = tapDelay_3_reg[3];
  assign tapOutData_3[4] = dataIn_2;
  assign tapDelay_3_reg_next[0] = tapDelay_3_reg[1];
  assign tapDelay_3_reg_next[1] = tapDelay_3_reg[2];
  assign tapDelay_3_reg_next[2] = tapDelay_3_reg[3];
  assign tapDelay_3_reg_next[3] = dataIn_2;



  assign tapOutData_3_0 = tapOutData_3[0];

  always @(posedge clk or posedge reset)
    begin : preAdd3_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd3_stage1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_stage1_1 <= tapOutData_3_0;
        end
      end
    end



  assign tapOutData_1_2 = tapOutData_1[2];

  always @(posedge clk or posedge reset)
    begin : preAdd3_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd3_stage1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_stage1_2 <= tapOutData_1_2;
        end
      end
    end



  assign adder_32 = {preAdd3_stage1_1[17], preAdd3_stage1_1};
  assign adder_33 = {preAdd3_stage1_2[17], preAdd3_stage1_2};
  assign preAdd3_stage1_add_1 = adder_32 + adder_33;



  always @(posedge clk or posedge reset)
    begin : preAdd3_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd3_stage2_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_stage2_1 <= preAdd3_stage1_add_1;
        end
      end
    end



  assign tapOutData_5_2 = tapOutData_5[2];

  always @(posedge clk or posedge reset)
    begin : preAdd3_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd3_stage1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_stage1_3 <= tapOutData_5_2;
        end
      end
    end



  assign tapOutData_3_4 = tapOutData_3[4];

  always @(posedge clk or posedge reset)
    begin : preAdd3_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd3_stage1_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_stage1_4 <= tapOutData_3_4;
        end
      end
    end



  assign adder_35 = {preAdd3_stage1_3[17], preAdd3_stage1_3};
  assign adder_36 = {preAdd3_stage1_4[17], preAdd3_stage1_4};
  assign preAdd3_stage1_add_2 = adder_35 + adder_36;



  always @(posedge clk or posedge reset)
    begin : preAdd3_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd3_stage2_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_stage2_2 <= preAdd3_stage1_add_2;
        end
      end
    end



  assign adder_38 = {preAdd3_stage2_1[18], preAdd3_stage2_1};
  assign adder_39 = {preAdd3_stage2_2[18], preAdd3_stage2_2};
  assign preAdd3_stage2_add_1 = adder_38 + adder_39;



  always @(posedge clk or posedge reset)
    begin : preAdd3_final_process
      if (reset == 1'b1) begin
        preAdd3_final_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_final_reg <= preAdd3_stage2_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : preAdd3_balance_process
      if (reset == 1'b1) begin
        preAdd3_balance_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_balance_reg <= preAdd3_final_reg;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay3_process
      if (reset == 1'b1) begin
        multInDelay3_reg[0] <= 20'sb00000000000000000000;
        multInDelay3_reg[1] <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          multInDelay3_reg[0] <= multInDelay3_reg_next[0];
          multInDelay3_reg[1] <= multInDelay3_reg_next[1];
        end
      end
    end

  assign multInReg3 = multInDelay3_reg[1];
  assign multInDelay3_reg_next[0] = preAdd3_balance_reg;
  assign multInDelay3_reg_next[1] = multInDelay3_reg[0];



  assign multOut3 = 18'sb010001111101010001 * multInReg3;



  always @(posedge clk or posedge reset)
    begin : multOutDelay3_process
      if (reset == 1'b1) begin
        multOutDelay3_reg[0] <= 38'sh0000000000;
        multOutDelay3_reg[1] <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          multOutDelay3_reg[0] <= multOutDelay3_reg_next[0];
          multOutDelay3_reg[1] <= multOutDelay3_reg_next[1];
        end
      end
    end

  assign multOutReg3 = multOutDelay3_reg[1];
  assign multOutDelay3_reg_next[0] = multOut3;
  assign multOutDelay3_reg_next[1] = multOutDelay3_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage1_3_reg_process
      if (reset == 1'b1) begin
        add_stage1_3 <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage1_3 <= multOutReg3;
        end
      end
    end



  assign tapOutData_2_1 = tapOutData_2[1];

  always @(posedge clk or posedge reset)
    begin : preAdd4_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd4_stage1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_stage1_1 <= tapOutData_2_1;
        end
      end
    end



  assign tapOutData_4_1 = tapOutData_4[1];

  always @(posedge clk or posedge reset)
    begin : preAdd4_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd4_stage1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_stage1_2 <= tapOutData_4_1;
        end
      end
    end



  assign adder_41 = {preAdd4_stage1_1[17], preAdd4_stage1_1};
  assign adder_42 = {preAdd4_stage1_2[17], preAdd4_stage1_2};
  assign preAdd4_stage1_add_1 = adder_41 + adder_42;



  always @(posedge clk or posedge reset)
    begin : preAdd4_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd4_stage2_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_stage2_1 <= preAdd4_stage1_add_1;
        end
      end
    end



  assign tapOutData_2_3 = tapOutData_2[3];

  always @(posedge clk or posedge reset)
    begin : preAdd4_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd4_stage1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_stage1_3 <= tapOutData_2_3;
        end
      end
    end



  assign tapOutData_4_3 = tapOutData_4[3];

  always @(posedge clk or posedge reset)
    begin : preAdd4_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd4_stage1_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_stage1_4 <= tapOutData_4_3;
        end
      end
    end



  assign adder_44 = {preAdd4_stage1_3[17], preAdd4_stage1_3};
  assign adder_45 = {preAdd4_stage1_4[17], preAdd4_stage1_4};
  assign preAdd4_stage1_add_2 = adder_44 + adder_45;



  always @(posedge clk or posedge reset)
    begin : preAdd4_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd4_stage2_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_stage2_2 <= preAdd4_stage1_add_2;
        end
      end
    end



  assign adder_47 = {preAdd4_stage2_1[18], preAdd4_stage2_1};
  assign adder_48 = {preAdd4_stage2_2[18], preAdd4_stage2_2};
  assign preAdd4_stage2_add_1 = adder_47 + adder_48;



  always @(posedge clk or posedge reset)
    begin : preAdd4_final_process
      if (reset == 1'b1) begin
        preAdd4_final_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_final_reg <= preAdd4_stage2_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : preAdd4_balance_process
      if (reset == 1'b1) begin
        preAdd4_balance_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd4_balance_reg <= preAdd4_final_reg;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay4_process
      if (reset == 1'b1) begin
        multInDelay4_reg[0] <= 20'sb00000000000000000000;
        multInDelay4_reg[1] <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          multInDelay4_reg[0] <= multInDelay4_reg_next[0];
          multInDelay4_reg[1] <= multInDelay4_reg_next[1];
        end
      end
    end

  assign multInReg4 = multInDelay4_reg[1];
  assign multInDelay4_reg_next[0] = preAdd4_balance_reg;
  assign multInDelay4_reg_next[1] = multInDelay4_reg[0];



  assign multOut4 = 18'sb011100000000011011 * multInReg4;



  always @(posedge clk or posedge reset)
    begin : multOutDelay4_process
      if (reset == 1'b1) begin
        multOutDelay4_reg[0] <= 38'sh0000000000;
        multOutDelay4_reg[1] <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          multOutDelay4_reg[0] <= multOutDelay4_reg_next[0];
          multOutDelay4_reg[1] <= multOutDelay4_reg_next[1];
        end
      end
    end

  assign multOutReg4 = multOutDelay4_reg[1];
  assign multOutDelay4_reg_next[0] = multOut4;
  assign multOutDelay4_reg_next[1] = multOutDelay4_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage1_4_reg_process
      if (reset == 1'b1) begin
        add_stage1_4 <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage1_4 <= multOutReg4;
        end
      end
    end



  assign adder_add_cast_2 = {add_stage1_3[37], add_stage1_3};
  assign adder_add_cast_3 = {add_stage1_4[37], add_stage1_4};
  assign add_stage1_add_2 = adder_add_cast_2 + adder_add_cast_3;



  always @(posedge clk or posedge reset)
    begin : add_stage2_2_reg_process
      if (reset == 1'b1) begin
        add_stage2_2 <= 39'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage2_2 <= add_stage1_add_2;
        end
      end
    end



  assign adder_add_cast_4 = {add_stage2_1[39], add_stage2_1};
  assign adder_add_cast_5 = {{2{add_stage2_2[38]}}, add_stage2_2};
  assign add_stage2_add_1 = adder_add_cast_4 + adder_add_cast_5;



  always @(posedge clk or posedge reset)
    begin : add_stage3_1_reg_process
      if (reset == 1'b1) begin
        add_stage3_1 <= 41'sh00000000000;
      end
      else begin
        if (enb) begin
          add_stage3_1 <= add_stage2_add_1;
        end
      end
    end



  assign tapOutData_3_1 = tapOutData_3[1];

  always @(posedge clk or posedge reset)
    begin : preAdd5_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage1_1 <= tapOutData_3_1;
        end
      end
    end



  assign tapOutData_2_2 = tapOutData_2[2];

  always @(posedge clk or posedge reset)
    begin : preAdd5_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage1_2 <= tapOutData_2_2;
        end
      end
    end



  assign adder_52 = {preAdd5_stage1_1[17], preAdd5_stage1_1};
  assign adder_53 = {preAdd5_stage1_2[17], preAdd5_stage1_2};
  assign preAdd5_stage1_add_1 = adder_52 + adder_53;



  always @(posedge clk or posedge reset)
    begin : preAdd5_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage2_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage2_1 <= preAdd5_stage1_add_1;
        end
      end
    end



  assign tapOutData_3_2 = tapOutData_3[2];

  always @(posedge clk or posedge reset)
    begin : preAdd5_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage1_3 <= tapOutData_3_2;
        end
      end
    end



  assign tapOutData_4_2 = tapOutData_4[2];

  always @(posedge clk or posedge reset)
    begin : preAdd5_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage1_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage1_4 <= tapOutData_4_2;
        end
      end
    end



  assign adder_55 = {preAdd5_stage1_3[17], preAdd5_stage1_3};
  assign adder_56 = {preAdd5_stage1_4[17], preAdd5_stage1_4};
  assign preAdd5_stage1_add_2 = adder_55 + adder_56;



  always @(posedge clk or posedge reset)
    begin : preAdd5_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage2_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage2_2 <= preAdd5_stage1_add_2;
        end
      end
    end



  assign adder_58 = {preAdd5_stage2_1[18], preAdd5_stage2_1};
  assign adder_59 = {preAdd5_stage2_2[18], preAdd5_stage2_2};
  assign preAdd5_stage2_add_1 = adder_58 + adder_59;



  always @(posedge clk or posedge reset)
    begin : preAdd5_stage3_1_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage3_1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage3_1 <= preAdd5_stage2_add_1;
        end
      end
    end



  assign tapOutData_3_3 = tapOutData_3[3];

  always @(posedge clk or posedge reset)
    begin : preAdd5_stage3_2_reg_process
      if (reset == 1'b1) begin
        preAdd5_stage3_2_reg_reg[0] <= 18'sb000000000000000000;
        preAdd5_stage3_2_reg_reg[1] <= 18'sb000000000000000000;
        preAdd5_stage3_2_reg_reg[2] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_stage3_2_reg_reg[0] <= preAdd5_stage3_2_reg_reg_next[0];
          preAdd5_stage3_2_reg_reg[1] <= preAdd5_stage3_2_reg_reg_next[1];
          preAdd5_stage3_2_reg_reg[2] <= preAdd5_stage3_2_reg_reg_next[2];
        end
      end
    end

  assign preAdd5_stage3_2 = preAdd5_stage3_2_reg_reg[2];
  assign preAdd5_stage3_2_reg_reg_next[0] = tapOutData_3_3;
  assign preAdd5_stage3_2_reg_reg_next[1] = preAdd5_stage3_2_reg_reg[0];
  assign preAdd5_stage3_2_reg_reg_next[2] = preAdd5_stage3_2_reg_reg[1];



  assign adder_61 = {preAdd5_stage3_1[19], preAdd5_stage3_1};
  assign adder_62 = {{3{preAdd5_stage3_2[17]}}, preAdd5_stage3_2};
  assign preAdd5_stage3_add_1 = adder_61 + adder_62;



  always @(posedge clk or posedge reset)
    begin : preAdd5_final_process
      if (reset == 1'b1) begin
        preAdd5_final_reg <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          preAdd5_final_reg <= preAdd5_stage3_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay5_process
      if (reset == 1'b1) begin
        multInDelay5_reg[0] <= 21'sb000000000000000000000;
        multInDelay5_reg[1] <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          multInDelay5_reg[0] <= multInDelay5_reg_next[0];
          multInDelay5_reg[1] <= multInDelay5_reg_next[1];
        end
      end
    end

  assign multInReg5 = multInDelay5_reg[1];
  assign multInDelay5_reg_next[0] = preAdd5_final_reg;
  assign multInDelay5_reg_next[1] = multInDelay5_reg[0];



  assign multOut5 = 18'sb011111111111111111 * multInReg5;



  always @(posedge clk or posedge reset)
    begin : multOutDelay5_process
      if (reset == 1'b1) begin
        multOutDelay5_reg[0] <= 39'sh0000000000;
        multOutDelay5_reg[1] <= 39'sh0000000000;
      end
      else begin
        if (enb) begin
          multOutDelay5_reg[0] <= multOutDelay5_reg_next[0];
          multOutDelay5_reg[1] <= multOutDelay5_reg_next[1];
        end
      end
    end

  assign multOutReg5 = multOutDelay5_reg[1];
  assign multOutDelay5_reg_next[0] = multOut5;
  assign multOutDelay5_reg_next[1] = multOutDelay5_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage3_2_reg_process
      if (reset == 1'b1) begin
        add_stage3_2_reg_reg[0] <= 39'sh0000000000;
        add_stage3_2_reg_reg[1] <= 39'sh0000000000;
        add_stage3_2_reg_reg[2] <= 39'sh0000000000;
      end
      else begin
        if (enb) begin
          add_stage3_2_reg_reg[0] <= add_stage3_2_reg_reg_next[0];
          add_stage3_2_reg_reg[1] <= add_stage3_2_reg_reg_next[1];
          add_stage3_2_reg_reg[2] <= add_stage3_2_reg_reg_next[2];
        end
      end
    end

  assign add_stage3_2 = add_stage3_2_reg_reg[2];
  assign add_stage3_2_reg_reg_next[0] = multOutReg5;
  assign add_stage3_2_reg_reg_next[1] = add_stage3_2_reg_reg[0];
  assign add_stage3_2_reg_reg_next[2] = add_stage3_2_reg_reg[1];



  assign adder_add_cast_6 = {add_stage3_1[40], add_stage3_1};
  assign adder_add_cast_7 = {{3{add_stage3_2[38]}}, add_stage3_2};
  assign add_stage3_add_1 = adder_add_cast_6 + adder_add_cast_7;



  always @(posedge clk or posedge reset)
    begin : add_final_process
      if (reset == 1'b1) begin
        add_final_reg <= 42'sh00000000000;
      end
      else begin
        if (enb) begin
          add_final_reg <= add_stage3_add_1;
        end
      end
    end



  assign add_final_reg_conv = add_final_reg[38:21];



  always @(posedge clk or posedge reset)
    begin : dataOut_1_process
      if (reset == 1'b1) begin
        dataOut_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          dataOut_2 <= add_final_reg_conv;
        end
      end
    end



  // Delay Pixel
  always @(posedge clk or posedge reset)
    begin : vStartOut_tap_latency_process
      if (reset == 1'b1) begin
        vStartOut_tap_latency_reg[0] <= 1'b0;
        vStartOut_tap_latency_reg[1] <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          vStartOut_tap_latency_reg[0] <= vStartOut_tap_latency_reg_next[0];
          vStartOut_tap_latency_reg[1] <= vStartOut_tap_latency_reg_next[1];
        end
      end
    end

  assign vStartIn_reg = vStartOut_tap_latency_reg[1];
  assign vStartOut_tap_latency_reg_next[0] = vStartIn;
  assign vStartOut_tap_latency_reg_next[1] = vStartOut_tap_latency_reg[0];



  assign vStartIn_reg_vldSig = vStartIn_reg & processData;



  // Delay Pixel
  always @(posedge clk or posedge reset)
    begin : vStartOut_fir_latency_process
      if (reset == 1'b1) begin
        vStartOut_fir_latency_reg[0] <= 1'b0;
        vStartOut_fir_latency_reg[1] <= 1'b0;
        vStartOut_fir_latency_reg[2] <= 1'b0;
        vStartOut_fir_latency_reg[3] <= 1'b0;
        vStartOut_fir_latency_reg[4] <= 1'b0;
        vStartOut_fir_latency_reg[5] <= 1'b0;
        vStartOut_fir_latency_reg[6] <= 1'b0;
        vStartOut_fir_latency_reg[7] <= 1'b0;
        vStartOut_fir_latency_reg[8] <= 1'b0;
        vStartOut_fir_latency_reg[9] <= 1'b0;
        vStartOut_fir_latency_reg[10] <= 1'b0;
        vStartOut_fir_latency_reg[11] <= 1'b0;
        vStartOut_fir_latency_reg[12] <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartOut_fir_latency_reg[0] <= vStartOut_fir_latency_reg_next[0];
          vStartOut_fir_latency_reg[1] <= vStartOut_fir_latency_reg_next[1];
          vStartOut_fir_latency_reg[2] <= vStartOut_fir_latency_reg_next[2];
          vStartOut_fir_latency_reg[3] <= vStartOut_fir_latency_reg_next[3];
          vStartOut_fir_latency_reg[4] <= vStartOut_fir_latency_reg_next[4];
          vStartOut_fir_latency_reg[5] <= vStartOut_fir_latency_reg_next[5];
          vStartOut_fir_latency_reg[6] <= vStartOut_fir_latency_reg_next[6];
          vStartOut_fir_latency_reg[7] <= vStartOut_fir_latency_reg_next[7];
          vStartOut_fir_latency_reg[8] <= vStartOut_fir_latency_reg_next[8];
          vStartOut_fir_latency_reg[9] <= vStartOut_fir_latency_reg_next[9];
          vStartOut_fir_latency_reg[10] <= vStartOut_fir_latency_reg_next[10];
          vStartOut_fir_latency_reg[11] <= vStartOut_fir_latency_reg_next[11];
          vStartOut_fir_latency_reg[12] <= vStartOut_fir_latency_reg_next[12];
        end
      end
    end

  assign vStartOut = vStartOut_fir_latency_reg[12];
  assign vStartOut_fir_latency_reg_next[0] = vStartIn_reg_vldSig;
  assign vStartOut_fir_latency_reg_next[1] = vStartOut_fir_latency_reg[0];
  assign vStartOut_fir_latency_reg_next[2] = vStartOut_fir_latency_reg[1];
  assign vStartOut_fir_latency_reg_next[3] = vStartOut_fir_latency_reg[2];
  assign vStartOut_fir_latency_reg_next[4] = vStartOut_fir_latency_reg[3];
  assign vStartOut_fir_latency_reg_next[5] = vStartOut_fir_latency_reg[4];
  assign vStartOut_fir_latency_reg_next[6] = vStartOut_fir_latency_reg[5];
  assign vStartOut_fir_latency_reg_next[7] = vStartOut_fir_latency_reg[6];
  assign vStartOut_fir_latency_reg_next[8] = vStartOut_fir_latency_reg[7];
  assign vStartOut_fir_latency_reg_next[9] = vStartOut_fir_latency_reg[8];
  assign vStartOut_fir_latency_reg_next[10] = vStartOut_fir_latency_reg[9];
  assign vStartOut_fir_latency_reg_next[11] = vStartOut_fir_latency_reg[10];
  assign vStartOut_fir_latency_reg_next[12] = vStartOut_fir_latency_reg[11];



  // Delay Horizontal Start
  always @(posedge clk or posedge reset)
    begin : vEndOut_tap_latency_process
      if (reset == 1'b1) begin
        vEndOut_tap_latency_reg[0] <= 1'b0;
        vEndOut_tap_latency_reg[1] <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          vEndOut_tap_latency_reg[0] <= vEndOut_tap_latency_reg_next[0];
          vEndOut_tap_latency_reg[1] <= vEndOut_tap_latency_reg_next[1];
        end
      end
    end

  assign vEndIn_reg = vEndOut_tap_latency_reg[1];
  assign vEndOut_tap_latency_reg_next[0] = vEndIn;
  assign vEndOut_tap_latency_reg_next[1] = vEndOut_tap_latency_reg[0];



  assign vEndIn_reg_vldSig = vEndIn_reg & processData;



  // Delay Horizontal Start
  always @(posedge clk or posedge reset)
    begin : vEndOut_fir_latency_process
      if (reset == 1'b1) begin
        vEndOut_fir_latency_reg[0] <= 1'b0;
        vEndOut_fir_latency_reg[1] <= 1'b0;
        vEndOut_fir_latency_reg[2] <= 1'b0;
        vEndOut_fir_latency_reg[3] <= 1'b0;
        vEndOut_fir_latency_reg[4] <= 1'b0;
        vEndOut_fir_latency_reg[5] <= 1'b0;
        vEndOut_fir_latency_reg[6] <= 1'b0;
        vEndOut_fir_latency_reg[7] <= 1'b0;
        vEndOut_fir_latency_reg[8] <= 1'b0;
        vEndOut_fir_latency_reg[9] <= 1'b0;
        vEndOut_fir_latency_reg[10] <= 1'b0;
        vEndOut_fir_latency_reg[11] <= 1'b0;
        vEndOut_fir_latency_reg[12] <= 1'b0;
      end
      else begin
        if (enb) begin
          vEndOut_fir_latency_reg[0] <= vEndOut_fir_latency_reg_next[0];
          vEndOut_fir_latency_reg[1] <= vEndOut_fir_latency_reg_next[1];
          vEndOut_fir_latency_reg[2] <= vEndOut_fir_latency_reg_next[2];
          vEndOut_fir_latency_reg[3] <= vEndOut_fir_latency_reg_next[3];
          vEndOut_fir_latency_reg[4] <= vEndOut_fir_latency_reg_next[4];
          vEndOut_fir_latency_reg[5] <= vEndOut_fir_latency_reg_next[5];
          vEndOut_fir_latency_reg[6] <= vEndOut_fir_latency_reg_next[6];
          vEndOut_fir_latency_reg[7] <= vEndOut_fir_latency_reg_next[7];
          vEndOut_fir_latency_reg[8] <= vEndOut_fir_latency_reg_next[8];
          vEndOut_fir_latency_reg[9] <= vEndOut_fir_latency_reg_next[9];
          vEndOut_fir_latency_reg[10] <= vEndOut_fir_latency_reg_next[10];
          vEndOut_fir_latency_reg[11] <= vEndOut_fir_latency_reg_next[11];
          vEndOut_fir_latency_reg[12] <= vEndOut_fir_latency_reg_next[12];
        end
      end
    end

  assign vEndOut = vEndOut_fir_latency_reg[12];
  assign vEndOut_fir_latency_reg_next[0] = vEndIn_reg_vldSig;
  assign vEndOut_fir_latency_reg_next[1] = vEndOut_fir_latency_reg[0];
  assign vEndOut_fir_latency_reg_next[2] = vEndOut_fir_latency_reg[1];
  assign vEndOut_fir_latency_reg_next[3] = vEndOut_fir_latency_reg[2];
  assign vEndOut_fir_latency_reg_next[4] = vEndOut_fir_latency_reg[3];
  assign vEndOut_fir_latency_reg_next[5] = vEndOut_fir_latency_reg[4];
  assign vEndOut_fir_latency_reg_next[6] = vEndOut_fir_latency_reg[5];
  assign vEndOut_fir_latency_reg_next[7] = vEndOut_fir_latency_reg[6];
  assign vEndOut_fir_latency_reg_next[8] = vEndOut_fir_latency_reg[7];
  assign vEndOut_fir_latency_reg_next[9] = vEndOut_fir_latency_reg[8];
  assign vEndOut_fir_latency_reg_next[10] = vEndOut_fir_latency_reg[9];
  assign vEndOut_fir_latency_reg_next[11] = vEndOut_fir_latency_reg[10];
  assign vEndOut_fir_latency_reg_next[12] = vEndOut_fir_latency_reg[11];



  // Delay Horizontal End
  always @(posedge clk or posedge reset)
    begin : hStartOut_tap_latency_process
      if (reset == 1'b1) begin
        hStartOut_tap_latency_reg[0] <= 1'b0;
        hStartOut_tap_latency_reg[1] <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          hStartOut_tap_latency_reg[0] <= hStartOut_tap_latency_reg_next[0];
          hStartOut_tap_latency_reg[1] <= hStartOut_tap_latency_reg_next[1];
        end
      end
    end

  assign hStartIn_reg = hStartOut_tap_latency_reg[1];
  assign hStartOut_tap_latency_reg_next[0] = hStartIn;
  assign hStartOut_tap_latency_reg_next[1] = hStartOut_tap_latency_reg[0];



  assign hStartIn_reg_vldSig = hStartIn_reg & processData;



  // Delay Horizontal End
  always @(posedge clk or posedge reset)
    begin : hStartOut_fir_latency_process
      if (reset == 1'b1) begin
        hStartOut_fir_latency_reg[0] <= 1'b0;
        hStartOut_fir_latency_reg[1] <= 1'b0;
        hStartOut_fir_latency_reg[2] <= 1'b0;
        hStartOut_fir_latency_reg[3] <= 1'b0;
        hStartOut_fir_latency_reg[4] <= 1'b0;
        hStartOut_fir_latency_reg[5] <= 1'b0;
        hStartOut_fir_latency_reg[6] <= 1'b0;
        hStartOut_fir_latency_reg[7] <= 1'b0;
        hStartOut_fir_latency_reg[8] <= 1'b0;
        hStartOut_fir_latency_reg[9] <= 1'b0;
        hStartOut_fir_latency_reg[10] <= 1'b0;
        hStartOut_fir_latency_reg[11] <= 1'b0;
        hStartOut_fir_latency_reg[12] <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartOut_fir_latency_reg[0] <= hStartOut_fir_latency_reg_next[0];
          hStartOut_fir_latency_reg[1] <= hStartOut_fir_latency_reg_next[1];
          hStartOut_fir_latency_reg[2] <= hStartOut_fir_latency_reg_next[2];
          hStartOut_fir_latency_reg[3] <= hStartOut_fir_latency_reg_next[3];
          hStartOut_fir_latency_reg[4] <= hStartOut_fir_latency_reg_next[4];
          hStartOut_fir_latency_reg[5] <= hStartOut_fir_latency_reg_next[5];
          hStartOut_fir_latency_reg[6] <= hStartOut_fir_latency_reg_next[6];
          hStartOut_fir_latency_reg[7] <= hStartOut_fir_latency_reg_next[7];
          hStartOut_fir_latency_reg[8] <= hStartOut_fir_latency_reg_next[8];
          hStartOut_fir_latency_reg[9] <= hStartOut_fir_latency_reg_next[9];
          hStartOut_fir_latency_reg[10] <= hStartOut_fir_latency_reg_next[10];
          hStartOut_fir_latency_reg[11] <= hStartOut_fir_latency_reg_next[11];
          hStartOut_fir_latency_reg[12] <= hStartOut_fir_latency_reg_next[12];
        end
      end
    end

  assign hStartOut = hStartOut_fir_latency_reg[12];
  assign hStartOut_fir_latency_reg_next[0] = hStartIn_reg_vldSig;
  assign hStartOut_fir_latency_reg_next[1] = hStartOut_fir_latency_reg[0];
  assign hStartOut_fir_latency_reg_next[2] = hStartOut_fir_latency_reg[1];
  assign hStartOut_fir_latency_reg_next[3] = hStartOut_fir_latency_reg[2];
  assign hStartOut_fir_latency_reg_next[4] = hStartOut_fir_latency_reg[3];
  assign hStartOut_fir_latency_reg_next[5] = hStartOut_fir_latency_reg[4];
  assign hStartOut_fir_latency_reg_next[6] = hStartOut_fir_latency_reg[5];
  assign hStartOut_fir_latency_reg_next[7] = hStartOut_fir_latency_reg[6];
  assign hStartOut_fir_latency_reg_next[8] = hStartOut_fir_latency_reg[7];
  assign hStartOut_fir_latency_reg_next[9] = hStartOut_fir_latency_reg[8];
  assign hStartOut_fir_latency_reg_next[10] = hStartOut_fir_latency_reg[9];
  assign hStartOut_fir_latency_reg_next[11] = hStartOut_fir_latency_reg[10];
  assign hStartOut_fir_latency_reg_next[12] = hStartOut_fir_latency_reg[11];



  // Delay Vertical Start
  always @(posedge clk or posedge reset)
    begin : hEndOut_tap_latency_process
      if (reset == 1'b1) begin
        hEndOut_tap_latency_reg[0] <= 1'b0;
        hEndOut_tap_latency_reg[1] <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          hEndOut_tap_latency_reg[0] <= hEndOut_tap_latency_reg_next[0];
          hEndOut_tap_latency_reg[1] <= hEndOut_tap_latency_reg_next[1];
        end
      end
    end

  assign hEndIn_reg = hEndOut_tap_latency_reg[1];
  assign hEndOut_tap_latency_reg_next[0] = hEndIn;
  assign hEndOut_tap_latency_reg_next[1] = hEndOut_tap_latency_reg[0];



  assign hEndIn_reg_vldSig = hEndIn_reg & processData;



  // Delay Vertical Start
  always @(posedge clk or posedge reset)
    begin : hEndOut_fir_latency_process
      if (reset == 1'b1) begin
        hEndOut_fir_latency_reg[0] <= 1'b0;
        hEndOut_fir_latency_reg[1] <= 1'b0;
        hEndOut_fir_latency_reg[2] <= 1'b0;
        hEndOut_fir_latency_reg[3] <= 1'b0;
        hEndOut_fir_latency_reg[4] <= 1'b0;
        hEndOut_fir_latency_reg[5] <= 1'b0;
        hEndOut_fir_latency_reg[6] <= 1'b0;
        hEndOut_fir_latency_reg[7] <= 1'b0;
        hEndOut_fir_latency_reg[8] <= 1'b0;
        hEndOut_fir_latency_reg[9] <= 1'b0;
        hEndOut_fir_latency_reg[10] <= 1'b0;
        hEndOut_fir_latency_reg[11] <= 1'b0;
        hEndOut_fir_latency_reg[12] <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndOut_fir_latency_reg[0] <= hEndOut_fir_latency_reg_next[0];
          hEndOut_fir_latency_reg[1] <= hEndOut_fir_latency_reg_next[1];
          hEndOut_fir_latency_reg[2] <= hEndOut_fir_latency_reg_next[2];
          hEndOut_fir_latency_reg[3] <= hEndOut_fir_latency_reg_next[3];
          hEndOut_fir_latency_reg[4] <= hEndOut_fir_latency_reg_next[4];
          hEndOut_fir_latency_reg[5] <= hEndOut_fir_latency_reg_next[5];
          hEndOut_fir_latency_reg[6] <= hEndOut_fir_latency_reg_next[6];
          hEndOut_fir_latency_reg[7] <= hEndOut_fir_latency_reg_next[7];
          hEndOut_fir_latency_reg[8] <= hEndOut_fir_latency_reg_next[8];
          hEndOut_fir_latency_reg[9] <= hEndOut_fir_latency_reg_next[9];
          hEndOut_fir_latency_reg[10] <= hEndOut_fir_latency_reg_next[10];
          hEndOut_fir_latency_reg[11] <= hEndOut_fir_latency_reg_next[11];
          hEndOut_fir_latency_reg[12] <= hEndOut_fir_latency_reg_next[12];
        end
      end
    end

  assign hEndOut = hEndOut_fir_latency_reg[12];
  assign hEndOut_fir_latency_reg_next[0] = hEndIn_reg_vldSig;
  assign hEndOut_fir_latency_reg_next[1] = hEndOut_fir_latency_reg[0];
  assign hEndOut_fir_latency_reg_next[2] = hEndOut_fir_latency_reg[1];
  assign hEndOut_fir_latency_reg_next[3] = hEndOut_fir_latency_reg[2];
  assign hEndOut_fir_latency_reg_next[4] = hEndOut_fir_latency_reg[3];
  assign hEndOut_fir_latency_reg_next[5] = hEndOut_fir_latency_reg[4];
  assign hEndOut_fir_latency_reg_next[6] = hEndOut_fir_latency_reg[5];
  assign hEndOut_fir_latency_reg_next[7] = hEndOut_fir_latency_reg[6];
  assign hEndOut_fir_latency_reg_next[8] = hEndOut_fir_latency_reg[7];
  assign hEndOut_fir_latency_reg_next[9] = hEndOut_fir_latency_reg[8];
  assign hEndOut_fir_latency_reg_next[10] = hEndOut_fir_latency_reg[9];
  assign hEndOut_fir_latency_reg_next[11] = hEndOut_fir_latency_reg[10];
  assign hEndOut_fir_latency_reg_next[12] = hEndOut_fir_latency_reg[11];



  // Delay Vertical End
  always @(posedge clk or posedge reset)
    begin : validOut_tap_latency_process
      if (reset == 1'b1) begin
        validOut_tap_latency_reg[0] <= 1'b0;
        validOut_tap_latency_reg[1] <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          validOut_tap_latency_reg[0] <= validOut_tap_latency_reg_next[0];
          validOut_tap_latency_reg[1] <= validOut_tap_latency_reg_next[1];
        end
      end
    end

  assign validIn_reg = validOut_tap_latency_reg[1];
  assign validOut_tap_latency_reg_next[0] = validIn;
  assign validOut_tap_latency_reg_next[1] = validOut_tap_latency_reg[0];



  assign validIn_reg_vldSig = validIn_reg & processData;



  // Delay Vertical End
  always @(posedge clk or posedge reset)
    begin : validOut_fir_latency_process
      if (reset == 1'b1) begin
        validOut_fir_latency_reg[0] <= 1'b0;
        validOut_fir_latency_reg[1] <= 1'b0;
        validOut_fir_latency_reg[2] <= 1'b0;
        validOut_fir_latency_reg[3] <= 1'b0;
        validOut_fir_latency_reg[4] <= 1'b0;
        validOut_fir_latency_reg[5] <= 1'b0;
        validOut_fir_latency_reg[6] <= 1'b0;
        validOut_fir_latency_reg[7] <= 1'b0;
        validOut_fir_latency_reg[8] <= 1'b0;
        validOut_fir_latency_reg[9] <= 1'b0;
        validOut_fir_latency_reg[10] <= 1'b0;
        validOut_fir_latency_reg[11] <= 1'b0;
        validOut_fir_latency_reg[12] <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_fir_latency_reg[0] <= validOut_fir_latency_reg_next[0];
          validOut_fir_latency_reg[1] <= validOut_fir_latency_reg_next[1];
          validOut_fir_latency_reg[2] <= validOut_fir_latency_reg_next[2];
          validOut_fir_latency_reg[3] <= validOut_fir_latency_reg_next[3];
          validOut_fir_latency_reg[4] <= validOut_fir_latency_reg_next[4];
          validOut_fir_latency_reg[5] <= validOut_fir_latency_reg_next[5];
          validOut_fir_latency_reg[6] <= validOut_fir_latency_reg_next[6];
          validOut_fir_latency_reg[7] <= validOut_fir_latency_reg_next[7];
          validOut_fir_latency_reg[8] <= validOut_fir_latency_reg_next[8];
          validOut_fir_latency_reg[9] <= validOut_fir_latency_reg_next[9];
          validOut_fir_latency_reg[10] <= validOut_fir_latency_reg_next[10];
          validOut_fir_latency_reg[11] <= validOut_fir_latency_reg_next[11];
          validOut_fir_latency_reg[12] <= validOut_fir_latency_reg_next[12];
        end
      end
    end

  assign validOut = validOut_fir_latency_reg[12];
  assign validOut_fir_latency_reg_next[0] = validIn_reg_vldSig;
  assign validOut_fir_latency_reg_next[1] = validOut_fir_latency_reg[0];
  assign validOut_fir_latency_reg_next[2] = validOut_fir_latency_reg[1];
  assign validOut_fir_latency_reg_next[3] = validOut_fir_latency_reg[2];
  assign validOut_fir_latency_reg_next[4] = validOut_fir_latency_reg[3];
  assign validOut_fir_latency_reg_next[5] = validOut_fir_latency_reg[4];
  assign validOut_fir_latency_reg_next[6] = validOut_fir_latency_reg[5];
  assign validOut_fir_latency_reg_next[7] = validOut_fir_latency_reg[6];
  assign validOut_fir_latency_reg_next[8] = validOut_fir_latency_reg[7];
  assign validOut_fir_latency_reg_next[9] = validOut_fir_latency_reg[8];
  assign validOut_fir_latency_reg_next[10] = validOut_fir_latency_reg[9];
  assign validOut_fir_latency_reg_next[11] = validOut_fir_latency_reg[10];
  assign validOut_fir_latency_reg_next[12] = validOut_fir_latency_reg[11];



  assign dataOut = dataOut_2;

endmodule  // Harris_HW_ip_src_FIR2DKernel_block1

