// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CornerDetection\Harris_HW_ip_src_DATA_MEMORY_block3.v
// Created: 2020-01-15 11:28:57
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Harris_HW_ip_src_DATA_MEMORY_block3
// Source Path: CornerDetection/Harris_HW/HDL Corner Algorithm/GaussianGyGx/LineBuffer/DATA_MEMORY
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Harris_HW_ip_src_DATA_MEMORY_block3
          (clk,
           reset,
           enb,
           Unloading,
           pixelIn,
           hStartIn,
           hEndIn,
           vStartIn,
           vEndIn,
           validIn,
           popEn,
           dataVectorOut_0,
           dataVectorOut_1,
           dataVectorOut_2,
           dataVectorOut_3,
           dataVectorOut_4,
           popOut,
           AllAtEnd);


  input   clk;
  input   reset;
  input   enb;
  input   Unloading;
  input   signed [17:0] pixelIn;  // sfix18
  input   hStartIn;
  input   hEndIn;
  input   vStartIn;
  input   vEndIn;
  input   validIn;
  input   [1:0] popEn;  // ufix2
  output  signed [17:0] dataVectorOut_0;  // sfix18
  output  signed [17:0] dataVectorOut_1;  // sfix18
  output  signed [17:0] dataVectorOut_2;  // sfix18
  output  signed [17:0] dataVectorOut_3;  // sfix18
  output  signed [17:0] dataVectorOut_4;  // sfix18
  output  popOut;
  output  AllAtEnd;


  reg signed [17:0] intdelay_reg [0:2];  // sfix18 [3]
  wire signed [17:0] intdelay_reg_next [0:2];  // sfix18 [3]
  wire signed [17:0] pixelColumn_0;  // sfix18
  reg signed [17:0] pixelColumnO1;  // sfix18
  reg  validREG;
  reg  unloadPop;
  reg  hEndREG;
  reg  hEndREGT;
  wire unloadPopT;
  wire validPop;
  wire PopEnSL;
  wire [9:0] writeAddr1;  // ufix10
  wire pushFIFO2;
  wire [9:0] readAddr2;  // ufix10
  wire popFIFO_2;
  wire EndofLine1;
  wire signed [17:0] pixelColumn1;  // sfix18
  wire PopEnSL_1;
  wire [9:0] writeAddr2;  // ufix10
  wire pushFIFO3;
  wire [9:0] readAddr3;  // ufix10
  wire popFIFO_3;
  wire EndofLine2;
  reg [9:0] writeAddrREG2;  // ufix10
  reg  pushOutREG2;
  wire signed [17:0] pixelColumn2;  // sfix18
  wire PopEnSL_2;
  wire [9:0] writeAddr3;  // ufix10
  wire pushFIFO4;
  wire [9:0] readAddr4;  // ufix10
  wire popFIFO_4;
  wire EndofLine3;
  reg [9:0] writeAddrREG3;  // ufix10
  reg  pushOutREG3;
  wire signed [17:0] pixelColumn3;  // sfix18
  wire PopEnSL_3;
  wire [9:0] writeAddr4;  // ufix10
  wire pushFIFO5;
  wire [9:0] readAddr5;  // ufix10
  wire popFIFO_5;
  wire EndofLine4;
  reg [9:0] writeAddrREG4;  // ufix10
  reg  pushOutREG4;
  wire signed [17:0] pixelColumn4;  // sfix18
  reg  popOut_1;


  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 18'sb000000000000000000;
        intdelay_reg[1] <= 18'sb000000000000000000;
        intdelay_reg[2] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
        end
      end
    end

  assign pixelColumn_0 = intdelay_reg[2];
  assign intdelay_reg_next[0] = pixelIn;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        pixelColumnO1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          pixelColumnO1 <= pixelColumn_0;
        end
      end
    end



  assign dataVectorOut_0 = pixelColumnO1;

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        validREG <= 1'b0;
      end
      else begin
        if (enb) begin
          validREG <= validIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        unloadPop <= 1'b0;
      end
      else begin
        if (enb) begin
          unloadPop <= validREG;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        hEndREG <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndREG <= hEndIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        hEndREGT <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndREGT <= hEndREG;
        end
      end
    end



  assign unloadPopT = hEndREGT & (unloadPop & Unloading);



  assign validPop = validREG | unloadPopT;



  assign PopEnSL = popEn[0];



  Harris_HW_ip_src_PushPopCounterOne_block3 u_PushPopCounterOne (.clk(clk),
                                                                 .reset(reset),
                                                                 .enb(enb),
                                                                 .hStartIn(hStartIn),
                                                                 .popIn(validPop),
                                                                 .popEnable(PopEnSL),
                                                                 .hEndIn(hEndREG),
                                                                 .wrAddr(writeAddr1),  // ufix10
                                                                 .pushOut(pushFIFO2),
                                                                 .rdAddr(readAddr2),  // ufix10
                                                                 .popOut(popFIFO_2),
                                                                 .EndofLine(EndofLine1)
                                                                 );

  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(10),
                                               .DataWidth(18)
                                               )
                                             u_SimpleDualPortRAM_Generic1 (.clk(clk),
                                                                           .enb(enb),
                                                                           .wr_din(pixelColumn_0),
                                                                           .wr_addr(writeAddr1),
                                                                           .wr_en(pushFIFO2),
                                                                           .rd_addr(readAddr2),
                                                                           .rd_dout(pixelColumn1)
                                                                           );

  assign dataVectorOut_1 = pixelColumn1;

  assign PopEnSL_1 = popEn[1];



  Harris_HW_ip_src_PushPopCounter_block3 u_PushPopCounter2 (.clk(clk),
                                                            .reset(reset),
                                                            .enb(enb),
                                                            .hStartIn(hStartIn),
                                                            .popIn(validPop),
                                                            .popEnable(PopEnSL_1),
                                                            .hEndIn(hEndREG),
                                                            .writeCountPrev(writeAddr1),  // ufix10
                                                            .wrAddr(writeAddr2),  // ufix10
                                                            .pushOut(pushFIFO3),
                                                            .rdAddr(readAddr3),  // ufix10
                                                            .popOut(popFIFO_3),
                                                            .EndofLine(EndofLine2)
                                                            );

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        writeAddrREG2 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          writeAddrREG2 <= writeAddr2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_6_process
      if (reset == 1'b1) begin
        pushOutREG2 <= 1'b0;
      end
      else begin
        if (enb) begin
          pushOutREG2 <= pushFIFO3;
        end
      end
    end



  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(10),
                                               .DataWidth(18)
                                               )
                                             u_SimpleDualPortRAM_Generic2 (.clk(clk),
                                                                           .enb(enb),
                                                                           .wr_din(pixelColumn1),
                                                                           .wr_addr(writeAddrREG2),
                                                                           .wr_en(pushOutREG2),
                                                                           .rd_addr(readAddr3),
                                                                           .rd_dout(pixelColumn2)
                                                                           );

  assign dataVectorOut_2 = pixelColumn2;

  assign PopEnSL_2 = popEn[1];



  Harris_HW_ip_src_PushPopCounter_block3 u_PushPopCounter3 (.clk(clk),
                                                            .reset(reset),
                                                            .enb(enb),
                                                            .hStartIn(hStartIn),
                                                            .popIn(validPop),
                                                            .popEnable(PopEnSL_2),
                                                            .hEndIn(hEndREG),
                                                            .writeCountPrev(writeAddr2),  // ufix10
                                                            .wrAddr(writeAddr3),  // ufix10
                                                            .pushOut(pushFIFO4),
                                                            .rdAddr(readAddr4),  // ufix10
                                                            .popOut(popFIFO_4),
                                                            .EndofLine(EndofLine3)
                                                            );

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_7_process
      if (reset == 1'b1) begin
        writeAddrREG3 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          writeAddrREG3 <= writeAddr3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_8_process
      if (reset == 1'b1) begin
        pushOutREG3 <= 1'b0;
      end
      else begin
        if (enb) begin
          pushOutREG3 <= pushFIFO4;
        end
      end
    end



  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(10),
                                               .DataWidth(18)
                                               )
                                             u_SimpleDualPortRAM_Generic3 (.clk(clk),
                                                                           .enb(enb),
                                                                           .wr_din(pixelColumn2),
                                                                           .wr_addr(writeAddrREG3),
                                                                           .wr_en(pushOutREG3),
                                                                           .rd_addr(readAddr4),
                                                                           .rd_dout(pixelColumn3)
                                                                           );

  assign dataVectorOut_3 = pixelColumn3;

  assign PopEnSL_3 = popEn[1];



  Harris_HW_ip_src_PushPopCounter_block3 u_PushPopCounter4 (.clk(clk),
                                                            .reset(reset),
                                                            .enb(enb),
                                                            .hStartIn(hStartIn),
                                                            .popIn(validPop),
                                                            .popEnable(PopEnSL_3),
                                                            .hEndIn(hEndREG),
                                                            .writeCountPrev(writeAddr3),  // ufix10
                                                            .wrAddr(writeAddr4),  // ufix10
                                                            .pushOut(pushFIFO5),
                                                            .rdAddr(readAddr5),  // ufix10
                                                            .popOut(popFIFO_5),
                                                            .EndofLine(EndofLine4)
                                                            );

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_9_process
      if (reset == 1'b1) begin
        writeAddrREG4 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          writeAddrREG4 <= writeAddr4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_10_process
      if (reset == 1'b1) begin
        pushOutREG4 <= 1'b0;
      end
      else begin
        if (enb) begin
          pushOutREG4 <= pushFIFO5;
        end
      end
    end



  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(10),
                                               .DataWidth(18)
                                               )
                                             u_SimpleDualPortRAM_Generic4 (.clk(clk),
                                                                           .enb(enb),
                                                                           .wr_din(pixelColumn3),
                                                                           .wr_addr(writeAddrREG4),
                                                                           .wr_en(pushOutREG4),
                                                                           .rd_addr(readAddr5),
                                                                           .rd_dout(pixelColumn4)
                                                                           );

  assign dataVectorOut_4 = pixelColumn4;

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_11_process
      if (reset == 1'b1) begin
        popOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          popOut_1 <= popFIFO_2;
        end
      end
    end



  assign AllAtEnd = EndofLine4 & (EndofLine3 & (EndofLine1 & EndofLine2));



  assign popOut = popOut_1;

endmodule  // Harris_HW_ip_src_DATA_MEMORY_block3

