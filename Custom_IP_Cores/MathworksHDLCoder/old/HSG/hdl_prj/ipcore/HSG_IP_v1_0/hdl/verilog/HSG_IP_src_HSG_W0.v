// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_HSG_W0.v
// Created: 2018-07-11 13:37:27
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_HSG_W0
// Source Path: HSG/HSG/HSG_W0
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_HSG_W0
          (clk,
           reset,
           enb,
           sobel_gradient_v,
           sobel_gradient_h,
           Bin_Code,
           Grad_Mag);


  input   clk;
  input   reset;
  input   enb;
  input   signed [10:0] sobel_gradient_v;  // sfix11_En3
  input   signed [10:0] sobel_gradient_h;  // sfix11_En3
  output  [7:0] Bin_Code;  // uint8
  output  signed [22:0] Grad_Mag;  // sfix23_En6

  reg signed [10:0] HSG_W0_in0_buff_in_pipe_reg [0:2];  // sfix11 [3]
  wire signed [10:0] HSG_W0_in0_buff_in_pipe_reg_next [0:2];  // sfix11_En3 [3]
  wire signed [10:0] sobel_gradient_v_1;  // sfix11_En3
  wire signed [21:0] tmp;  // sfix22_En6
  reg signed [10:0] HSG_W0_in1_buff_in_pipe_reg [0:2];  // sfix11 [3]
  wire signed [10:0] HSG_W0_in1_buff_in_pipe_reg_next [0:2];  // sfix11_En3 [3]
  wire signed [10:0] sobel_gradient_h_1;  // sfix11_En3
  wire signed [21:0] tmp_1;  // sfix22_En6
  reg signed [21:0] tmp_2;  // sfix22_En6
  wire signed [22:0] tmp_3;  // sfix23_En6
  reg signed [21:0] tmp_4;  // sfix22_En6
  wire signed [22:0] tmp_5;  // sfix23_En6
  wire signed [23:0] adder_add_cast;  // sfix24_En6
  wire signed [23:0] adder_add_cast_1;  // sfix24_En6
  wire signed [23:0] adder_add_temp;  // sfix24_En6
  wire signed [22:0] tmp_6;  // sfix23_En6
  wire tmp_7;
  reg  [0:1] rd_2_reg;  // ufix1 [2]
  wire [0:1] rd_2_reg_next;  // ufix1 [2]
  wire tmp_8;
  wire signed [31:0] Bin_index;  // int32
  wire tmp_9;
  wire signed [10:0] yfi;  // sfix11_En3
  wire signed [11:0] p63yfi_cast;  // sfix12_En3
  wire signed [11:0] p63yfi_cast_1;  // sfix12_En3
  wire signed [10:0] tmp_10;  // sfix11_En3
  wire tmp_11;
  reg  [0:2] rd_1_reg;  // ufix1 [3]
  wire [0:2] rd_1_reg_next;  // ufix1 [3]
  wire tmp_12;
  wire tmp_13;
  reg  tmp_14;
  reg signed [10:0] sobel_gradient_v_2;  // sfix11_En3
  wire signed [10:0] yfi_1;  // sfix11_En3
  wire signed [11:0] p62yfi_cast;  // sfix12_En3
  wire signed [11:0] p62yfi_cast_1;  // sfix12_En3
  reg signed [10:0] tmp_15;  // sfix11_En3
  wire signed [10:0] tmp_16;  // sfix11_En3
  wire signed [10:0] yfi_2;  // sfix11_En3
  wire signed [11:0] p45yfi_cast;  // sfix12_En3
  wire signed [11:0] p45yfi_cast_1;  // sfix12_En3
  reg signed [10:0] dxp;  // sfix11_En3
  wire signed [21:0] tmp_17;  // sfix22_En14
  wire signed [21:0] alpha_1_cast;  // sfix22_En14
  wire alpha_relop1;
  wire signed [21:0] tmp_18;  // sfix22_En12
  wire signed [21:0] alpha_1_cast_1;  // sfix22_En12
  wire alpha_relop1_1;
  reg  tmp_19;
  wire signed [21:0] tmp_20;  // sfix22_En11
  wire signed [21:0] alpha_1_cast_2;  // sfix22_En11
  wire alpha_relop1_2;
  wire signed [31:0] Bin_index_1;  // int32
  reg signed [31:0] Bin_index_2;  // int32
  wire signed [31:0] Bin_index_3;  // int32
  reg signed [31:0] Bin_index_4;  // int32
  wire signed [31:0] tmp_21;  // int32
  reg signed [31:0] Bin_index_5;  // int32
  wire signed [31:0] Bin_index_6;  // int32
  reg  tmp_22;
  reg signed [31:0] rd_15_reg [0:1];  // sfix32 [2]
  wire signed [31:0] rd_15_reg_next [0:1];  // sfix32 [2]
  wire signed [31:0] Bin_index_7;  // int32
  wire signed [31:0] tmp_23;  // int32
  wire signed [31:0] Bin_index_8;  // int32
  reg signed [31:0] rd_27_reg [0:1];  // sfix32 [2]
  wire signed [31:0] rd_27_reg_next [0:1];  // sfix32 [2]
  wire signed [31:0] Bin_index_9;  // int32
  wire signed [31:0] tmp_24;  // int32
  reg signed [31:0] tmp_25;  // int32
  wire signed [21:0] tmp_26;  // sfix22_En14
  reg signed [21:0] tmp_27;  // sfix22_En14
  wire signed [21:0] alpha_1_cast_3;  // sfix22_En14
  wire alpha_relop1_3;
  wire signed [21:0] tmp_28;  // sfix22_En12
  reg signed [21:0] tmp_29;  // sfix22_En12
  wire signed [21:0] alpha_1_cast_4;  // sfix22_En12
  wire alpha_relop1_4;
  reg  tmp_30;
  wire signed [21:0] tmp_31;  // sfix22_En11
  reg signed [21:0] tmp_32;  // sfix22_En11
  wire signed [21:0] alpha_1_cast_5;  // sfix22_En11
  wire alpha_relop1_5;
  wire signed [31:0] Bin_index_10;  // int32
  reg signed [31:0] Bin_index_11;  // int32
  wire signed [31:0] Bin_index_12;  // int32
  reg signed [31:0] Bin_index_13;  // int32
  wire signed [31:0] tmp_33;  // int32
  reg signed [31:0] Bin_index_14;  // int32
  wire signed [31:0] Bin_index_15;  // int32
  reg  tmp_34;
  reg signed [31:0] rd_19_reg [0:1];  // sfix32 [2]
  wire signed [31:0] rd_19_reg_next [0:1];  // sfix32 [2]
  wire signed [31:0] Bin_index_16;  // int32
  wire signed [31:0] tmp_35;  // int32
  wire signed [31:0] Bin_index_17;  // int32
  reg signed [31:0] rd_14_reg [0:1];  // sfix32 [2]
  wire signed [31:0] rd_14_reg_next [0:1];  // sfix32 [2]
  wire signed [31:0] Bin_index_18;  // int32
  wire signed [31:0] tmp_36;  // int32
  reg signed [31:0] rd_13_reg [0:2];  // sfix32 [3]
  wire signed [31:0] rd_13_reg_next [0:2];  // sfix32 [3]
  wire signed [31:0] Bin_index_19;  // int32
  reg signed [31:0] tmp_37;  // int32
  wire signed [31:0] tmp_38;  // int32
  wire signed [31:0] tmp_39;  // int32
  wire [7:0] tmp_40;  // ufix8
  reg signed [22:0] rd_10_reg [0:1];  // sfix23 [2]
  wire signed [22:0] rd_10_reg_next [0:1];  // sfix23_En6 [2]


  always @(posedge clk or posedge reset)
    begin : HSG_W0_in0_buff_in_pipe_process
      if (reset == 1'b1) begin
        HSG_W0_in0_buff_in_pipe_reg[0] <= 11'sb00000000000;
        HSG_W0_in0_buff_in_pipe_reg[1] <= 11'sb00000000000;
        HSG_W0_in0_buff_in_pipe_reg[2] <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          HSG_W0_in0_buff_in_pipe_reg[0] <= HSG_W0_in0_buff_in_pipe_reg_next[0];
          HSG_W0_in0_buff_in_pipe_reg[1] <= HSG_W0_in0_buff_in_pipe_reg_next[1];
          HSG_W0_in0_buff_in_pipe_reg[2] <= HSG_W0_in0_buff_in_pipe_reg_next[2];
        end
      end
    end

  assign sobel_gradient_v_1 = HSG_W0_in0_buff_in_pipe_reg[2];
  assign HSG_W0_in0_buff_in_pipe_reg_next[0] = sobel_gradient_v;
  assign HSG_W0_in0_buff_in_pipe_reg_next[1] = HSG_W0_in0_buff_in_pipe_reg[0];
  assign HSG_W0_in0_buff_in_pipe_reg_next[2] = HSG_W0_in0_buff_in_pipe_reg[1];



  // Use only [0 180] range (unsigned orientation)
  // 
  // No real need for square root operation. Use condition Grad_Mag > 256
  // 
  // instead of Grad_Mag > 16.
  // 
  //     Grad_Mag = sqrt(sobel_gradient_v*sobel_gradient_v + sobel_gradient_h*sobel_gradient_h);
  assign tmp = sobel_gradient_v_1 * sobel_gradient_v_1;



  always @(posedge clk or posedge reset)
    begin : HSG_W0_in1_buff_in_pipe_process
      if (reset == 1'b1) begin
        HSG_W0_in1_buff_in_pipe_reg[0] <= 11'sb00000000000;
        HSG_W0_in1_buff_in_pipe_reg[1] <= 11'sb00000000000;
        HSG_W0_in1_buff_in_pipe_reg[2] <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          HSG_W0_in1_buff_in_pipe_reg[0] <= HSG_W0_in1_buff_in_pipe_reg_next[0];
          HSG_W0_in1_buff_in_pipe_reg[1] <= HSG_W0_in1_buff_in_pipe_reg_next[1];
          HSG_W0_in1_buff_in_pipe_reg[2] <= HSG_W0_in1_buff_in_pipe_reg_next[2];
        end
      end
    end

  assign sobel_gradient_h_1 = HSG_W0_in1_buff_in_pipe_reg[2];
  assign HSG_W0_in1_buff_in_pipe_reg_next[0] = sobel_gradient_h;
  assign HSG_W0_in1_buff_in_pipe_reg_next[1] = HSG_W0_in1_buff_in_pipe_reg[0];
  assign HSG_W0_in1_buff_in_pipe_reg_next[2] = HSG_W0_in1_buff_in_pipe_reg[1];



  assign tmp_1 = sobel_gradient_h_1 * sobel_gradient_h_1;



  always @(posedge clk or posedge reset)
    begin : rd_11_process
      if (reset == 1'b1) begin
        tmp_2 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_2 <= tmp;
        end
      end
    end



  assign tmp_3 = {tmp_2[21], tmp_2};



  always @(posedge clk or posedge reset)
    begin : rd_12_process
      if (reset == 1'b1) begin
        tmp_4 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_4 <= tmp_1;
        end
      end
    end



  assign tmp_5 = {tmp_4[21], tmp_4};



  assign adder_add_cast = {tmp_3[22], tmp_3};
  assign adder_add_cast_1 = {tmp_5[22], tmp_5};
  assign adder_add_temp = adder_add_cast + adder_add_cast_1;
  assign tmp_6 = ((adder_add_temp[23] == 1'b0) && (adder_add_temp[22] != 1'b0) ? 23'sb01111111111111111111111 :
              ((adder_add_temp[23] == 1'b1) && (adder_add_temp[22] != 1'b1) ? 23'sb10000000000000000000000 :
              $signed(adder_add_temp[22:0])));



  assign tmp_7 = tmp_6 > 23'sb00000000100000000000000;



  always @(posedge clk or posedge reset)
    begin : rd_2_process
      if (reset == 1'b1) begin
        rd_2_reg[0] <= 1'b0;
        rd_2_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          rd_2_reg[0] <= rd_2_reg_next[0];
          rd_2_reg[1] <= rd_2_reg_next[1];
        end
      end
    end

  assign tmp_8 = rd_2_reg[1];
  assign rd_2_reg_next[0] = tmp_7;
  assign rd_2_reg_next[1] = rd_2_reg[0];



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp27
  assign Bin_index = 32'sd0;



  assign tmp_9 = sobel_gradient_v_1 < 11'sb00000000000;



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0
  assign p63yfi_cast = {sobel_gradient_h_1[10], sobel_gradient_h_1};
  assign p63yfi_cast_1 =  - (p63yfi_cast);
  assign yfi = ((p63yfi_cast_1[11] == 1'b0) && (p63yfi_cast_1[10] != 1'b0) ? 11'sb01111111111 :
              ((p63yfi_cast_1[11] == 1'b1) && (p63yfi_cast_1[10] != 1'b1) ? 11'sb10000000000 :
              $signed(p63yfi_cast_1[10:0])));



  assign tmp_10 = (tmp_9 == 1'b0 ? sobel_gradient_h_1 :
              yfi);



  assign tmp_11 = tmp_10 >= 11'sb00000000000;



  always @(posedge clk or posedge reset)
    begin : rd_1_process
      if (reset == 1'b1) begin
        rd_1_reg[0] <= 1'b0;
        rd_1_reg[1] <= 1'b0;
        rd_1_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          rd_1_reg[0] <= rd_1_reg_next[0];
          rd_1_reg[1] <= rd_1_reg_next[1];
          rd_1_reg[2] <= rd_1_reg_next[2];
        end
      end
    end

  assign tmp_12 = rd_1_reg[2];
  assign rd_1_reg_next[0] = tmp_11;
  assign rd_1_reg_next[1] = rd_1_reg[0];
  assign rd_1_reg_next[2] = rd_1_reg[1];



  assign tmp_13 = sobel_gradient_v_1 < 11'sb00000000000;



  always @(posedge clk or posedge reset)
    begin : rd_5_process
      if (reset == 1'b1) begin
        tmp_14 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_14 <= tmp_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rd_0_process
      if (reset == 1'b1) begin
        sobel_gradient_v_2 <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          sobel_gradient_v_2 <= sobel_gradient_v_1;
        end
      end
    end



  assign p62yfi_cast = {sobel_gradient_v_1[10], sobel_gradient_v_1};
  assign p62yfi_cast_1 =  - (p62yfi_cast);
  assign yfi_1 = ((p62yfi_cast_1[11] == 1'b0) && (p62yfi_cast_1[10] != 1'b0) ? 11'sb01111111111 :
              ((p62yfi_cast_1[11] == 1'b1) && (p62yfi_cast_1[10] != 1'b1) ? 11'sb10000000000 :
              $signed(p62yfi_cast_1[10:0])));



  always @(posedge clk or posedge reset)
    begin : rd_25_process
      if (reset == 1'b1) begin
        tmp_15 <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          tmp_15 <= yfi_1;
        end
      end
    end



  assign tmp_16 = (tmp_14 == 1'b0 ? sobel_gradient_v_2 :
              tmp_15);



  // Bin boundaries for 8 bin scheme
  // 
  //     %Approximate binning: No interpolation
  assign p45yfi_cast = {tmp_10[10], tmp_10};
  assign p45yfi_cast_1 =  - (p45yfi_cast);
  assign yfi_2 = ((p45yfi_cast_1[11] == 1'b0) && (p45yfi_cast_1[10] != 1'b0) ? 11'sb01111111111 :
              ((p45yfi_cast_1[11] == 1'b1) && (p45yfi_cast_1[10] != 1'b1) ? 11'sb10000000000 :
              $signed(p45yfi_cast_1[10:0])));



  always @(posedge clk or posedge reset)
    begin : rd_28_process
      if (reset == 1'b1) begin
        dxp <= 11'sb00000000000;
      end
      else begin
        if (enb) begin
          dxp <= yfi_2;
        end
      end
    end



  assign tmp_17 = dxp * 11'sb01101010000;



  assign alpha_1_cast = {tmp_16, 11'b00000000000};
  assign alpha_relop1 = alpha_1_cast < tmp_17;



  assign tmp_18 = {{2{dxp[10]}}, {dxp, 9'b000000000}};



  assign alpha_1_cast_1 = {{2{tmp_16[10]}}, {tmp_16, 9'b000000000}};
  assign alpha_relop1_1 = alpha_1_cast_1 < tmp_18;



  always @(posedge clk or posedge reset)
    begin : rd_3_process
      if (reset == 1'b1) begin
        tmp_19 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_19 <= alpha_relop1_1;
        end
      end
    end



  assign tmp_20 = dxp * 11'sb01001101010;



  assign alpha_1_cast_2 = {{3{tmp_16[10]}}, {tmp_16, 8'b00000000}};
  assign alpha_relop1_2 = alpha_1_cast_2 < tmp_20;



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp41
  assign Bin_index_1 = 32'sd16;



  always @(posedge clk or posedge reset)
    begin : rd_17_process
      if (reset == 1'b1) begin
        Bin_index_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bin_index_2 <= Bin_index_1;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp41
  assign Bin_index_3 = 32'sd32;



  always @(posedge clk or posedge reset)
    begin : rd_16_process
      if (reset == 1'b1) begin
        Bin_index_4 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bin_index_4 <= Bin_index_3;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp37
  assign tmp_21 = (alpha_relop1_2 == 1'b0 ? Bin_index_2 :
              Bin_index_4);



  always @(posedge clk or posedge reset)
    begin : rd_18_process
      if (reset == 1'b1) begin
        Bin_index_5 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bin_index_5 <= tmp_21;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp37
  assign Bin_index_6 = 32'sd64;



  always @(posedge clk or posedge reset)
    begin : rd_9_process
      if (reset == 1'b1) begin
        tmp_22 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_22 <= alpha_relop1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rd_15_process
      if (reset == 1'b1) begin
        rd_15_reg[0] <= 32'sb00000000000000000000000000000000;
        rd_15_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          rd_15_reg[0] <= rd_15_reg_next[0];
          rd_15_reg[1] <= rd_15_reg_next[1];
        end
      end
    end

  assign Bin_index_7 = rd_15_reg[1];
  assign rd_15_reg_next[0] = Bin_index_6;
  assign rd_15_reg_next[1] = rd_15_reg[0];



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp33
  assign tmp_23 = (tmp_19 == 1'b0 ? Bin_index_5 :
              Bin_index_7);



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp33
  assign Bin_index_8 = 32'sd128;



  always @(posedge clk or posedge reset)
    begin : rd_27_process
      if (reset == 1'b1) begin
        rd_27_reg[0] <= 32'sb00000000000000000000000000000000;
        rd_27_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          rd_27_reg[0] <= rd_27_reg_next[0];
          rd_27_reg[1] <= rd_27_reg_next[1];
        end
      end
    end

  assign Bin_index_9 = rd_27_reg[1];
  assign rd_27_reg_next[0] = Bin_index_8;
  assign rd_27_reg_next[1] = rd_27_reg[0];



  assign tmp_24 = (tmp_22 == 1'b0 ? tmp_23 :
              Bin_index_9);



  always @(posedge clk or posedge reset)
    begin : rd_8_process
      if (reset == 1'b1) begin
        tmp_25 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_25 <= tmp_24;
        end
      end
    end



  assign tmp_26 = tmp_10 * 11'sb01101010000;



  always @(posedge clk or posedge reset)
    begin : rd_26_process
      if (reset == 1'b1) begin
        tmp_27 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_27 <= tmp_26;
        end
      end
    end



  assign alpha_1_cast_3 = {tmp_16, 11'b00000000000};
  assign alpha_relop1_3 = alpha_1_cast_3 < tmp_27;



  assign tmp_28 = {{2{tmp_10[10]}}, {tmp_10, 9'b000000000}};



  always @(posedge clk or posedge reset)
    begin : rd_24_process
      if (reset == 1'b1) begin
        tmp_29 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_29 <= tmp_28;
        end
      end
    end



  assign alpha_1_cast_4 = {{2{tmp_16[10]}}, {tmp_16, 9'b000000000}};
  assign alpha_relop1_4 = alpha_1_cast_4 < tmp_29;



  always @(posedge clk or posedge reset)
    begin : rd_4_process
      if (reset == 1'b1) begin
        tmp_30 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_30 <= alpha_relop1_4;
        end
      end
    end



  assign tmp_31 = tmp_10 * 11'sb01001101010;



  always @(posedge clk or posedge reset)
    begin : rd_21_process
      if (reset == 1'b1) begin
        tmp_32 <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_32 <= tmp_31;
        end
      end
    end



  assign alpha_1_cast_5 = {{3{tmp_16[10]}}, {tmp_16, 8'b00000000}};
  assign alpha_relop1_5 = alpha_1_cast_5 < tmp_32;



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp54
  assign Bin_index_10 = 32'sd8;



  always @(posedge clk or posedge reset)
    begin : rd_22_process
      if (reset == 1'b1) begin
        Bin_index_11 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bin_index_11 <= Bin_index_10;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp54
  assign Bin_index_12 = 32'sd4;



  always @(posedge clk or posedge reset)
    begin : rd_20_process
      if (reset == 1'b1) begin
        Bin_index_13 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bin_index_13 <= Bin_index_12;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp50
  assign tmp_33 = (alpha_relop1_5 == 1'b0 ? Bin_index_11 :
              Bin_index_13);



  always @(posedge clk or posedge reset)
    begin : rd_23_process
      if (reset == 1'b1) begin
        Bin_index_14 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bin_index_14 <= tmp_33;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp50
  assign Bin_index_15 = 32'sd2;



  always @(posedge clk or posedge reset)
    begin : rd_6_process
      if (reset == 1'b1) begin
        tmp_34 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_34 <= alpha_relop1_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rd_19_process
      if (reset == 1'b1) begin
        rd_19_reg[0] <= 32'sb00000000000000000000000000000000;
        rd_19_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          rd_19_reg[0] <= rd_19_reg_next[0];
          rd_19_reg[1] <= rd_19_reg_next[1];
        end
      end
    end

  assign Bin_index_16 = rd_19_reg[1];
  assign rd_19_reg_next[0] = Bin_index_15;
  assign rd_19_reg_next[1] = rd_19_reg[0];



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_falseregionp46
  assign tmp_35 = (tmp_30 == 1'b0 ? Bin_index_14 :
              Bin_index_16);



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp46
  assign Bin_index_17 = 32'sd1;



  always @(posedge clk or posedge reset)
    begin : rd_14_process
      if (reset == 1'b1) begin
        rd_14_reg[0] <= 32'sb00000000000000000000000000000000;
        rd_14_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          rd_14_reg[0] <= rd_14_reg_next[0];
          rd_14_reg[1] <= rd_14_reg_next[1];
        end
      end
    end

  assign Bin_index_18 = rd_14_reg[1];
  assign rd_14_reg_next[0] = Bin_index_17;
  assign rd_14_reg_next[1] = rd_14_reg[0];



  assign tmp_36 = (tmp_34 == 1'b0 ? tmp_35 :
              Bin_index_18);



  always @(posedge clk or posedge reset)
    begin : rd_13_process
      if (reset == 1'b1) begin
        rd_13_reg[0] <= 32'sb00000000000000000000000000000000;
        rd_13_reg[1] <= 32'sb00000000000000000000000000000000;
        rd_13_reg[2] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          rd_13_reg[0] <= rd_13_reg_next[0];
          rd_13_reg[1] <= rd_13_reg_next[1];
          rd_13_reg[2] <= rd_13_reg_next[2];
        end
      end
    end

  assign Bin_index_19 = rd_13_reg[2];
  assign rd_13_reg_next[0] = Bin_index;
  assign rd_13_reg_next[1] = rd_13_reg[0];
  assign rd_13_reg_next[2] = rd_13_reg[1];



  always @(posedge clk or posedge reset)
    begin : rd_7_process
      if (reset == 1'b1) begin
        tmp_37 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_37 <= tmp_36;
        end
      end
    end



  // HDL code generation from MATLAB function: sf_gateway_HSG_W0_trueregionp27
  assign tmp_38 = (tmp_12 == 1'b0 ? tmp_25 :
              tmp_37);



  assign tmp_39 = (tmp_8 == 1'b0 ? Bin_index_19 :
              tmp_38);



  //     red = 100;
  // 
  //     green = 100;
  // 
  //     blue = 100;
  // 
  //     if(Grad_Mag<16)
  // 
  //         red = 0;
  // 
  //         green = 0;
  // 
  //         blue = 0;
  // 
  //     else
  // 
  //         if(Bin_index == 1)
  // 
  //             red = red + 100;
  // 
  //         elseif(Bin_index == 2)
  // 
  //         green = green + 100;
  // 
  //     elseif(Bin_index == 3)
  // 
  //         red = red + 100;
  // 
  //         green = green + 100;
  // 
  //     elseif(Bin_index == 4)
  // 
  //         blue = blue + 100;
  // 
  //     elseif(Bin_index == 5)
  // 
  //         red = red + 100;
  // 
  //         blue = blue + 100;
  // 
  //     elseif(Bin_index == 6)
  // 
  //         green = green + 100;
  // 
  //         blue = blue + 100;
  // 
  //     elseif(Bin_index == 7)
  // 
  //         red = red + 100;
  // 
  //         green = green + 50;
  // 
  //     elseif(Bin_index == 8)
  // 
  //         green = green + 50;
  // 
  //         blue = blue + 75;
  // 
  //     end
  // 
  //     r = fi(red, 0, 8, 0);
  // 
  //     g = fi(green, 0, 8, 0);
  // 
  //     b = fi(blue, 0, 8, 0);
  // 
  //     r = fi(Bin_index, 0, 8, 0);
  // 
  //     g = fi(Bin_index, 0, 8, 0);
  // 
  //     b = fi(Bin_index, 0, 8, 0);
  // 
  //     
  // 
  //     
  // 
  //     Sig_Out = bitconcat(Alpha,r,g,b);
  assign tmp_40 = tmp_39[7:0];



  assign Bin_Code = tmp_40;

  always @(posedge clk or posedge reset)
    begin : rd_10_process
      if (reset == 1'b1) begin
        rd_10_reg[0] <= 23'sb00000000000000000000000;
        rd_10_reg[1] <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb) begin
          rd_10_reg[0] <= rd_10_reg_next[0];
          rd_10_reg[1] <= rd_10_reg_next[1];
        end
      end
    end

  assign Grad_Mag = rd_10_reg[1];
  assign rd_10_reg_next[0] = tmp_6;
  assign rd_10_reg_next[1] = rd_10_reg[0];



endmodule  // HSG_IP_src_HSG_W0

