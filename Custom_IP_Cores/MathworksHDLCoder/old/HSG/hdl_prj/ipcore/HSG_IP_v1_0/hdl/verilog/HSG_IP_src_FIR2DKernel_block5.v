// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_FIR2DKernel_block5.v
// Created: 2018-10-21 17:43:00
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_FIR2DKernel_block5
// Source Path: HSG/HSG/Image Filter6/FIR2DKernel
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_FIR2DKernel_block5
          (clk,
           reset,
           enb,
           dataIn_0,
           dataIn_1,
           dataIn_2,
           dataIn_3,
           dataIn_4,
           dataIn_5,
           vStartIn,
           vEndIn,
           hStartIn,
           hEndIn,
           validIn,
           processData,
           dataOut,
           vStartout,
           vEndOut,
           hStartOut,
           hEndOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn_0;  // ufix1
  input   dataIn_1;  // ufix1
  input   dataIn_2;  // ufix1
  input   dataIn_3;  // ufix1
  input   dataIn_4;  // ufix1
  input   dataIn_5;  // ufix1
  input   vStartIn;
  input   vEndIn;
  input   hStartIn;
  input   hEndIn;
  input   validIn;
  input   processData;
  output  [3:0] dataOut;  // ufix4
  output  vStartout;
  output  vEndOut;
  output  hStartOut;
  output  hEndOut;
  output  validOut;

  wire clkEnTied;
  reg  [0:4] tapDelay_1_reg;  // ufix1 [5]
  wire [0:4] tapDelay_1_reg_next;  // ufix1 [5]
  wire [0:5] tapOutData_1;  // ufix1 [6]
  wire tapOutData_1_0;  // ufix1
  reg  preAdd1_stage1_1;  // ufix1
  reg  [0:4] tapDelay_2_reg;  // ufix1 [5]
  wire [0:4] tapDelay_2_reg_next;  // ufix1 [5]
  wire [0:5] tapOutData_2;  // ufix1 [6]
  wire tapOutData_2_0;  // ufix1
  reg  preAdd1_stage1_2;  // ufix1
  wire [1:0] adder_1;  // ufix2
  wire [1:0] adder_2;  // ufix2
  wire [1:0] preAdd1_stage1_add_1;  // ufix2
  reg [1:0] preAdd1_stage2_1;  // ufix2
  reg  [0:4] tapDelay_3_reg;  // ufix1 [5]
  wire [0:4] tapDelay_3_reg_next;  // ufix1 [5]
  wire [0:5] tapOutData_3;  // ufix1 [6]
  wire tapOutData_3_0;  // ufix1
  reg  preAdd1_stage1_3;  // ufix1
  reg  [0:4] tapDelay_4_reg;  // ufix1 [5]
  wire [0:4] tapDelay_4_reg_next;  // ufix1 [5]
  wire [0:5] tapOutData_4;  // ufix1 [6]
  wire tapOutData_4_0;  // ufix1
  reg  preAdd1_stage1_4;  // ufix1
  wire [1:0] adder_4;  // ufix2
  wire [1:0] adder_5;  // ufix2
  wire [1:0] preAdd1_stage1_add_2;  // ufix2
  reg [1:0] preAdd1_stage2_2;  // ufix2
  wire [2:0] adder_7;  // ufix3
  wire [2:0] adder_8;  // ufix3
  wire [2:0] preAdd1_stage2_add_1;  // ufix3
  reg [2:0] preAdd1_stage3_1;  // ufix3
  reg  [0:4] tapDelay_5_reg;  // ufix1 [5]
  wire [0:4] tapDelay_5_reg_next;  // ufix1 [5]
  wire [0:5] tapOutData_5;  // ufix1 [6]
  wire tapOutData_5_0;  // ufix1
  reg  preAdd1_stage1_5;  // ufix1
  reg  [0:4] tapDelay_6_reg;  // ufix1 [5]
  wire [0:4] tapDelay_6_reg_next;  // ufix1 [5]
  wire [0:5] tapOutData_6;  // ufix1 [6]
  wire tapOutData_6_0;  // ufix1
  reg  preAdd1_stage1_6;  // ufix1
  wire [1:0] adder_10;  // ufix2
  wire [1:0] adder_11;  // ufix2
  wire [1:0] preAdd1_stage1_add_3;  // ufix2
  reg [1:0] preAdd1_stage2_3;  // ufix2
  wire tapOutData_1_1;  // ufix1
  reg  preAdd1_stage1_7;  // ufix1
  wire tapOutData_2_1;  // ufix1
  reg  preAdd1_stage1_8;  // ufix1
  wire [1:0] adder_13;  // ufix2
  wire [1:0] adder_14;  // ufix2
  wire [1:0] preAdd1_stage1_add_4;  // ufix2
  reg [1:0] preAdd1_stage2_4;  // ufix2
  wire [2:0] adder_16;  // ufix3
  wire [2:0] adder_17;  // ufix3
  wire [2:0] preAdd1_stage2_add_2;  // ufix3
  reg [2:0] preAdd1_stage3_2;  // ufix3
  wire [3:0] adder_19;  // ufix4
  wire [3:0] adder_20;  // ufix4
  wire [3:0] preAdd1_stage3_add_1;  // ufix4
  reg [3:0] preAdd1_stage4_1;  // ufix4
  wire tapOutData_3_1;  // ufix1
  reg  preAdd1_stage1_9;  // ufix1
  wire tapOutData_4_1;  // ufix1
  reg  preAdd1_stage1_10;  // ufix1
  wire [1:0] adder_22;  // ufix2
  wire [1:0] adder_23;  // ufix2
  wire [1:0] preAdd1_stage1_add_5;  // ufix2
  reg [1:0] preAdd1_stage2_5;  // ufix2
  wire tapOutData_5_1;  // ufix1
  reg  preAdd1_stage1_11;  // ufix1
  wire tapOutData_6_1;  // ufix1
  reg  preAdd1_stage1_12;  // ufix1
  wire [1:0] adder_25;  // ufix2
  wire [1:0] adder_26;  // ufix2
  wire [1:0] preAdd1_stage1_add_6;  // ufix2
  reg [1:0] preAdd1_stage2_6;  // ufix2
  wire [2:0] adder_28;  // ufix3
  wire [2:0] adder_29;  // ufix3
  wire [2:0] preAdd1_stage2_add_3;  // ufix3
  reg [2:0] preAdd1_stage3_3;  // ufix3
  wire tapOutData_1_2;  // ufix1
  reg  preAdd1_stage1_13;  // ufix1
  wire tapOutData_2_2;  // ufix1
  reg  preAdd1_stage1_14;  // ufix1
  wire [1:0] adder_31;  // ufix2
  wire [1:0] adder_32;  // ufix2
  wire [1:0] preAdd1_stage1_add_7;  // ufix2
  reg [1:0] preAdd1_stage2_7;  // ufix2
  wire tapOutData_3_2;  // ufix1
  reg  preAdd1_stage1_15;  // ufix1
  wire tapOutData_4_2;  // ufix1
  reg  preAdd1_stage1_16;  // ufix1
  wire [1:0] adder_34;  // ufix2
  wire [1:0] adder_35;  // ufix2
  wire [1:0] preAdd1_stage1_add_8;  // ufix2
  reg [1:0] preAdd1_stage2_8;  // ufix2
  wire [2:0] adder_37;  // ufix3
  wire [2:0] adder_38;  // ufix3
  wire [2:0] preAdd1_stage2_add_4;  // ufix3
  reg [2:0] preAdd1_stage3_4;  // ufix3
  wire [3:0] adder_40;  // ufix4
  wire [3:0] adder_41;  // ufix4
  wire [3:0] preAdd1_stage3_add_2;  // ufix4
  reg [3:0] preAdd1_stage4_2;  // ufix4
  wire [4:0] adder_43;  // ufix5
  wire [4:0] adder_44;  // ufix5
  wire [4:0] preAdd1_stage4_add_1;  // ufix5
  reg [4:0] preAdd1_stage5_1;  // ufix5
  wire tapOutData_5_2;  // ufix1
  reg  preAdd1_stage1_17;  // ufix1
  wire tapOutData_6_2;  // ufix1
  reg  preAdd1_stage1_18;  // ufix1
  wire [1:0] adder_46;  // ufix2
  wire [1:0] adder_47;  // ufix2
  wire [1:0] preAdd1_stage1_add_9;  // ufix2
  reg [1:0] preAdd1_stage2_9;  // ufix2
  wire tapOutData_1_3;  // ufix1
  reg  preAdd1_stage1_19;  // ufix1
  wire tapOutData_2_3;  // ufix1
  reg  preAdd1_stage1_20;  // ufix1
  wire [1:0] adder_49;  // ufix2
  wire [1:0] adder_50;  // ufix2
  wire [1:0] preAdd1_stage1_add_10;  // ufix2
  reg [1:0] preAdd1_stage2_10;  // ufix2
  wire [2:0] adder_52;  // ufix3
  wire [2:0] adder_53;  // ufix3
  wire [2:0] preAdd1_stage2_add_5;  // ufix3
  reg [2:0] preAdd1_stage3_5;  // ufix3
  wire tapOutData_3_3;  // ufix1
  reg  preAdd1_stage1_21;  // ufix1
  wire tapOutData_4_3;  // ufix1
  reg  preAdd1_stage1_22;  // ufix1
  wire [1:0] adder_55;  // ufix2
  wire [1:0] adder_56;  // ufix2
  wire [1:0] preAdd1_stage1_add_11;  // ufix2
  reg [1:0] preAdd1_stage2_11;  // ufix2
  wire tapOutData_5_3;  // ufix1
  reg  preAdd1_stage1_23;  // ufix1
  wire tapOutData_6_3;  // ufix1
  reg  preAdd1_stage1_24;  // ufix1
  wire [1:0] adder_58;  // ufix2
  wire [1:0] adder_59;  // ufix2
  wire [1:0] preAdd1_stage1_add_12;  // ufix2
  reg [1:0] preAdd1_stage2_12;  // ufix2
  wire [2:0] adder_61;  // ufix3
  wire [2:0] adder_62;  // ufix3
  wire [2:0] preAdd1_stage2_add_6;  // ufix3
  reg [2:0] preAdd1_stage3_6;  // ufix3
  wire [3:0] adder_64;  // ufix4
  wire [3:0] adder_65;  // ufix4
  wire [3:0] preAdd1_stage3_add_3;  // ufix4
  reg [3:0] preAdd1_stage4_3;  // ufix4
  wire tapOutData_1_4;  // ufix1
  reg  preAdd1_stage1_25;  // ufix1
  wire tapOutData_2_4;  // ufix1
  reg  preAdd1_stage1_26;  // ufix1
  wire [1:0] adder_67;  // ufix2
  wire [1:0] adder_68;  // ufix2
  wire [1:0] preAdd1_stage1_add_13;  // ufix2
  reg [1:0] preAdd1_stage2_13;  // ufix2
  wire tapOutData_3_4;  // ufix1
  reg  preAdd1_stage1_27;  // ufix1
  wire tapOutData_4_4;  // ufix1
  reg  preAdd1_stage1_28;  // ufix1
  wire [1:0] adder_70;  // ufix2
  wire [1:0] adder_71;  // ufix2
  wire [1:0] preAdd1_stage1_add_14;  // ufix2
  reg [1:0] preAdd1_stage2_14;  // ufix2
  wire [2:0] adder_73;  // ufix3
  wire [2:0] adder_74;  // ufix3
  wire [2:0] preAdd1_stage2_add_7;  // ufix3
  reg [2:0] preAdd1_stage3_7;  // ufix3
  wire tapOutData_5_4;  // ufix1
  reg  preAdd1_stage1_29;  // ufix1
  wire tapOutData_6_4;  // ufix1
  reg  preAdd1_stage1_30;  // ufix1
  wire [1:0] adder_76;  // ufix2
  wire [1:0] adder_77;  // ufix2
  wire [1:0] preAdd1_stage1_add_15;  // ufix2
  reg [1:0] preAdd1_stage2_15;  // ufix2
  wire tapOutData_1_5;  // ufix1
  reg  preAdd1_stage1_31;  // ufix1
  wire tapOutData_2_5;  // ufix1
  reg  preAdd1_stage1_32;  // ufix1
  wire [1:0] adder_79;  // ufix2
  wire [1:0] adder_80;  // ufix2
  wire [1:0] preAdd1_stage1_add_16;  // ufix2
  reg [1:0] preAdd1_stage2_16;  // ufix2
  wire [2:0] adder_82;  // ufix3
  wire [2:0] adder_83;  // ufix3
  wire [2:0] preAdd1_stage2_add_8;  // ufix3
  reg [2:0] preAdd1_stage3_8;  // ufix3
  wire [3:0] adder_85;  // ufix4
  wire [3:0] adder_86;  // ufix4
  wire [3:0] preAdd1_stage3_add_4;  // ufix4
  reg [3:0] preAdd1_stage4_4;  // ufix4
  wire [4:0] adder_88;  // ufix5
  wire [4:0] adder_89;  // ufix5
  wire [4:0] preAdd1_stage4_add_2;  // ufix5
  reg [4:0] preAdd1_stage5_2;  // ufix5
  wire [5:0] adder_91;  // ufix6
  wire [5:0] adder_92;  // ufix6
  wire [5:0] preAdd1_stage5_add_1;  // ufix6
  reg [5:0] preAdd1_stage6_1;  // ufix6
  wire tapOutData_3_5;  // ufix1
  reg  preAdd1_stage1_33;  // ufix1
  wire tapOutData_4_5;  // ufix1
  reg  preAdd1_stage1_34;  // ufix1
  wire [1:0] adder_94;  // ufix2
  wire [1:0] adder_95;  // ufix2
  wire [1:0] preAdd1_stage1_add_17;  // ufix2
  reg [1:0] preAdd1_stage2_17;  // ufix2
  wire tapOutData_5_5;  // ufix1
  reg  preAdd1_stage1_35;  // ufix1
  wire tapOutData_6_5;  // ufix1
  reg  preAdd1_stage1_36;  // ufix1
  wire [1:0] adder_97;  // ufix2
  wire [1:0] adder_98;  // ufix2
  wire [1:0] preAdd1_stage1_add_18;  // ufix2
  reg [1:0] preAdd1_stage2_18;  // ufix2
  wire [2:0] adder_100;  // ufix3
  wire [2:0] adder_101;  // ufix3
  wire [2:0] preAdd1_stage2_add_9;  // ufix3
  reg [2:0] preAdd1_stage6_2_reg_reg [0:3];  // ufix3 [4]
  wire [2:0] preAdd1_stage6_2_reg_reg_next [0:3];  // ufix3 [4]
  wire [2:0] preAdd1_stage6_2;  // ufix3
  wire [6:0] adder_103;  // ufix7
  wire [6:0] adder_104;  // ufix7
  wire [6:0] preAdd1_stage6_add_1;  // ufix7
  reg [6:0] preAdd1_final_reg;  // ufix7
  reg [6:0] multInDelay1_reg [0:1];  // ufix7 [2]
  wire [6:0] multInDelay1_reg_next [0:1];  // ufix7 [2]
  wire [6:0] multInReg1;  // ufix7
  wire [7:0] multOut1;  // ufix8
  reg [7:0] multOutDelay1_reg [0:1];  // ufix8 [2]
  wire [7:0] multOutDelay1_reg_next [0:1];  // ufix8 [2]
  wire [7:0] multOutReg1;  // ufix8
  wire [3:0] multOutReg1_conv;  // ufix4
  reg [3:0] dataOut_2;  // ufix4
  reg  [0:14] vStartout_fir_latency_reg;  // ufix1 [15]
  wire [0:14] vStartout_fir_latency_reg_next;  // ufix1 [15]
  reg  [0:14] vEndOut_fir_latency_reg;  // ufix1 [15]
  wire [0:14] vEndOut_fir_latency_reg_next;  // ufix1 [15]
  reg  [0:14] hStartOut_fir_latency_reg;  // ufix1 [15]
  wire [0:14] hStartOut_fir_latency_reg_next;  // ufix1 [15]
  reg  [0:14] hEndOut_fir_latency_reg;  // ufix1 [15]
  wire [0:14] hEndOut_fir_latency_reg_next;  // ufix1 [15]
  reg  [0:14] validOut_fir_latency_reg;  // ufix1 [15]
  wire [0:14] validOut_fir_latency_reg_next;  // ufix1 [15]


  assign clkEnTied = processData & enb;



  always @(posedge clk or posedge reset)
    begin : tapDelay_1_process
      if (reset == 1'b1) begin
        tapDelay_1_reg[0] <= 1'b0;
        tapDelay_1_reg[1] <= 1'b0;
        tapDelay_1_reg[2] <= 1'b0;
        tapDelay_1_reg[3] <= 1'b0;
        tapDelay_1_reg[4] <= 1'b0;
      end
      else begin
        if (enb && clkEnTied) begin
          tapDelay_1_reg[0] <= tapDelay_1_reg_next[0];
          tapDelay_1_reg[1] <= tapDelay_1_reg_next[1];
          tapDelay_1_reg[2] <= tapDelay_1_reg_next[2];
          tapDelay_1_reg[3] <= tapDelay_1_reg_next[3];
          tapDelay_1_reg[4] <= tapDelay_1_reg_next[4];
        end
      end
    end

  assign tapOutData_1[0] = tapDelay_1_reg[0];
  assign tapOutData_1[1] = tapDelay_1_reg[1];
  assign tapOutData_1[2] = tapDelay_1_reg[2];
  assign tapOutData_1[3] = tapDelay_1_reg[3];
  assign tapOutData_1[4] = tapDelay_1_reg[4];
  assign tapOutData_1[5] = dataIn_0;
  assign tapDelay_1_reg_next[0] = tapDelay_1_reg[1];
  assign tapDelay_1_reg_next[1] = tapDelay_1_reg[2];
  assign tapDelay_1_reg_next[2] = tapDelay_1_reg[3];
  assign tapDelay_1_reg_next[3] = tapDelay_1_reg[4];
  assign tapDelay_1_reg_next[4] = dataIn_0;



  assign tapOutData_1_0 = tapOutData_1[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_1 <= tapOutData_1_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_2_process
      if (reset == 1'b1) begin
        tapDelay_2_reg[0] <= 1'b0;
        tapDelay_2_reg[1] <= 1'b0;
        tapDelay_2_reg[2] <= 1'b0;
        tapDelay_2_reg[3] <= 1'b0;
        tapDelay_2_reg[4] <= 1'b0;
      end
      else begin
        if (enb && clkEnTied) begin
          tapDelay_2_reg[0] <= tapDelay_2_reg_next[0];
          tapDelay_2_reg[1] <= tapDelay_2_reg_next[1];
          tapDelay_2_reg[2] <= tapDelay_2_reg_next[2];
          tapDelay_2_reg[3] <= tapDelay_2_reg_next[3];
          tapDelay_2_reg[4] <= tapDelay_2_reg_next[4];
        end
      end
    end

  assign tapOutData_2[0] = tapDelay_2_reg[0];
  assign tapOutData_2[1] = tapDelay_2_reg[1];
  assign tapOutData_2[2] = tapDelay_2_reg[2];
  assign tapOutData_2[3] = tapDelay_2_reg[3];
  assign tapOutData_2[4] = tapDelay_2_reg[4];
  assign tapOutData_2[5] = dataIn_1;
  assign tapDelay_2_reg_next[0] = tapDelay_2_reg[1];
  assign tapDelay_2_reg_next[1] = tapDelay_2_reg[2];
  assign tapDelay_2_reg_next[2] = tapDelay_2_reg[3];
  assign tapDelay_2_reg_next[3] = tapDelay_2_reg[4];
  assign tapDelay_2_reg_next[4] = dataIn_1;



  assign tapOutData_2_0 = tapOutData_2[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_2 <= tapOutData_2_0;
        end
      end
    end



  assign adder_1 = {1'b0, preAdd1_stage1_1};
  assign adder_2 = {1'b0, preAdd1_stage1_2};
  assign preAdd1_stage1_add_1 = adder_1 + adder_2;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_1 <= preAdd1_stage1_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_3_process
      if (reset == 1'b1) begin
        tapDelay_3_reg[0] <= 1'b0;
        tapDelay_3_reg[1] <= 1'b0;
        tapDelay_3_reg[2] <= 1'b0;
        tapDelay_3_reg[3] <= 1'b0;
        tapDelay_3_reg[4] <= 1'b0;
      end
      else begin
        if (enb && clkEnTied) begin
          tapDelay_3_reg[0] <= tapDelay_3_reg_next[0];
          tapDelay_3_reg[1] <= tapDelay_3_reg_next[1];
          tapDelay_3_reg[2] <= tapDelay_3_reg_next[2];
          tapDelay_3_reg[3] <= tapDelay_3_reg_next[3];
          tapDelay_3_reg[4] <= tapDelay_3_reg_next[4];
        end
      end
    end

  assign tapOutData_3[0] = tapDelay_3_reg[0];
  assign tapOutData_3[1] = tapDelay_3_reg[1];
  assign tapOutData_3[2] = tapDelay_3_reg[2];
  assign tapOutData_3[3] = tapDelay_3_reg[3];
  assign tapOutData_3[4] = tapDelay_3_reg[4];
  assign tapOutData_3[5] = dataIn_2;
  assign tapDelay_3_reg_next[0] = tapDelay_3_reg[1];
  assign tapDelay_3_reg_next[1] = tapDelay_3_reg[2];
  assign tapDelay_3_reg_next[2] = tapDelay_3_reg[3];
  assign tapDelay_3_reg_next[3] = tapDelay_3_reg[4];
  assign tapDelay_3_reg_next[4] = dataIn_2;



  assign tapOutData_3_0 = tapOutData_3[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_3 <= tapOutData_3_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_4_process
      if (reset == 1'b1) begin
        tapDelay_4_reg[0] <= 1'b0;
        tapDelay_4_reg[1] <= 1'b0;
        tapDelay_4_reg[2] <= 1'b0;
        tapDelay_4_reg[3] <= 1'b0;
        tapDelay_4_reg[4] <= 1'b0;
      end
      else begin
        if (enb && clkEnTied) begin
          tapDelay_4_reg[0] <= tapDelay_4_reg_next[0];
          tapDelay_4_reg[1] <= tapDelay_4_reg_next[1];
          tapDelay_4_reg[2] <= tapDelay_4_reg_next[2];
          tapDelay_4_reg[3] <= tapDelay_4_reg_next[3];
          tapDelay_4_reg[4] <= tapDelay_4_reg_next[4];
        end
      end
    end

  assign tapOutData_4[0] = tapDelay_4_reg[0];
  assign tapOutData_4[1] = tapDelay_4_reg[1];
  assign tapOutData_4[2] = tapDelay_4_reg[2];
  assign tapOutData_4[3] = tapDelay_4_reg[3];
  assign tapOutData_4[4] = tapDelay_4_reg[4];
  assign tapOutData_4[5] = dataIn_3;
  assign tapDelay_4_reg_next[0] = tapDelay_4_reg[1];
  assign tapDelay_4_reg_next[1] = tapDelay_4_reg[2];
  assign tapDelay_4_reg_next[2] = tapDelay_4_reg[3];
  assign tapDelay_4_reg_next[3] = tapDelay_4_reg[4];
  assign tapDelay_4_reg_next[4] = dataIn_3;



  assign tapOutData_4_0 = tapOutData_4[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_4 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_4 <= tapOutData_4_0;
        end
      end
    end



  assign adder_4 = {1'b0, preAdd1_stage1_3};
  assign adder_5 = {1'b0, preAdd1_stage1_4};
  assign preAdd1_stage1_add_2 = adder_4 + adder_5;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_2 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_2 <= preAdd1_stage1_add_2;
        end
      end
    end



  assign adder_7 = {1'b0, preAdd1_stage2_1};
  assign adder_8 = {1'b0, preAdd1_stage2_2};
  assign preAdd1_stage2_add_1 = adder_7 + adder_8;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_1 <= preAdd1_stage2_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_5_process
      if (reset == 1'b1) begin
        tapDelay_5_reg[0] <= 1'b0;
        tapDelay_5_reg[1] <= 1'b0;
        tapDelay_5_reg[2] <= 1'b0;
        tapDelay_5_reg[3] <= 1'b0;
        tapDelay_5_reg[4] <= 1'b0;
      end
      else begin
        if (enb && clkEnTied) begin
          tapDelay_5_reg[0] <= tapDelay_5_reg_next[0];
          tapDelay_5_reg[1] <= tapDelay_5_reg_next[1];
          tapDelay_5_reg[2] <= tapDelay_5_reg_next[2];
          tapDelay_5_reg[3] <= tapDelay_5_reg_next[3];
          tapDelay_5_reg[4] <= tapDelay_5_reg_next[4];
        end
      end
    end

  assign tapOutData_5[0] = tapDelay_5_reg[0];
  assign tapOutData_5[1] = tapDelay_5_reg[1];
  assign tapOutData_5[2] = tapDelay_5_reg[2];
  assign tapOutData_5[3] = tapDelay_5_reg[3];
  assign tapOutData_5[4] = tapDelay_5_reg[4];
  assign tapOutData_5[5] = dataIn_4;
  assign tapDelay_5_reg_next[0] = tapDelay_5_reg[1];
  assign tapDelay_5_reg_next[1] = tapDelay_5_reg[2];
  assign tapDelay_5_reg_next[2] = tapDelay_5_reg[3];
  assign tapDelay_5_reg_next[3] = tapDelay_5_reg[4];
  assign tapDelay_5_reg_next[4] = dataIn_4;



  assign tapOutData_5_0 = tapOutData_5[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_5_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_5 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_5 <= tapOutData_5_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_6_process
      if (reset == 1'b1) begin
        tapDelay_6_reg[0] <= 1'b0;
        tapDelay_6_reg[1] <= 1'b0;
        tapDelay_6_reg[2] <= 1'b0;
        tapDelay_6_reg[3] <= 1'b0;
        tapDelay_6_reg[4] <= 1'b0;
      end
      else begin
        if (enb && clkEnTied) begin
          tapDelay_6_reg[0] <= tapDelay_6_reg_next[0];
          tapDelay_6_reg[1] <= tapDelay_6_reg_next[1];
          tapDelay_6_reg[2] <= tapDelay_6_reg_next[2];
          tapDelay_6_reg[3] <= tapDelay_6_reg_next[3];
          tapDelay_6_reg[4] <= tapDelay_6_reg_next[4];
        end
      end
    end

  assign tapOutData_6[0] = tapDelay_6_reg[0];
  assign tapOutData_6[1] = tapDelay_6_reg[1];
  assign tapOutData_6[2] = tapDelay_6_reg[2];
  assign tapOutData_6[3] = tapDelay_6_reg[3];
  assign tapOutData_6[4] = tapDelay_6_reg[4];
  assign tapOutData_6[5] = dataIn_5;
  assign tapDelay_6_reg_next[0] = tapDelay_6_reg[1];
  assign tapDelay_6_reg_next[1] = tapDelay_6_reg[2];
  assign tapDelay_6_reg_next[2] = tapDelay_6_reg[3];
  assign tapDelay_6_reg_next[3] = tapDelay_6_reg[4];
  assign tapDelay_6_reg_next[4] = dataIn_5;



  assign tapOutData_6_0 = tapOutData_6[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_6_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_6 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_6 <= tapOutData_6_0;
        end
      end
    end



  assign adder_10 = {1'b0, preAdd1_stage1_5};
  assign adder_11 = {1'b0, preAdd1_stage1_6};
  assign preAdd1_stage1_add_3 = adder_10 + adder_11;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_3_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_3 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_3 <= preAdd1_stage1_add_3;
        end
      end
    end



  assign tapOutData_1_1 = tapOutData_1[1];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_7_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_7 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_7 <= tapOutData_1_1;
        end
      end
    end



  assign tapOutData_2_1 = tapOutData_2[1];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_8_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_8 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_8 <= tapOutData_2_1;
        end
      end
    end



  assign adder_13 = {1'b0, preAdd1_stage1_7};
  assign adder_14 = {1'b0, preAdd1_stage1_8};
  assign preAdd1_stage1_add_4 = adder_13 + adder_14;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_4_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_4 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_4 <= preAdd1_stage1_add_4;
        end
      end
    end



  assign adder_16 = {1'b0, preAdd1_stage2_3};
  assign adder_17 = {1'b0, preAdd1_stage2_4};
  assign preAdd1_stage2_add_2 = adder_16 + adder_17;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_2 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_2 <= preAdd1_stage2_add_2;
        end
      end
    end



  assign adder_19 = {1'b0, preAdd1_stage3_1};
  assign adder_20 = {1'b0, preAdd1_stage3_2};
  assign preAdd1_stage3_add_1 = adder_19 + adder_20;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage4_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage4_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          preAdd1_stage4_1 <= preAdd1_stage3_add_1;
        end
      end
    end



  assign tapOutData_3_1 = tapOutData_3[1];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_9_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_9 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_9 <= tapOutData_3_1;
        end
      end
    end



  assign tapOutData_4_1 = tapOutData_4[1];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_10_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_10 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_10 <= tapOutData_4_1;
        end
      end
    end



  assign adder_22 = {1'b0, preAdd1_stage1_9};
  assign adder_23 = {1'b0, preAdd1_stage1_10};
  assign preAdd1_stage1_add_5 = adder_22 + adder_23;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_5_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_5 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_5 <= preAdd1_stage1_add_5;
        end
      end
    end



  assign tapOutData_5_1 = tapOutData_5[1];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_11_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_11 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_11 <= tapOutData_5_1;
        end
      end
    end



  assign tapOutData_6_1 = tapOutData_6[1];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_12_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_12 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_12 <= tapOutData_6_1;
        end
      end
    end



  assign adder_25 = {1'b0, preAdd1_stage1_11};
  assign adder_26 = {1'b0, preAdd1_stage1_12};
  assign preAdd1_stage1_add_6 = adder_25 + adder_26;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_6_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_6 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_6 <= preAdd1_stage1_add_6;
        end
      end
    end



  assign adder_28 = {1'b0, preAdd1_stage2_5};
  assign adder_29 = {1'b0, preAdd1_stage2_6};
  assign preAdd1_stage2_add_3 = adder_28 + adder_29;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_3_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_3 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_3 <= preAdd1_stage2_add_3;
        end
      end
    end



  assign tapOutData_1_2 = tapOutData_1[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_13_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_13 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_13 <= tapOutData_1_2;
        end
      end
    end



  assign tapOutData_2_2 = tapOutData_2[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_14_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_14 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_14 <= tapOutData_2_2;
        end
      end
    end



  assign adder_31 = {1'b0, preAdd1_stage1_13};
  assign adder_32 = {1'b0, preAdd1_stage1_14};
  assign preAdd1_stage1_add_7 = adder_31 + adder_32;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_7_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_7 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_7 <= preAdd1_stage1_add_7;
        end
      end
    end



  assign tapOutData_3_2 = tapOutData_3[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_15_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_15 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_15 <= tapOutData_3_2;
        end
      end
    end



  assign tapOutData_4_2 = tapOutData_4[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_16_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_16 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_16 <= tapOutData_4_2;
        end
      end
    end



  assign adder_34 = {1'b0, preAdd1_stage1_15};
  assign adder_35 = {1'b0, preAdd1_stage1_16};
  assign preAdd1_stage1_add_8 = adder_34 + adder_35;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_8_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_8 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_8 <= preAdd1_stage1_add_8;
        end
      end
    end



  assign adder_37 = {1'b0, preAdd1_stage2_7};
  assign adder_38 = {1'b0, preAdd1_stage2_8};
  assign preAdd1_stage2_add_4 = adder_37 + adder_38;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_4_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_4 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_4 <= preAdd1_stage2_add_4;
        end
      end
    end



  assign adder_40 = {1'b0, preAdd1_stage3_3};
  assign adder_41 = {1'b0, preAdd1_stage3_4};
  assign preAdd1_stage3_add_2 = adder_40 + adder_41;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage4_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage4_2 <= 4'b0000;
      end
      else begin
        if (enb) begin
          preAdd1_stage4_2 <= preAdd1_stage3_add_2;
        end
      end
    end



  assign adder_43 = {1'b0, preAdd1_stage4_1};
  assign adder_44 = {1'b0, preAdd1_stage4_2};
  assign preAdd1_stage4_add_1 = adder_43 + adder_44;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage5_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage5_1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          preAdd1_stage5_1 <= preAdd1_stage4_add_1;
        end
      end
    end



  assign tapOutData_5_2 = tapOutData_5[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_17_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_17 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_17 <= tapOutData_5_2;
        end
      end
    end



  assign tapOutData_6_2 = tapOutData_6[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_18_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_18 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_18 <= tapOutData_6_2;
        end
      end
    end



  assign adder_46 = {1'b0, preAdd1_stage1_17};
  assign adder_47 = {1'b0, preAdd1_stage1_18};
  assign preAdd1_stage1_add_9 = adder_46 + adder_47;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_9_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_9 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_9 <= preAdd1_stage1_add_9;
        end
      end
    end



  assign tapOutData_1_3 = tapOutData_1[3];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_19_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_19 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_19 <= tapOutData_1_3;
        end
      end
    end



  assign tapOutData_2_3 = tapOutData_2[3];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_20_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_20 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_20 <= tapOutData_2_3;
        end
      end
    end



  assign adder_49 = {1'b0, preAdd1_stage1_19};
  assign adder_50 = {1'b0, preAdd1_stage1_20};
  assign preAdd1_stage1_add_10 = adder_49 + adder_50;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_10_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_10 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_10 <= preAdd1_stage1_add_10;
        end
      end
    end



  assign adder_52 = {1'b0, preAdd1_stage2_9};
  assign adder_53 = {1'b0, preAdd1_stage2_10};
  assign preAdd1_stage2_add_5 = adder_52 + adder_53;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_5_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_5 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_5 <= preAdd1_stage2_add_5;
        end
      end
    end



  assign tapOutData_3_3 = tapOutData_3[3];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_21_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_21 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_21 <= tapOutData_3_3;
        end
      end
    end



  assign tapOutData_4_3 = tapOutData_4[3];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_22_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_22 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_22 <= tapOutData_4_3;
        end
      end
    end



  assign adder_55 = {1'b0, preAdd1_stage1_21};
  assign adder_56 = {1'b0, preAdd1_stage1_22};
  assign preAdd1_stage1_add_11 = adder_55 + adder_56;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_11_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_11 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_11 <= preAdd1_stage1_add_11;
        end
      end
    end



  assign tapOutData_5_3 = tapOutData_5[3];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_23_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_23 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_23 <= tapOutData_5_3;
        end
      end
    end



  assign tapOutData_6_3 = tapOutData_6[3];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_24_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_24 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_24 <= tapOutData_6_3;
        end
      end
    end



  assign adder_58 = {1'b0, preAdd1_stage1_23};
  assign adder_59 = {1'b0, preAdd1_stage1_24};
  assign preAdd1_stage1_add_12 = adder_58 + adder_59;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_12_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_12 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_12 <= preAdd1_stage1_add_12;
        end
      end
    end



  assign adder_61 = {1'b0, preAdd1_stage2_11};
  assign adder_62 = {1'b0, preAdd1_stage2_12};
  assign preAdd1_stage2_add_6 = adder_61 + adder_62;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_6_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_6 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_6 <= preAdd1_stage2_add_6;
        end
      end
    end



  assign adder_64 = {1'b0, preAdd1_stage3_5};
  assign adder_65 = {1'b0, preAdd1_stage3_6};
  assign preAdd1_stage3_add_3 = adder_64 + adder_65;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage4_3_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage4_3 <= 4'b0000;
      end
      else begin
        if (enb) begin
          preAdd1_stage4_3 <= preAdd1_stage3_add_3;
        end
      end
    end



  assign tapOutData_1_4 = tapOutData_1[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_25_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_25 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_25 <= tapOutData_1_4;
        end
      end
    end



  assign tapOutData_2_4 = tapOutData_2[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_26_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_26 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_26 <= tapOutData_2_4;
        end
      end
    end



  assign adder_67 = {1'b0, preAdd1_stage1_25};
  assign adder_68 = {1'b0, preAdd1_stage1_26};
  assign preAdd1_stage1_add_13 = adder_67 + adder_68;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_13_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_13 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_13 <= preAdd1_stage1_add_13;
        end
      end
    end



  assign tapOutData_3_4 = tapOutData_3[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_27_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_27 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_27 <= tapOutData_3_4;
        end
      end
    end



  assign tapOutData_4_4 = tapOutData_4[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_28_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_28 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_28 <= tapOutData_4_4;
        end
      end
    end



  assign adder_70 = {1'b0, preAdd1_stage1_27};
  assign adder_71 = {1'b0, preAdd1_stage1_28};
  assign preAdd1_stage1_add_14 = adder_70 + adder_71;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_14_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_14 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_14 <= preAdd1_stage1_add_14;
        end
      end
    end



  assign adder_73 = {1'b0, preAdd1_stage2_13};
  assign adder_74 = {1'b0, preAdd1_stage2_14};
  assign preAdd1_stage2_add_7 = adder_73 + adder_74;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_7_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_7 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_7 <= preAdd1_stage2_add_7;
        end
      end
    end



  assign tapOutData_5_4 = tapOutData_5[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_29_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_29 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_29 <= tapOutData_5_4;
        end
      end
    end



  assign tapOutData_6_4 = tapOutData_6[4];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_30_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_30 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_30 <= tapOutData_6_4;
        end
      end
    end



  assign adder_76 = {1'b0, preAdd1_stage1_29};
  assign adder_77 = {1'b0, preAdd1_stage1_30};
  assign preAdd1_stage1_add_15 = adder_76 + adder_77;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_15_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_15 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_15 <= preAdd1_stage1_add_15;
        end
      end
    end



  assign tapOutData_1_5 = tapOutData_1[5];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_31_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_31 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_31 <= tapOutData_1_5;
        end
      end
    end



  assign tapOutData_2_5 = tapOutData_2[5];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_32_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_32 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_32 <= tapOutData_2_5;
        end
      end
    end



  assign adder_79 = {1'b0, preAdd1_stage1_31};
  assign adder_80 = {1'b0, preAdd1_stage1_32};
  assign preAdd1_stage1_add_16 = adder_79 + adder_80;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_16_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_16 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_16 <= preAdd1_stage1_add_16;
        end
      end
    end



  assign adder_82 = {1'b0, preAdd1_stage2_15};
  assign adder_83 = {1'b0, preAdd1_stage2_16};
  assign preAdd1_stage2_add_8 = adder_82 + adder_83;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage3_8_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage3_8 <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage3_8 <= preAdd1_stage2_add_8;
        end
      end
    end



  assign adder_85 = {1'b0, preAdd1_stage3_7};
  assign adder_86 = {1'b0, preAdd1_stage3_8};
  assign preAdd1_stage3_add_4 = adder_85 + adder_86;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage4_4_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage4_4 <= 4'b0000;
      end
      else begin
        if (enb) begin
          preAdd1_stage4_4 <= preAdd1_stage3_add_4;
        end
      end
    end



  assign adder_88 = {1'b0, preAdd1_stage4_3};
  assign adder_89 = {1'b0, preAdd1_stage4_4};
  assign preAdd1_stage4_add_2 = adder_88 + adder_89;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage5_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage5_2 <= 5'b00000;
      end
      else begin
        if (enb) begin
          preAdd1_stage5_2 <= preAdd1_stage4_add_2;
        end
      end
    end



  assign adder_91 = {1'b0, preAdd1_stage5_1};
  assign adder_92 = {1'b0, preAdd1_stage5_2};
  assign preAdd1_stage5_add_1 = adder_91 + adder_92;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage6_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage6_1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage6_1 <= preAdd1_stage5_add_1;
        end
      end
    end



  assign tapOutData_3_5 = tapOutData_3[5];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_33_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_33 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_33 <= tapOutData_3_5;
        end
      end
    end



  assign tapOutData_4_5 = tapOutData_4[5];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_34_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_34 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_34 <= tapOutData_4_5;
        end
      end
    end



  assign adder_94 = {1'b0, preAdd1_stage1_33};
  assign adder_95 = {1'b0, preAdd1_stage1_34};
  assign preAdd1_stage1_add_17 = adder_94 + adder_95;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_17_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_17 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_17 <= preAdd1_stage1_add_17;
        end
      end
    end



  assign tapOutData_5_5 = tapOutData_5[5];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_35_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_35 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_35 <= tapOutData_5_5;
        end
      end
    end



  assign tapOutData_6_5 = tapOutData_6[5];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_36_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_36 <= 1'b0;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_36 <= tapOutData_6_5;
        end
      end
    end



  assign adder_97 = {1'b0, preAdd1_stage1_35};
  assign adder_98 = {1'b0, preAdd1_stage1_36};
  assign preAdd1_stage1_add_18 = adder_97 + adder_98;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_18_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_18 <= 2'b00;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_18 <= preAdd1_stage1_add_18;
        end
      end
    end



  assign adder_100 = {1'b0, preAdd1_stage2_17};
  assign adder_101 = {1'b0, preAdd1_stage2_18};
  assign preAdd1_stage2_add_9 = adder_100 + adder_101;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage6_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage6_2_reg_reg[0] <= 3'b000;
        preAdd1_stage6_2_reg_reg[1] <= 3'b000;
        preAdd1_stage6_2_reg_reg[2] <= 3'b000;
        preAdd1_stage6_2_reg_reg[3] <= 3'b000;
      end
      else begin
        if (enb) begin
          preAdd1_stage6_2_reg_reg[0] <= preAdd1_stage6_2_reg_reg_next[0];
          preAdd1_stage6_2_reg_reg[1] <= preAdd1_stage6_2_reg_reg_next[1];
          preAdd1_stage6_2_reg_reg[2] <= preAdd1_stage6_2_reg_reg_next[2];
          preAdd1_stage6_2_reg_reg[3] <= preAdd1_stage6_2_reg_reg_next[3];
        end
      end
    end

  assign preAdd1_stage6_2 = preAdd1_stage6_2_reg_reg[3];
  assign preAdd1_stage6_2_reg_reg_next[0] = preAdd1_stage2_add_9;
  assign preAdd1_stage6_2_reg_reg_next[1] = preAdd1_stage6_2_reg_reg[0];
  assign preAdd1_stage6_2_reg_reg_next[2] = preAdd1_stage6_2_reg_reg[1];
  assign preAdd1_stage6_2_reg_reg_next[3] = preAdd1_stage6_2_reg_reg[2];



  assign adder_103 = {1'b0, preAdd1_stage6_1};
  assign adder_104 = {4'b0, preAdd1_stage6_2};
  assign preAdd1_stage6_add_1 = adder_103 + adder_104;



  always @(posedge clk or posedge reset)
    begin : preAdd1_final_process
      if (reset == 1'b1) begin
        preAdd1_final_reg <= 7'b0000000;
      end
      else begin
        if (enb) begin
          preAdd1_final_reg <= preAdd1_stage6_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay1_process
      if (reset == 1'b1) begin
        multInDelay1_reg[0] <= 7'b0000000;
        multInDelay1_reg[1] <= 7'b0000000;
      end
      else begin
        if (enb) begin
          multInDelay1_reg[0] <= multInDelay1_reg_next[0];
          multInDelay1_reg[1] <= multInDelay1_reg_next[1];
        end
      end
    end

  assign multInReg1 = multInDelay1_reg[1];
  assign multInDelay1_reg_next[0] = preAdd1_final_reg;
  assign multInDelay1_reg_next[1] = multInDelay1_reg[0];



  assign multOut1 = {1'b0, multInReg1};



  always @(posedge clk or posedge reset)
    begin : multOutDelay1_process
      if (reset == 1'b1) begin
        multOutDelay1_reg[0] <= 8'b00000000;
        multOutDelay1_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          multOutDelay1_reg[0] <= multOutDelay1_reg_next[0];
          multOutDelay1_reg[1] <= multOutDelay1_reg_next[1];
        end
      end
    end

  assign multOutReg1 = multOutDelay1_reg[1];
  assign multOutDelay1_reg_next[0] = multOut1;
  assign multOutDelay1_reg_next[1] = multOutDelay1_reg[0];



  assign multOutReg1_conv = (multOutReg1[7:4] != 4'b0000 ? 4'b1111 :
              multOutReg1[3:0]);



  always @(posedge clk or posedge reset)
    begin : dataOut_1_process
      if (reset == 1'b1) begin
        dataOut_2 <= 4'b0000;
      end
      else begin
        if (enb) begin
          dataOut_2 <= multOutReg1_conv;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : vStartout_fir_latency_process
      if (reset == 1'b1) begin
        vStartout_fir_latency_reg[0] <= 1'b0;
        vStartout_fir_latency_reg[1] <= 1'b0;
        vStartout_fir_latency_reg[2] <= 1'b0;
        vStartout_fir_latency_reg[3] <= 1'b0;
        vStartout_fir_latency_reg[4] <= 1'b0;
        vStartout_fir_latency_reg[5] <= 1'b0;
        vStartout_fir_latency_reg[6] <= 1'b0;
        vStartout_fir_latency_reg[7] <= 1'b0;
        vStartout_fir_latency_reg[8] <= 1'b0;
        vStartout_fir_latency_reg[9] <= 1'b0;
        vStartout_fir_latency_reg[10] <= 1'b0;
        vStartout_fir_latency_reg[11] <= 1'b0;
        vStartout_fir_latency_reg[12] <= 1'b0;
        vStartout_fir_latency_reg[13] <= 1'b0;
        vStartout_fir_latency_reg[14] <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartout_fir_latency_reg[0] <= vStartout_fir_latency_reg_next[0];
          vStartout_fir_latency_reg[1] <= vStartout_fir_latency_reg_next[1];
          vStartout_fir_latency_reg[2] <= vStartout_fir_latency_reg_next[2];
          vStartout_fir_latency_reg[3] <= vStartout_fir_latency_reg_next[3];
          vStartout_fir_latency_reg[4] <= vStartout_fir_latency_reg_next[4];
          vStartout_fir_latency_reg[5] <= vStartout_fir_latency_reg_next[5];
          vStartout_fir_latency_reg[6] <= vStartout_fir_latency_reg_next[6];
          vStartout_fir_latency_reg[7] <= vStartout_fir_latency_reg_next[7];
          vStartout_fir_latency_reg[8] <= vStartout_fir_latency_reg_next[8];
          vStartout_fir_latency_reg[9] <= vStartout_fir_latency_reg_next[9];
          vStartout_fir_latency_reg[10] <= vStartout_fir_latency_reg_next[10];
          vStartout_fir_latency_reg[11] <= vStartout_fir_latency_reg_next[11];
          vStartout_fir_latency_reg[12] <= vStartout_fir_latency_reg_next[12];
          vStartout_fir_latency_reg[13] <= vStartout_fir_latency_reg_next[13];
          vStartout_fir_latency_reg[14] <= vStartout_fir_latency_reg_next[14];
        end
      end
    end

  assign vStartout = vStartout_fir_latency_reg[14];
  assign vStartout_fir_latency_reg_next[0] = vStartIn;
  assign vStartout_fir_latency_reg_next[1] = vStartout_fir_latency_reg[0];
  assign vStartout_fir_latency_reg_next[2] = vStartout_fir_latency_reg[1];
  assign vStartout_fir_latency_reg_next[3] = vStartout_fir_latency_reg[2];
  assign vStartout_fir_latency_reg_next[4] = vStartout_fir_latency_reg[3];
  assign vStartout_fir_latency_reg_next[5] = vStartout_fir_latency_reg[4];
  assign vStartout_fir_latency_reg_next[6] = vStartout_fir_latency_reg[5];
  assign vStartout_fir_latency_reg_next[7] = vStartout_fir_latency_reg[6];
  assign vStartout_fir_latency_reg_next[8] = vStartout_fir_latency_reg[7];
  assign vStartout_fir_latency_reg_next[9] = vStartout_fir_latency_reg[8];
  assign vStartout_fir_latency_reg_next[10] = vStartout_fir_latency_reg[9];
  assign vStartout_fir_latency_reg_next[11] = vStartout_fir_latency_reg[10];
  assign vStartout_fir_latency_reg_next[12] = vStartout_fir_latency_reg[11];
  assign vStartout_fir_latency_reg_next[13] = vStartout_fir_latency_reg[12];
  assign vStartout_fir_latency_reg_next[14] = vStartout_fir_latency_reg[13];



  always @(posedge clk or posedge reset)
    begin : vEndOut_fir_latency_process
      if (reset == 1'b1) begin
        vEndOut_fir_latency_reg[0] <= 1'b0;
        vEndOut_fir_latency_reg[1] <= 1'b0;
        vEndOut_fir_latency_reg[2] <= 1'b0;
        vEndOut_fir_latency_reg[3] <= 1'b0;
        vEndOut_fir_latency_reg[4] <= 1'b0;
        vEndOut_fir_latency_reg[5] <= 1'b0;
        vEndOut_fir_latency_reg[6] <= 1'b0;
        vEndOut_fir_latency_reg[7] <= 1'b0;
        vEndOut_fir_latency_reg[8] <= 1'b0;
        vEndOut_fir_latency_reg[9] <= 1'b0;
        vEndOut_fir_latency_reg[10] <= 1'b0;
        vEndOut_fir_latency_reg[11] <= 1'b0;
        vEndOut_fir_latency_reg[12] <= 1'b0;
        vEndOut_fir_latency_reg[13] <= 1'b0;
        vEndOut_fir_latency_reg[14] <= 1'b0;
      end
      else begin
        if (enb) begin
          vEndOut_fir_latency_reg[0] <= vEndOut_fir_latency_reg_next[0];
          vEndOut_fir_latency_reg[1] <= vEndOut_fir_latency_reg_next[1];
          vEndOut_fir_latency_reg[2] <= vEndOut_fir_latency_reg_next[2];
          vEndOut_fir_latency_reg[3] <= vEndOut_fir_latency_reg_next[3];
          vEndOut_fir_latency_reg[4] <= vEndOut_fir_latency_reg_next[4];
          vEndOut_fir_latency_reg[5] <= vEndOut_fir_latency_reg_next[5];
          vEndOut_fir_latency_reg[6] <= vEndOut_fir_latency_reg_next[6];
          vEndOut_fir_latency_reg[7] <= vEndOut_fir_latency_reg_next[7];
          vEndOut_fir_latency_reg[8] <= vEndOut_fir_latency_reg_next[8];
          vEndOut_fir_latency_reg[9] <= vEndOut_fir_latency_reg_next[9];
          vEndOut_fir_latency_reg[10] <= vEndOut_fir_latency_reg_next[10];
          vEndOut_fir_latency_reg[11] <= vEndOut_fir_latency_reg_next[11];
          vEndOut_fir_latency_reg[12] <= vEndOut_fir_latency_reg_next[12];
          vEndOut_fir_latency_reg[13] <= vEndOut_fir_latency_reg_next[13];
          vEndOut_fir_latency_reg[14] <= vEndOut_fir_latency_reg_next[14];
        end
      end
    end

  assign vEndOut = vEndOut_fir_latency_reg[14];
  assign vEndOut_fir_latency_reg_next[0] = vEndIn;
  assign vEndOut_fir_latency_reg_next[1] = vEndOut_fir_latency_reg[0];
  assign vEndOut_fir_latency_reg_next[2] = vEndOut_fir_latency_reg[1];
  assign vEndOut_fir_latency_reg_next[3] = vEndOut_fir_latency_reg[2];
  assign vEndOut_fir_latency_reg_next[4] = vEndOut_fir_latency_reg[3];
  assign vEndOut_fir_latency_reg_next[5] = vEndOut_fir_latency_reg[4];
  assign vEndOut_fir_latency_reg_next[6] = vEndOut_fir_latency_reg[5];
  assign vEndOut_fir_latency_reg_next[7] = vEndOut_fir_latency_reg[6];
  assign vEndOut_fir_latency_reg_next[8] = vEndOut_fir_latency_reg[7];
  assign vEndOut_fir_latency_reg_next[9] = vEndOut_fir_latency_reg[8];
  assign vEndOut_fir_latency_reg_next[10] = vEndOut_fir_latency_reg[9];
  assign vEndOut_fir_latency_reg_next[11] = vEndOut_fir_latency_reg[10];
  assign vEndOut_fir_latency_reg_next[12] = vEndOut_fir_latency_reg[11];
  assign vEndOut_fir_latency_reg_next[13] = vEndOut_fir_latency_reg[12];
  assign vEndOut_fir_latency_reg_next[14] = vEndOut_fir_latency_reg[13];



  always @(posedge clk or posedge reset)
    begin : hStartOut_fir_latency_process
      if (reset == 1'b1) begin
        hStartOut_fir_latency_reg[0] <= 1'b0;
        hStartOut_fir_latency_reg[1] <= 1'b0;
        hStartOut_fir_latency_reg[2] <= 1'b0;
        hStartOut_fir_latency_reg[3] <= 1'b0;
        hStartOut_fir_latency_reg[4] <= 1'b0;
        hStartOut_fir_latency_reg[5] <= 1'b0;
        hStartOut_fir_latency_reg[6] <= 1'b0;
        hStartOut_fir_latency_reg[7] <= 1'b0;
        hStartOut_fir_latency_reg[8] <= 1'b0;
        hStartOut_fir_latency_reg[9] <= 1'b0;
        hStartOut_fir_latency_reg[10] <= 1'b0;
        hStartOut_fir_latency_reg[11] <= 1'b0;
        hStartOut_fir_latency_reg[12] <= 1'b0;
        hStartOut_fir_latency_reg[13] <= 1'b0;
        hStartOut_fir_latency_reg[14] <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartOut_fir_latency_reg[0] <= hStartOut_fir_latency_reg_next[0];
          hStartOut_fir_latency_reg[1] <= hStartOut_fir_latency_reg_next[1];
          hStartOut_fir_latency_reg[2] <= hStartOut_fir_latency_reg_next[2];
          hStartOut_fir_latency_reg[3] <= hStartOut_fir_latency_reg_next[3];
          hStartOut_fir_latency_reg[4] <= hStartOut_fir_latency_reg_next[4];
          hStartOut_fir_latency_reg[5] <= hStartOut_fir_latency_reg_next[5];
          hStartOut_fir_latency_reg[6] <= hStartOut_fir_latency_reg_next[6];
          hStartOut_fir_latency_reg[7] <= hStartOut_fir_latency_reg_next[7];
          hStartOut_fir_latency_reg[8] <= hStartOut_fir_latency_reg_next[8];
          hStartOut_fir_latency_reg[9] <= hStartOut_fir_latency_reg_next[9];
          hStartOut_fir_latency_reg[10] <= hStartOut_fir_latency_reg_next[10];
          hStartOut_fir_latency_reg[11] <= hStartOut_fir_latency_reg_next[11];
          hStartOut_fir_latency_reg[12] <= hStartOut_fir_latency_reg_next[12];
          hStartOut_fir_latency_reg[13] <= hStartOut_fir_latency_reg_next[13];
          hStartOut_fir_latency_reg[14] <= hStartOut_fir_latency_reg_next[14];
        end
      end
    end

  assign hStartOut = hStartOut_fir_latency_reg[14];
  assign hStartOut_fir_latency_reg_next[0] = hStartIn;
  assign hStartOut_fir_latency_reg_next[1] = hStartOut_fir_latency_reg[0];
  assign hStartOut_fir_latency_reg_next[2] = hStartOut_fir_latency_reg[1];
  assign hStartOut_fir_latency_reg_next[3] = hStartOut_fir_latency_reg[2];
  assign hStartOut_fir_latency_reg_next[4] = hStartOut_fir_latency_reg[3];
  assign hStartOut_fir_latency_reg_next[5] = hStartOut_fir_latency_reg[4];
  assign hStartOut_fir_latency_reg_next[6] = hStartOut_fir_latency_reg[5];
  assign hStartOut_fir_latency_reg_next[7] = hStartOut_fir_latency_reg[6];
  assign hStartOut_fir_latency_reg_next[8] = hStartOut_fir_latency_reg[7];
  assign hStartOut_fir_latency_reg_next[9] = hStartOut_fir_latency_reg[8];
  assign hStartOut_fir_latency_reg_next[10] = hStartOut_fir_latency_reg[9];
  assign hStartOut_fir_latency_reg_next[11] = hStartOut_fir_latency_reg[10];
  assign hStartOut_fir_latency_reg_next[12] = hStartOut_fir_latency_reg[11];
  assign hStartOut_fir_latency_reg_next[13] = hStartOut_fir_latency_reg[12];
  assign hStartOut_fir_latency_reg_next[14] = hStartOut_fir_latency_reg[13];



  always @(posedge clk or posedge reset)
    begin : hEndOut_fir_latency_process
      if (reset == 1'b1) begin
        hEndOut_fir_latency_reg[0] <= 1'b0;
        hEndOut_fir_latency_reg[1] <= 1'b0;
        hEndOut_fir_latency_reg[2] <= 1'b0;
        hEndOut_fir_latency_reg[3] <= 1'b0;
        hEndOut_fir_latency_reg[4] <= 1'b0;
        hEndOut_fir_latency_reg[5] <= 1'b0;
        hEndOut_fir_latency_reg[6] <= 1'b0;
        hEndOut_fir_latency_reg[7] <= 1'b0;
        hEndOut_fir_latency_reg[8] <= 1'b0;
        hEndOut_fir_latency_reg[9] <= 1'b0;
        hEndOut_fir_latency_reg[10] <= 1'b0;
        hEndOut_fir_latency_reg[11] <= 1'b0;
        hEndOut_fir_latency_reg[12] <= 1'b0;
        hEndOut_fir_latency_reg[13] <= 1'b0;
        hEndOut_fir_latency_reg[14] <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndOut_fir_latency_reg[0] <= hEndOut_fir_latency_reg_next[0];
          hEndOut_fir_latency_reg[1] <= hEndOut_fir_latency_reg_next[1];
          hEndOut_fir_latency_reg[2] <= hEndOut_fir_latency_reg_next[2];
          hEndOut_fir_latency_reg[3] <= hEndOut_fir_latency_reg_next[3];
          hEndOut_fir_latency_reg[4] <= hEndOut_fir_latency_reg_next[4];
          hEndOut_fir_latency_reg[5] <= hEndOut_fir_latency_reg_next[5];
          hEndOut_fir_latency_reg[6] <= hEndOut_fir_latency_reg_next[6];
          hEndOut_fir_latency_reg[7] <= hEndOut_fir_latency_reg_next[7];
          hEndOut_fir_latency_reg[8] <= hEndOut_fir_latency_reg_next[8];
          hEndOut_fir_latency_reg[9] <= hEndOut_fir_latency_reg_next[9];
          hEndOut_fir_latency_reg[10] <= hEndOut_fir_latency_reg_next[10];
          hEndOut_fir_latency_reg[11] <= hEndOut_fir_latency_reg_next[11];
          hEndOut_fir_latency_reg[12] <= hEndOut_fir_latency_reg_next[12];
          hEndOut_fir_latency_reg[13] <= hEndOut_fir_latency_reg_next[13];
          hEndOut_fir_latency_reg[14] <= hEndOut_fir_latency_reg_next[14];
        end
      end
    end

  assign hEndOut = hEndOut_fir_latency_reg[14];
  assign hEndOut_fir_latency_reg_next[0] = hEndIn;
  assign hEndOut_fir_latency_reg_next[1] = hEndOut_fir_latency_reg[0];
  assign hEndOut_fir_latency_reg_next[2] = hEndOut_fir_latency_reg[1];
  assign hEndOut_fir_latency_reg_next[3] = hEndOut_fir_latency_reg[2];
  assign hEndOut_fir_latency_reg_next[4] = hEndOut_fir_latency_reg[3];
  assign hEndOut_fir_latency_reg_next[5] = hEndOut_fir_latency_reg[4];
  assign hEndOut_fir_latency_reg_next[6] = hEndOut_fir_latency_reg[5];
  assign hEndOut_fir_latency_reg_next[7] = hEndOut_fir_latency_reg[6];
  assign hEndOut_fir_latency_reg_next[8] = hEndOut_fir_latency_reg[7];
  assign hEndOut_fir_latency_reg_next[9] = hEndOut_fir_latency_reg[8];
  assign hEndOut_fir_latency_reg_next[10] = hEndOut_fir_latency_reg[9];
  assign hEndOut_fir_latency_reg_next[11] = hEndOut_fir_latency_reg[10];
  assign hEndOut_fir_latency_reg_next[12] = hEndOut_fir_latency_reg[11];
  assign hEndOut_fir_latency_reg_next[13] = hEndOut_fir_latency_reg[12];
  assign hEndOut_fir_latency_reg_next[14] = hEndOut_fir_latency_reg[13];



  always @(posedge clk or posedge reset)
    begin : validOut_fir_latency_process
      if (reset == 1'b1) begin
        validOut_fir_latency_reg[0] <= 1'b0;
        validOut_fir_latency_reg[1] <= 1'b0;
        validOut_fir_latency_reg[2] <= 1'b0;
        validOut_fir_latency_reg[3] <= 1'b0;
        validOut_fir_latency_reg[4] <= 1'b0;
        validOut_fir_latency_reg[5] <= 1'b0;
        validOut_fir_latency_reg[6] <= 1'b0;
        validOut_fir_latency_reg[7] <= 1'b0;
        validOut_fir_latency_reg[8] <= 1'b0;
        validOut_fir_latency_reg[9] <= 1'b0;
        validOut_fir_latency_reg[10] <= 1'b0;
        validOut_fir_latency_reg[11] <= 1'b0;
        validOut_fir_latency_reg[12] <= 1'b0;
        validOut_fir_latency_reg[13] <= 1'b0;
        validOut_fir_latency_reg[14] <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_fir_latency_reg[0] <= validOut_fir_latency_reg_next[0];
          validOut_fir_latency_reg[1] <= validOut_fir_latency_reg_next[1];
          validOut_fir_latency_reg[2] <= validOut_fir_latency_reg_next[2];
          validOut_fir_latency_reg[3] <= validOut_fir_latency_reg_next[3];
          validOut_fir_latency_reg[4] <= validOut_fir_latency_reg_next[4];
          validOut_fir_latency_reg[5] <= validOut_fir_latency_reg_next[5];
          validOut_fir_latency_reg[6] <= validOut_fir_latency_reg_next[6];
          validOut_fir_latency_reg[7] <= validOut_fir_latency_reg_next[7];
          validOut_fir_latency_reg[8] <= validOut_fir_latency_reg_next[8];
          validOut_fir_latency_reg[9] <= validOut_fir_latency_reg_next[9];
          validOut_fir_latency_reg[10] <= validOut_fir_latency_reg_next[10];
          validOut_fir_latency_reg[11] <= validOut_fir_latency_reg_next[11];
          validOut_fir_latency_reg[12] <= validOut_fir_latency_reg_next[12];
          validOut_fir_latency_reg[13] <= validOut_fir_latency_reg_next[13];
          validOut_fir_latency_reg[14] <= validOut_fir_latency_reg_next[14];
        end
      end
    end

  assign validOut = validOut_fir_latency_reg[14];
  assign validOut_fir_latency_reg_next[0] = validIn;
  assign validOut_fir_latency_reg_next[1] = validOut_fir_latency_reg[0];
  assign validOut_fir_latency_reg_next[2] = validOut_fir_latency_reg[1];
  assign validOut_fir_latency_reg_next[3] = validOut_fir_latency_reg[2];
  assign validOut_fir_latency_reg_next[4] = validOut_fir_latency_reg[3];
  assign validOut_fir_latency_reg_next[5] = validOut_fir_latency_reg[4];
  assign validOut_fir_latency_reg_next[6] = validOut_fir_latency_reg[5];
  assign validOut_fir_latency_reg_next[7] = validOut_fir_latency_reg[6];
  assign validOut_fir_latency_reg_next[8] = validOut_fir_latency_reg[7];
  assign validOut_fir_latency_reg_next[9] = validOut_fir_latency_reg[8];
  assign validOut_fir_latency_reg_next[10] = validOut_fir_latency_reg[9];
  assign validOut_fir_latency_reg_next[11] = validOut_fir_latency_reg[10];
  assign validOut_fir_latency_reg_next[12] = validOut_fir_latency_reg[11];
  assign validOut_fir_latency_reg_next[13] = validOut_fir_latency_reg[12];
  assign validOut_fir_latency_reg_next[14] = validOut_fir_latency_reg[13];



  assign dataOut = dataOut_2;

endmodule  // HSG_IP_src_FIR2DKernel_block5

