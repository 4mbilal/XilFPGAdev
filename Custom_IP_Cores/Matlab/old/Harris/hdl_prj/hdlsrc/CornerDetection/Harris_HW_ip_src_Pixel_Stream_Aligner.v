// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CornerDetection\Harris_HW_ip_src_Pixel_Stream_Aligner.v
// Created: 2020-01-15 11:28:57
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Harris_HW_ip_src_Pixel_Stream_Aligner
// Source Path: CornerDetection/Harris_HW/HDL Corner Algorithm/Pixel Stream Aligner
// Hierarchy Level: 2
// 
// Pixel Stream Aligner
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Harris_HW_ip_src_Pixel_Stream_Aligner
          (clk,
           reset,
           enb,
           in0_0,
           in0_1,
           in0_2,
           in1_hStart,
           in1_hEnd,
           in1_vStart,
           in1_vEnd,
           in1_valid,
           in2,
           in3_hStart,
           in3_hEnd,
           in3_vStart,
           in3_vEnd,
           in3_valid,
           out0_0,
           out0_1,
           out0_2,
           out1,
           out2_hStart,
           out2_hEnd,
           out2_vStart,
           out2_vEnd,
           out2_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] in0_0;  // uint8
  input   [7:0] in0_1;  // uint8
  input   [7:0] in0_2;  // uint8
  input   in1_hStart;
  input   in1_hEnd;
  input   in1_vStart;
  input   in1_vEnd;
  input   in1_valid;
  input   [7:0] in2;  // uint8
  input   in3_hStart;
  input   in3_hEnd;
  input   in3_vStart;
  input   in3_vEnd;
  input   in3_valid;
  output  [7:0] out0_0;  // uint8
  output  [7:0] out0_1;  // uint8
  output  [7:0] out0_2;  // uint8
  output  [7:0] out1;  // uint8
  output  out2_hStart;
  output  out2_hEnd;
  output  out2_vStart;
  output  out2_vEnd;
  output  out2_valid;


  reg  refValidInReg;  // ufix1
  reg  [0:5] refvaldlyline_reg;  // ufix1 [6]
  wire [0:5] refvaldlyline_reg_next;  // ufix1 [6]
  wire pixelValidPreReg;  // ufix1
  reg  [0:1] rvalOReg_reg;  // ufix1 [2]
  wire [0:1] rvalOReg_reg_next;  // ufix1 [2]
  wire pixelValidOutReg;  // ufix1
  reg  refVEndInReg;  // ufix1
  reg  [0:5] refvedlyline_reg;  // ufix1 [6]
  wire [0:5] refvedlyline_reg_next;  // ufix1 [6]
  wire pixelVEndPreReg;  // ufix1
  wire refvEndInv;  // ufix1
  reg  refVStartInReg;  // ufix1
  reg  [0:5] refvsdlyline_reg;  // ufix1 [6]
  wire [0:5] refvsdlyline_reg_next;  // ufix1 [6]
  wire pixelVStartPreReg;  // ufix1
  wire refinFrame2Term;  // ufix1
  wire refValidInv;  // ufix1
  reg  refinFrame;  // ufix1
  wire refinFrame3Term;  // ufix1
  wire refinFrameNext;  // ufix1
  wire refinFrame1Term;  // ufix1
  wire refinFrameInv;  // ufix1
  wire refnewFrame;  // ufix1
  reg  pixelVEndInReg;  // ufix1
  wire pixelvEndInv;  // ufix1
  reg  pixelValidInReg;  // ufix1
  reg  pixelVStartInReg;  // ufix1
  wire pixelinFrame2Term;  // ufix1
  wire pixelValidInv;  // ufix1
  reg  pixelinFrame;  // ufix1
  wire pixelinFrame3Term;  // ufix1
  wire pixelinFrameNext;  // ufix1
  wire pixelinFrame1Term;  // ufix1
  wire pixelinFrameInv;  // ufix1
  wire pixelnewFrame;  // ufix1
  wire trueconst;  // ufix1
  reg  frameStartValid;  // ufix1
  reg  refFrameValid;  // ufix1
  wire pixelOutValid;  // ufix1
  wire [7:0] pixzeroconst;  // uint8
  reg [7:0] pixelInReg1comp;  // uint8
  wire RAMwtone;  // ufix1
  reg  pixelHEndInReg;  // ufix1
  wire pixelhEndInv;  // ufix1
  reg  pixelHStartInReg;  // ufix1
  wire pixelinLine2Term;  // ufix1
  reg  pixelinLine;  // ufix1
  wire pixelinLineInv;  // ufix1
  wire pixelinLine6Term;  // ufix1
  wire pixelinLine5Term;  // ufix1
  wire pixelinLine4Term;  // ufix1
  wire pixelinLine3Term;  // ufix1
  wire pixelinLine1Term;  // ufix1
  wire pixelinLineNext;  // ufix1
  wire pixelnewLine;  // ufix1
  wire RAMwttwo;  // ufix1
  wire RAMwren;  // ufix1
  reg [13:0] RAMwraddr;  // ufix14
  wire ramrdframe;  // ufix1
  reg  refHEndInReg;  // ufix1
  reg  [0:5] refhedlyline_reg;  // ufix1 [6]
  wire [0:5] refhedlyline_reg_next;  // ufix1 [6]
  wire pixelHEndPreReg;  // ufix1
  wire refhEndInv;  // ufix1
  reg  refHStartInReg;  // ufix1
  reg  [0:5] refhsdlyline_reg;  // ufix1 [6]
  wire [0:5] refhsdlyline_reg_next;  // ufix1 [6]
  wire pixelHStartPreReg;  // ufix1
  wire refinLine2Term;  // ufix1
  reg  refinLine;  // ufix1
  wire refinLineInv;  // ufix1
  wire refinLine6Term;  // ufix1
  wire refinLine5Term;  // ufix1
  wire refinLine4Term;  // ufix1
  wire refinLine3Term;  // ufix1
  wire refinLineNext;  // ufix1
  wire refinLine1Term;  // ufix1
  wire refnewLine;  // ufix1
  wire refNewFrameInv;  // ufix1
  wire refNewLineNotFrame;  // ufix1
  wire linerden;  // ufix1
  reg [3:0] linerdaddr;  // ufix4
  wire linerd0addrdecode;  // ufix1
  wire pixelNewFrameInv;  // ufix1
  wire pixelNewLineNotFrame;  // ufix1
  reg  linewr0addr;  // ufix1
  reg  linewr1addr;  // ufix1
  reg  linewr2addr;  // ufix1
  reg  linewr3addr;  // ufix1
  reg  linewr4addr;  // ufix1
  reg  linewr5addr;  // ufix1
  reg  linewr6addr;  // ufix1
  reg  linewr7addr;  // ufix1
  reg  linewr8addr;  // ufix1
  reg  linewr9addr;  // ufix1
  wire wr0gate;  // ufix1
  wire line0StartsValidNext;  // ufix1
  wire linerd1addrdecode;  // ufix1
  wire wr1gate;  // ufix1
  wire line1StartsValidNext;  // ufix1
  wire linerd2addrdecode;  // ufix1
  wire wr2gate;  // ufix1
  wire line2StartsValidNext;  // ufix1
  wire linerd3addrdecode;  // ufix1
  wire wr3gate;  // ufix1
  wire line3StartsValidNext;  // ufix1
  wire linerd4addrdecode;  // ufix1
  wire wr4gate;  // ufix1
  wire line4StartsValidNext;  // ufix1
  wire linerd5addrdecode;  // ufix1
  wire wr5gate;  // ufix1
  wire line5StartsValidNext;  // ufix1
  wire linerd6addrdecode;  // ufix1
  wire wr6gate;  // ufix1
  wire line6StartsValidNext;  // ufix1
  wire linerd7addrdecode;  // ufix1
  wire wr7gate;  // ufix1
  wire line7StartsValidNext;  // ufix1
  wire linerd8addrdecode;  // ufix1
  wire wr8gate;  // ufix1
  wire line8StartsValidNext;  // ufix1
  wire linerd9addrdecode;  // ufix1
  wire wr9gate;  // ufix1
  wire line9StartsValidNext;  // ufix1
  wire RAMrdload;  // ufix1
  wire rd9gate;  // ufix1
  wire line9StartsEn;  // ufix1
  reg  line9StartsValid;  // ufix1
  wire rd8gate;  // ufix1
  wire line8StartsEn;  // ufix1
  reg  line8StartsValid;  // ufix1
  wire rd7gate;  // ufix1
  wire line7StartsEn;  // ufix1
  reg  line7StartsValid;  // ufix1
  wire rd6gate;  // ufix1
  wire line6StartsEn;  // ufix1
  reg  line6StartsValid;  // ufix1
  wire rd5gate;  // ufix1
  wire line5StartsEn;  // ufix1
  reg  line5StartsValid;  // ufix1
  wire rd4gate;  // ufix1
  wire line4StartsEn;  // ufix1
  reg  line4StartsValid;  // ufix1
  wire rd3gate;  // ufix1
  wire line3StartsEn;  // ufix1
  reg  line3StartsValid;  // ufix1
  wire rd2gate;  // ufix1
  wire line2StartsEn;  // ufix1
  reg  line2StartsValid;  // ufix1
  wire rd1gate;  // ufix1
  wire line1StartsEn;  // ufix1
  reg  line1StartsValid;  // ufix1
  wire rd0gate;  // ufix1
  wire line0StartsEn;  // ufix1
  reg  line0StartsValid;  // ufix1
  wire linerdvalid;  // ufix1
  wire ramrdline;  // ufix1
  reg [13:0] line0Starts;  // ufix14
  reg [13:0] line1Starts;  // ufix14
  reg [13:0] line2Starts;  // ufix14
  reg [13:0] line3Starts;  // ufix14
  reg [13:0] line4Starts;  // ufix14
  reg [13:0] line5Starts;  // ufix14
  reg [13:0] line6Starts;  // ufix14
  reg [13:0] line7Starts;  // ufix14
  reg [13:0] line8Starts;  // ufix14
  reg [13:0] line9Starts;  // ufix14
  wire [13:0] linerddata;  // ufix14
  reg [13:0] frameStart;  // ufix14
  wire [13:0] RAMrdloadval;  // ufix14
  wire refEarlyInFrame;  // ufix1
  wire refEarlyInLine;  // ufix1
  wire [13:0] constone;  // ufix14
  reg [13:0] RAMrdaddr;  // ufix14
  wire [13:0] RAMrdnextaddr;  // ufix14
  wire relop_relop1;
  wire notholdaddr;  // ufix1
  wire RAMrden;  // ufix1
  wire [7:0] RAMrddata1comp;  // uint8
  wire [7:0] pixelOutReg1comp;  // uint8
  reg [7:0] pixelRegOutMux1comp;  // uint8
  reg [7:0] pixelInReg2comp;  // uint8
  wire [7:0] RAMrddata2comp;  // uint8
  wire [7:0] pixelOutReg2comp;  // uint8
  reg [7:0] pixelRegOutMux2comp;  // uint8
  reg [7:0] pixelInReg3comp;  // uint8
  wire [7:0] RAMrddata3comp;  // uint8
  wire [7:0] pixelOutReg3comp;  // uint8
  reg [7:0] pixelRegOutMux3comp;  // uint8
  wire [7:0] refzeroconst_2;  // uint8
  reg [7:0] refpixelInReg;  // uint8
  reg [7:0] refpixdlyline_reg [0:7];  // ufix8 [8]
  wire [7:0] refpixdlyline_reg_next [0:7];  // ufix8 [8]
  wire [7:0] refpixeldly;  // uint8
  wire [7:0] refpixelOutReg;  // uint8
  reg [7:0] refPixelOut;  // uint8
  reg  [0:1] rhSOReg_reg;  // ufix1 [2]
  wire [0:1] rhSOReg_reg_next;  // ufix1 [2]
  wire pixelHStartOutReg;  // ufix1
  reg  hStartOut;
  reg  [0:1] rhEOReg_reg;  // ufix1 [2]
  wire [0:1] rhEOReg_reg_next;  // ufix1 [2]
  wire pixelHEndOutReg;  // ufix1
  reg  hEndOut;
  reg  [0:1] rvSOReg_reg;  // ufix1 [2]
  wire [0:1] rvSOReg_reg_next;  // ufix1 [2]
  wire pixelVStartOutReg;  // ufix1
  reg  vStartOut;
  reg  [0:1] rvEOReg_reg;  // ufix1 [2]
  wire [0:1] rvEOReg_reg_next;  // ufix1 [2]
  wire pixelVEndOutReg;  // ufix1
  reg  vEndOut;
  reg  validOut;


  always @(posedge clk or posedge reset)
    begin : rvalIReg_process
      if (reset == 1'b1) begin
        refValidInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          refValidInReg <= in3_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : refvaldlyline_process
      if (reset == 1'b1) begin
        refvaldlyline_reg[0] <= 1'b0;
        refvaldlyline_reg[1] <= 1'b0;
        refvaldlyline_reg[2] <= 1'b0;
        refvaldlyline_reg[3] <= 1'b0;
        refvaldlyline_reg[4] <= 1'b0;
        refvaldlyline_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          refvaldlyline_reg[0] <= refvaldlyline_reg_next[0];
          refvaldlyline_reg[1] <= refvaldlyline_reg_next[1];
          refvaldlyline_reg[2] <= refvaldlyline_reg_next[2];
          refvaldlyline_reg[3] <= refvaldlyline_reg_next[3];
          refvaldlyline_reg[4] <= refvaldlyline_reg_next[4];
          refvaldlyline_reg[5] <= refvaldlyline_reg_next[5];
        end
      end
    end

  assign pixelValidPreReg = refvaldlyline_reg[5];
  assign refvaldlyline_reg_next[0] = refValidInReg;
  assign refvaldlyline_reg_next[1] = refvaldlyline_reg[0];
  assign refvaldlyline_reg_next[2] = refvaldlyline_reg[1];
  assign refvaldlyline_reg_next[3] = refvaldlyline_reg[2];
  assign refvaldlyline_reg_next[4] = refvaldlyline_reg[3];
  assign refvaldlyline_reg_next[5] = refvaldlyline_reg[4];



  always @(posedge clk or posedge reset)
    begin : rvalOReg_process
      if (reset == 1'b1) begin
        rvalOReg_reg[0] <= 1'b0;
        rvalOReg_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          rvalOReg_reg[0] <= rvalOReg_reg_next[0];
          rvalOReg_reg[1] <= rvalOReg_reg_next[1];
        end
      end
    end

  assign pixelValidOutReg = rvalOReg_reg[1];
  assign rvalOReg_reg_next[0] = pixelValidPreReg;
  assign rvalOReg_reg_next[1] = rvalOReg_reg[0];



  always @(posedge clk or posedge reset)
    begin : rvEIReg_process
      if (reset == 1'b1) begin
        refVEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          refVEndInReg <= in3_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : refvedlyline_process
      if (reset == 1'b1) begin
        refvedlyline_reg[0] <= 1'b0;
        refvedlyline_reg[1] <= 1'b0;
        refvedlyline_reg[2] <= 1'b0;
        refvedlyline_reg[3] <= 1'b0;
        refvedlyline_reg[4] <= 1'b0;
        refvedlyline_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          refvedlyline_reg[0] <= refvedlyline_reg_next[0];
          refvedlyline_reg[1] <= refvedlyline_reg_next[1];
          refvedlyline_reg[2] <= refvedlyline_reg_next[2];
          refvedlyline_reg[3] <= refvedlyline_reg_next[3];
          refvedlyline_reg[4] <= refvedlyline_reg_next[4];
          refvedlyline_reg[5] <= refvedlyline_reg_next[5];
        end
      end
    end

  assign pixelVEndPreReg = refvedlyline_reg[5];
  assign refvedlyline_reg_next[0] = refVEndInReg;
  assign refvedlyline_reg_next[1] = refvedlyline_reg[0];
  assign refvedlyline_reg_next[2] = refvedlyline_reg[1];
  assign refvedlyline_reg_next[3] = refvedlyline_reg[2];
  assign refvedlyline_reg_next[4] = refvedlyline_reg[3];
  assign refvedlyline_reg_next[5] = refvedlyline_reg[4];



  assign refvEndInv =  ~ pixelVEndPreReg;



  always @(posedge clk or posedge reset)
    begin : rvSIReg_process
      if (reset == 1'b1) begin
        refVStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          refVStartInReg <= in3_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : refvsdlyline_process
      if (reset == 1'b1) begin
        refvsdlyline_reg[0] <= 1'b0;
        refvsdlyline_reg[1] <= 1'b0;
        refvsdlyline_reg[2] <= 1'b0;
        refvsdlyline_reg[3] <= 1'b0;
        refvsdlyline_reg[4] <= 1'b0;
        refvsdlyline_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          refvsdlyline_reg[0] <= refvsdlyline_reg_next[0];
          refvsdlyline_reg[1] <= refvsdlyline_reg_next[1];
          refvsdlyline_reg[2] <= refvsdlyline_reg_next[2];
          refvsdlyline_reg[3] <= refvsdlyline_reg_next[3];
          refvsdlyline_reg[4] <= refvsdlyline_reg_next[4];
          refvsdlyline_reg[5] <= refvsdlyline_reg_next[5];
        end
      end
    end

  assign pixelVStartPreReg = refvsdlyline_reg[5];
  assign refvsdlyline_reg_next[0] = refVStartInReg;
  assign refvsdlyline_reg_next[1] = refvsdlyline_reg[0];
  assign refvsdlyline_reg_next[2] = refvsdlyline_reg[1];
  assign refvsdlyline_reg_next[3] = refvsdlyline_reg[2];
  assign refvsdlyline_reg_next[4] = refvsdlyline_reg[3];
  assign refvsdlyline_reg_next[5] = refvsdlyline_reg[4];



  assign refinFrame2Term = pixelValidPreReg & pixelVStartPreReg;



  assign refValidInv =  ~ pixelValidPreReg;



  assign refinFrame3Term = refValidInv & refinFrame;



  always @(posedge clk or posedge reset)
    begin : inFReg_process
      if (reset == 1'b1) begin
        refinFrame <= 1'b0;
      end
      else begin
        if (enb) begin
          refinFrame <= refinFrameNext;
        end
      end
    end



  assign refinFrame1Term = refvEndInv & refinFrame;



  assign refinFrameNext = refinFrame3Term | (refinFrame1Term | refinFrame2Term);



  assign refinFrameInv =  ~ refinFrame;



  assign refnewFrame = refinFrameNext & refinFrameInv;



  always @(posedge clk or posedge reset)
    begin : vEIReg_process
      if (reset == 1'b1) begin
        pixelVEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelVEndInReg <= in1_vEnd;
        end
      end
    end



  assign pixelvEndInv =  ~ pixelVEndInReg;



  always @(posedge clk or posedge reset)
    begin : valIReg_process
      if (reset == 1'b1) begin
        pixelValidInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelValidInReg <= in1_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : vSIReg_process
      if (reset == 1'b1) begin
        pixelVStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelVStartInReg <= in1_vStart;
        end
      end
    end



  assign pixelinFrame2Term = pixelValidInReg & pixelVStartInReg;



  assign pixelValidInv =  ~ pixelValidInReg;



  assign pixelinFrame3Term = pixelValidInv & pixelinFrame;



  always @(posedge clk or posedge reset)
    begin : inFReg_1_process
      if (reset == 1'b1) begin
        pixelinFrame <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelinFrame <= pixelinFrameNext;
        end
      end
    end



  assign pixelinFrame1Term = pixelvEndInv & pixelinFrame;



  assign pixelinFrameNext = pixelinFrame3Term | (pixelinFrame1Term | pixelinFrame2Term);



  assign pixelinFrameInv =  ~ pixelinFrame;



  assign pixelnewFrame = pixelinFrameNext & pixelinFrameInv;



  assign trueconst = 1'b1;



  always @(posedge clk or posedge reset)
    begin : fsvreg_process
      if (reset == 1'b1) begin
        frameStartValid <= 1'b0;
      end
      else begin
        if (enb && pixelnewFrame) begin
          frameStartValid <= trueconst;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : rfvreg_process
      if (reset == 1'b1) begin
        refFrameValid <= 1'b0;
      end
      else begin
        if (enb && refnewFrame) begin
          refFrameValid <= frameStartValid;
        end
      end
    end



  assign pixelOutValid = pixelValidOutReg & refFrameValid;



  assign pixzeroconst = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : pixelIReg_process
      if (reset == 1'b1) begin
        pixelInReg1comp <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelInReg1comp <= in0_0;
        end
      end
    end



  assign RAMwtone = pixelinFrame | pixelnewFrame;



  always @(posedge clk or posedge reset)
    begin : hEIReg_process
      if (reset == 1'b1) begin
        pixelHEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelHEndInReg <= in1_hEnd;
        end
      end
    end



  assign pixelhEndInv =  ~ pixelHEndInReg;



  always @(posedge clk or posedge reset)
    begin : hSIReg_process
      if (reset == 1'b1) begin
        pixelHStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelHStartInReg <= in1_hStart;
        end
      end
    end



  assign pixelinLine2Term = pixelVStartInReg & (pixelValidInReg & pixelHStartInReg);



  assign pixelinLineInv =  ~ pixelinLine;



  assign pixelinLine6Term = pixelinLineInv & (pixelinFrame & (pixelvEndInv & (pixelValidInReg & pixelHStartInReg)));



  assign pixelinLine5Term = pixelValidInv & pixelinLine;



  assign pixelinLine4Term = pixelinFrameInv & pixelinLine;



  assign pixelinLine3Term = pixelVStartInReg & pixelinLine;



  assign pixelinLine1Term = pixelhEndInv & pixelinLine;



  assign pixelinLineNext = pixelinLine6Term | (pixelinLine5Term | (pixelinLine4Term | (pixelinLine3Term | (pixelinLine1Term | pixelinLine2Term))));



  always @(posedge clk or posedge reset)
    begin : inLReg_process
      if (reset == 1'b1) begin
        pixelinLine <= 1'b0;
      end
      else begin
        if (enb) begin
          pixelinLine <= pixelinLineNext;
        end
      end
    end



  assign pixelnewLine = pixelinLineNext & pixelinLineInv;



  assign RAMwttwo = pixelinLine | pixelnewLine;



  assign RAMwren = pixelValidInReg & (RAMwtone & RAMwttwo);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 16383
  always @(posedge clk or posedge reset)
    begin : wraddrcounter_process
      if (reset == 1'b1) begin
        RAMwraddr <= 14'b00000000000000;
      end
      else begin
        if (enb && RAMwren) begin
          RAMwraddr <= RAMwraddr + 14'b00000000000001;
        end
      end
    end



  assign ramrdframe = refnewFrame & (pixelValidPreReg & (frameStartValid & refFrameValid));



  always @(posedge clk or posedge reset)
    begin : rhEIReg_process
      if (reset == 1'b1) begin
        refHEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          refHEndInReg <= in3_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : refhedlyline_process
      if (reset == 1'b1) begin
        refhedlyline_reg[0] <= 1'b0;
        refhedlyline_reg[1] <= 1'b0;
        refhedlyline_reg[2] <= 1'b0;
        refhedlyline_reg[3] <= 1'b0;
        refhedlyline_reg[4] <= 1'b0;
        refhedlyline_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          refhedlyline_reg[0] <= refhedlyline_reg_next[0];
          refhedlyline_reg[1] <= refhedlyline_reg_next[1];
          refhedlyline_reg[2] <= refhedlyline_reg_next[2];
          refhedlyline_reg[3] <= refhedlyline_reg_next[3];
          refhedlyline_reg[4] <= refhedlyline_reg_next[4];
          refhedlyline_reg[5] <= refhedlyline_reg_next[5];
        end
      end
    end

  assign pixelHEndPreReg = refhedlyline_reg[5];
  assign refhedlyline_reg_next[0] = refHEndInReg;
  assign refhedlyline_reg_next[1] = refhedlyline_reg[0];
  assign refhedlyline_reg_next[2] = refhedlyline_reg[1];
  assign refhedlyline_reg_next[3] = refhedlyline_reg[2];
  assign refhedlyline_reg_next[4] = refhedlyline_reg[3];
  assign refhedlyline_reg_next[5] = refhedlyline_reg[4];



  assign refhEndInv =  ~ pixelHEndPreReg;



  always @(posedge clk or posedge reset)
    begin : rhSIReg_process
      if (reset == 1'b1) begin
        refHStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          refHStartInReg <= in3_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : refhsdlyline_process
      if (reset == 1'b1) begin
        refhsdlyline_reg[0] <= 1'b0;
        refhsdlyline_reg[1] <= 1'b0;
        refhsdlyline_reg[2] <= 1'b0;
        refhsdlyline_reg[3] <= 1'b0;
        refhsdlyline_reg[4] <= 1'b0;
        refhsdlyline_reg[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          refhsdlyline_reg[0] <= refhsdlyline_reg_next[0];
          refhsdlyline_reg[1] <= refhsdlyline_reg_next[1];
          refhsdlyline_reg[2] <= refhsdlyline_reg_next[2];
          refhsdlyline_reg[3] <= refhsdlyline_reg_next[3];
          refhsdlyline_reg[4] <= refhsdlyline_reg_next[4];
          refhsdlyline_reg[5] <= refhsdlyline_reg_next[5];
        end
      end
    end

  assign pixelHStartPreReg = refhsdlyline_reg[5];
  assign refhsdlyline_reg_next[0] = refHStartInReg;
  assign refhsdlyline_reg_next[1] = refhsdlyline_reg[0];
  assign refhsdlyline_reg_next[2] = refhsdlyline_reg[1];
  assign refhsdlyline_reg_next[3] = refhsdlyline_reg[2];
  assign refhsdlyline_reg_next[4] = refhsdlyline_reg[3];
  assign refhsdlyline_reg_next[5] = refhsdlyline_reg[4];



  assign refinLine2Term = pixelVStartPreReg & (pixelValidPreReg & pixelHStartPreReg);



  assign refinLineInv =  ~ refinLine;



  assign refinLine6Term = refinLineInv & (refinFrame & (refvEndInv & (pixelValidPreReg & pixelHStartPreReg)));



  assign refinLine5Term = refValidInv & refinLine;



  assign refinLine4Term = refinFrameInv & refinLine;



  assign refinLine3Term = pixelVStartPreReg & refinLine;



  always @(posedge clk or posedge reset)
    begin : inLReg_1_process
      if (reset == 1'b1) begin
        refinLine <= 1'b0;
      end
      else begin
        if (enb) begin
          refinLine <= refinLineNext;
        end
      end
    end



  assign refinLine1Term = refhEndInv & refinLine;



  assign refinLineNext = refinLine6Term | (refinLine5Term | (refinLine4Term | (refinLine3Term | (refinLine1Term | refinLine2Term))));



  assign refnewLine = refinLineNext & refinLineInv;



  assign refNewFrameInv =  ~ refnewFrame;



  assign refNewLineNotFrame = refnewLine & refNewFrameInv;



  assign linerden = refNewLineNotFrame & (frameStartValid & refFrameValid);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 9
  always @(posedge clk or posedge reset)
    begin : rdlinecounter_process
      if (reset == 1'b1) begin
        linerdaddr <= 4'b0000;
      end
      else begin
        if (enb) begin
          if (linerden == 1'b1) begin
            if (linerdaddr >= 4'b1001) begin
              linerdaddr <= 4'b0000;
            end
            else begin
              linerdaddr <= linerdaddr + 4'b0001;
            end
          end
        end
      end
    end



  assign linerd0addrdecode = linerdaddr == 4'b0000;



  assign pixelNewFrameInv =  ~ pixelnewFrame;



  assign pixelNewLineNotFrame = pixelnewLine & pixelNewFrameInv;



  always @(posedge clk or posedge reset)
    begin : linewrreg_process
      if (reset == 1'b1) begin
        linewr1addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr1addr <= linewr0addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_1_process
      if (reset == 1'b1) begin
        linewr2addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr2addr <= linewr1addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_2_process
      if (reset == 1'b1) begin
        linewr3addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr3addr <= linewr2addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_3_process
      if (reset == 1'b1) begin
        linewr4addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr4addr <= linewr3addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_4_process
      if (reset == 1'b1) begin
        linewr5addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr5addr <= linewr4addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_5_process
      if (reset == 1'b1) begin
        linewr6addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr6addr <= linewr5addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_6_process
      if (reset == 1'b1) begin
        linewr7addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr7addr <= linewr6addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_7_process
      if (reset == 1'b1) begin
        linewr8addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr8addr <= linewr7addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_8_process
      if (reset == 1'b1) begin
        linewr9addr <= 1'b0;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr9addr <= linewr8addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : linewrreg_9_process
      if (reset == 1'b1) begin
        linewr0addr <= 1'b1;
      end
      else begin
        if (enb && pixelNewLineNotFrame) begin
          linewr0addr <= linewr9addr;
        end
      end
    end



  assign wr0gate = linewr0addr & (frameStartValid & pixelNewLineNotFrame);



  assign line0StartsValidNext = wr0gate & trueconst;



  assign linerd1addrdecode = linerdaddr == 4'b0001;



  assign wr1gate = linewr1addr & (frameStartValid & pixelNewLineNotFrame);



  assign line1StartsValidNext = wr1gate & trueconst;



  assign linerd2addrdecode = linerdaddr == 4'b0010;



  assign wr2gate = linewr2addr & (frameStartValid & pixelNewLineNotFrame);



  assign line2StartsValidNext = wr2gate & trueconst;



  assign linerd3addrdecode = linerdaddr == 4'b0011;



  assign wr3gate = linewr3addr & (frameStartValid & pixelNewLineNotFrame);



  assign line3StartsValidNext = wr3gate & trueconst;



  assign linerd4addrdecode = linerdaddr == 4'b0100;



  assign wr4gate = linewr4addr & (frameStartValid & pixelNewLineNotFrame);



  assign line4StartsValidNext = wr4gate & trueconst;



  assign linerd5addrdecode = linerdaddr == 4'b0101;



  assign wr5gate = linewr5addr & (frameStartValid & pixelNewLineNotFrame);



  assign line5StartsValidNext = wr5gate & trueconst;



  assign linerd6addrdecode = linerdaddr == 4'b0110;



  assign wr6gate = linewr6addr & (frameStartValid & pixelNewLineNotFrame);



  assign line6StartsValidNext = wr6gate & trueconst;



  assign linerd7addrdecode = linerdaddr == 4'b0111;



  assign wr7gate = linewr7addr & (frameStartValid & pixelNewLineNotFrame);



  assign line7StartsValidNext = wr7gate & trueconst;



  assign linerd8addrdecode = linerdaddr == 4'b1000;



  assign wr8gate = linewr8addr & (frameStartValid & pixelNewLineNotFrame);



  assign line8StartsValidNext = wr8gate & trueconst;



  assign linerd9addrdecode = linerdaddr == 4'b1001;



  assign wr9gate = linewr9addr & (frameStartValid & pixelNewLineNotFrame);



  assign line9StartsValidNext = wr9gate & trueconst;



  assign rd9gate = RAMrdload & linerd9addrdecode;



  assign line9StartsEn = rd9gate | wr9gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_process
      if (reset == 1'b1) begin
        line9StartsValid <= 1'b0;
      end
      else begin
        if (enb && line9StartsEn) begin
          line9StartsValid <= line9StartsValidNext;
        end
      end
    end



  assign rd8gate = RAMrdload & linerd8addrdecode;



  assign line8StartsEn = rd8gate | wr8gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_1_process
      if (reset == 1'b1) begin
        line8StartsValid <= 1'b0;
      end
      else begin
        if (enb && line8StartsEn) begin
          line8StartsValid <= line8StartsValidNext;
        end
      end
    end



  assign rd7gate = RAMrdload & linerd7addrdecode;



  assign line7StartsEn = rd7gate | wr7gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_2_process
      if (reset == 1'b1) begin
        line7StartsValid <= 1'b0;
      end
      else begin
        if (enb && line7StartsEn) begin
          line7StartsValid <= line7StartsValidNext;
        end
      end
    end



  assign rd6gate = RAMrdload & linerd6addrdecode;



  assign line6StartsEn = rd6gate | wr6gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_3_process
      if (reset == 1'b1) begin
        line6StartsValid <= 1'b0;
      end
      else begin
        if (enb && line6StartsEn) begin
          line6StartsValid <= line6StartsValidNext;
        end
      end
    end



  assign rd5gate = RAMrdload & linerd5addrdecode;



  assign line5StartsEn = rd5gate | wr5gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_4_process
      if (reset == 1'b1) begin
        line5StartsValid <= 1'b0;
      end
      else begin
        if (enb && line5StartsEn) begin
          line5StartsValid <= line5StartsValidNext;
        end
      end
    end



  assign rd4gate = RAMrdload & linerd4addrdecode;



  assign line4StartsEn = rd4gate | wr4gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_5_process
      if (reset == 1'b1) begin
        line4StartsValid <= 1'b0;
      end
      else begin
        if (enb && line4StartsEn) begin
          line4StartsValid <= line4StartsValidNext;
        end
      end
    end



  assign rd3gate = RAMrdload & linerd3addrdecode;



  assign line3StartsEn = rd3gate | wr3gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_6_process
      if (reset == 1'b1) begin
        line3StartsValid <= 1'b0;
      end
      else begin
        if (enb && line3StartsEn) begin
          line3StartsValid <= line3StartsValidNext;
        end
      end
    end



  assign rd2gate = RAMrdload & linerd2addrdecode;



  assign line2StartsEn = rd2gate | wr2gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_7_process
      if (reset == 1'b1) begin
        line2StartsValid <= 1'b0;
      end
      else begin
        if (enb && line2StartsEn) begin
          line2StartsValid <= line2StartsValidNext;
        end
      end
    end



  assign rd1gate = RAMrdload & linerd1addrdecode;



  assign line1StartsEn = rd1gate | wr1gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_8_process
      if (reset == 1'b1) begin
        line1StartsValid <= 1'b0;
      end
      else begin
        if (enb && line1StartsEn) begin
          line1StartsValid <= line1StartsValidNext;
        end
      end
    end



  assign rd0gate = RAMrdload & linerd0addrdecode;



  assign line0StartsEn = rd0gate | wr0gate;



  always @(posedge clk or posedge reset)
    begin : lsvalreg_9_process
      if (reset == 1'b1) begin
        line0StartsValid <= 1'b0;
      end
      else begin
        if (enb && line0StartsEn) begin
          line0StartsValid <= line0StartsValidNext;
        end
      end
    end



  assign linerdvalid = (linerdaddr == 4'b0000 ? line0StartsValid :
              (linerdaddr == 4'b0001 ? line1StartsValid :
              (linerdaddr == 4'b0010 ? line2StartsValid :
              (linerdaddr == 4'b0011 ? line3StartsValid :
              (linerdaddr == 4'b0100 ? line4StartsValid :
              (linerdaddr == 4'b0101 ? line5StartsValid :
              (linerdaddr == 4'b0110 ? line6StartsValid :
              (linerdaddr == 4'b0111 ? line7StartsValid :
              (linerdaddr == 4'b1000 ? line8StartsValid :
              line9StartsValid)))))))));



  assign ramrdline = refnewLine & (linerdvalid & (pixelValidPreReg & (frameStartValid & refFrameValid)));



  assign RAMrdload = ramrdframe | ramrdline;



  always @(posedge clk or posedge reset)
    begin : lsreg_process
      if (reset == 1'b1) begin
        line0Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line0StartsEn) begin
          line0Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_1_process
      if (reset == 1'b1) begin
        line1Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line1StartsEn) begin
          line1Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_2_process
      if (reset == 1'b1) begin
        line2Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line2StartsEn) begin
          line2Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_3_process
      if (reset == 1'b1) begin
        line3Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line3StartsEn) begin
          line3Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_4_process
      if (reset == 1'b1) begin
        line4Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line4StartsEn) begin
          line4Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_5_process
      if (reset == 1'b1) begin
        line5Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line5StartsEn) begin
          line5Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_6_process
      if (reset == 1'b1) begin
        line6Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line6StartsEn) begin
          line6Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_7_process
      if (reset == 1'b1) begin
        line7Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line7StartsEn) begin
          line7Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_8_process
      if (reset == 1'b1) begin
        line8Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line8StartsEn) begin
          line8Starts <= RAMwraddr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : lsreg_9_process
      if (reset == 1'b1) begin
        line9Starts <= 14'b00000000000000;
      end
      else begin
        if (enb && line9StartsEn) begin
          line9Starts <= RAMwraddr;
        end
      end
    end



  assign linerddata = (linerdaddr == 4'b0000 ? line0Starts :
              (linerdaddr == 4'b0001 ? line1Starts :
              (linerdaddr == 4'b0010 ? line2Starts :
              (linerdaddr == 4'b0011 ? line3Starts :
              (linerdaddr == 4'b0100 ? line4Starts :
              (linerdaddr == 4'b0101 ? line5Starts :
              (linerdaddr == 4'b0110 ? line6Starts :
              (linerdaddr == 4'b0111 ? line7Starts :
              (linerdaddr == 4'b1000 ? line8Starts :
              line9Starts)))))))));



  always @(posedge clk or posedge reset)
    begin : fsreg_process
      if (reset == 1'b1) begin
        frameStart <= 14'b00000000000000;
      end
      else begin
        if (enb && pixelnewFrame) begin
          frameStart <= RAMwraddr;
        end
      end
    end



  assign RAMrdloadval = (refnewFrame == 1'b0 ? linerddata :
              frameStart);



  assign refEarlyInFrame = refinFrame | refnewFrame;



  assign refEarlyInLine = refinLine | refnewLine;



  assign constone = 14'b00000000000001;



  assign RAMrdnextaddr = RAMrdaddr + constone;



  assign relop_relop1 = RAMrdnextaddr == linerddata;



  assign notholdaddr =  ~ (relop_relop1 & linerdvalid);



  assign RAMrden = notholdaddr & (refEarlyInLine & (refEarlyInFrame & (pixelValidPreReg & (frameStartValid & refFrameValid))));



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 16383
  always @(posedge clk or posedge reset)
    begin : rdaddrcounter_process
      if (reset == 1'b1) begin
        RAMrdaddr <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          if (RAMrdload == 1'b1) begin
            RAMrdaddr <= RAMrdloadval;
          end
          else if (RAMrden == 1'b1) begin
            RAMrdaddr <= RAMrdaddr + 14'b00000000000001;
          end
        end
      end
    end



  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(14),
                                               .DataWidth(8)
                                               )
                                             u_pixelRAM (.clk(clk),
                                                         .enb(enb),
                                                         .wr_din(pixelInReg1comp),
                                                         .wr_addr(RAMwraddr),
                                                         .wr_en(RAMwren),  // ufix1
                                                         .rd_addr(RAMrdaddr),
                                                         .rd_dout(RAMrddata1comp)
                                                         );

  assign pixelOutReg1comp = (pixelOutValid == 1'b0 ? pixzeroconst :
              RAMrddata1comp);



  always @(posedge clk or posedge reset)
    begin : pixelOReg_process
      if (reset == 1'b1) begin
        pixelRegOutMux1comp <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelRegOutMux1comp <= pixelOutReg1comp;
        end
      end
    end



  assign out0_0 = pixelRegOutMux1comp;

  always @(posedge clk or posedge reset)
    begin : pixelIReg_1_process
      if (reset == 1'b1) begin
        pixelInReg2comp <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelInReg2comp <= in0_1;
        end
      end
    end



  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(14),
                                               .DataWidth(8)
                                               )
                                             u_pixelRAM_1 (.clk(clk),
                                                           .enb(enb),
                                                           .wr_din(pixelInReg2comp),
                                                           .wr_addr(RAMwraddr),
                                                           .wr_en(RAMwren),  // ufix1
                                                           .rd_addr(RAMrdaddr),
                                                           .rd_dout(RAMrddata2comp)
                                                           );

  assign pixelOutReg2comp = (pixelOutValid == 1'b0 ? pixzeroconst :
              RAMrddata2comp);



  always @(posedge clk or posedge reset)
    begin : pixelOReg_1_process
      if (reset == 1'b1) begin
        pixelRegOutMux2comp <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelRegOutMux2comp <= pixelOutReg2comp;
        end
      end
    end



  assign out0_1 = pixelRegOutMux2comp;

  always @(posedge clk or posedge reset)
    begin : pixelIReg_2_process
      if (reset == 1'b1) begin
        pixelInReg3comp <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelInReg3comp <= in0_2;
        end
      end
    end



  Harris_HW_ip_src_SimpleDualPortRAM_generic #(.AddrWidth(14),
                                               .DataWidth(8)
                                               )
                                             u_pixelRAM_2 (.clk(clk),
                                                           .enb(enb),
                                                           .wr_din(pixelInReg3comp),
                                                           .wr_addr(RAMwraddr),
                                                           .wr_en(RAMwren),  // ufix1
                                                           .rd_addr(RAMrdaddr),
                                                           .rd_dout(RAMrddata3comp)
                                                           );

  assign pixelOutReg3comp = (pixelOutValid == 1'b0 ? pixzeroconst :
              RAMrddata3comp);



  always @(posedge clk or posedge reset)
    begin : pixelOReg_2_process
      if (reset == 1'b1) begin
        pixelRegOutMux3comp <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelRegOutMux3comp <= pixelOutReg3comp;
        end
      end
    end



  assign out0_2 = pixelRegOutMux3comp;

  assign refzeroconst_2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : rpixelIReg_process
      if (reset == 1'b1) begin
        refpixelInReg <= 8'b00000000;
      end
      else begin
        if (enb) begin
          refpixelInReg <= in2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : refpixdlyline_process
      if (reset == 1'b1) begin
        refpixdlyline_reg[0] <= 8'b00000000;
        refpixdlyline_reg[1] <= 8'b00000000;
        refpixdlyline_reg[2] <= 8'b00000000;
        refpixdlyline_reg[3] <= 8'b00000000;
        refpixdlyline_reg[4] <= 8'b00000000;
        refpixdlyline_reg[5] <= 8'b00000000;
        refpixdlyline_reg[6] <= 8'b00000000;
        refpixdlyline_reg[7] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          refpixdlyline_reg[0] <= refpixdlyline_reg_next[0];
          refpixdlyline_reg[1] <= refpixdlyline_reg_next[1];
          refpixdlyline_reg[2] <= refpixdlyline_reg_next[2];
          refpixdlyline_reg[3] <= refpixdlyline_reg_next[3];
          refpixdlyline_reg[4] <= refpixdlyline_reg_next[4];
          refpixdlyline_reg[5] <= refpixdlyline_reg_next[5];
          refpixdlyline_reg[6] <= refpixdlyline_reg_next[6];
          refpixdlyline_reg[7] <= refpixdlyline_reg_next[7];
        end
      end
    end

  assign refpixeldly = refpixdlyline_reg[7];
  assign refpixdlyline_reg_next[0] = refpixelInReg;
  assign refpixdlyline_reg_next[1] = refpixdlyline_reg[0];
  assign refpixdlyline_reg_next[2] = refpixdlyline_reg[1];
  assign refpixdlyline_reg_next[3] = refpixdlyline_reg[2];
  assign refpixdlyline_reg_next[4] = refpixdlyline_reg[3];
  assign refpixdlyline_reg_next[5] = refpixdlyline_reg[4];
  assign refpixdlyline_reg_next[6] = refpixdlyline_reg[5];
  assign refpixdlyline_reg_next[7] = refpixdlyline_reg[6];



  assign refpixelOutReg = (pixelValidOutReg == 1'b0 ? refzeroconst_2 :
              refpixeldly);



  always @(posedge clk or posedge reset)
    begin : refpixelOReg_process
      if (reset == 1'b1) begin
        refPixelOut <= 8'b00000000;
      end
      else begin
        if (enb) begin
          refPixelOut <= refpixelOutReg;
        end
      end
    end



  assign out1 = refPixelOut;

  always @(posedge clk or posedge reset)
    begin : rhSOReg_process
      if (reset == 1'b1) begin
        rhSOReg_reg[0] <= 1'b0;
        rhSOReg_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          rhSOReg_reg[0] <= rhSOReg_reg_next[0];
          rhSOReg_reg[1] <= rhSOReg_reg_next[1];
        end
      end
    end

  assign pixelHStartOutReg = rhSOReg_reg[1];
  assign rhSOReg_reg_next[0] = pixelHStartPreReg;
  assign rhSOReg_reg_next[1] = rhSOReg_reg[0];



  always @(posedge clk or posedge reset)
    begin : refhSOReg_process
      if (reset == 1'b1) begin
        hStartOut <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartOut <= pixelHStartOutReg;
        end
      end
    end



  assign out2_hStart = hStartOut;

  always @(posedge clk or posedge reset)
    begin : rhEOReg_process
      if (reset == 1'b1) begin
        rhEOReg_reg[0] <= 1'b0;
        rhEOReg_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          rhEOReg_reg[0] <= rhEOReg_reg_next[0];
          rhEOReg_reg[1] <= rhEOReg_reg_next[1];
        end
      end
    end

  assign pixelHEndOutReg = rhEOReg_reg[1];
  assign rhEOReg_reg_next[0] = pixelHEndPreReg;
  assign rhEOReg_reg_next[1] = rhEOReg_reg[0];



  always @(posedge clk or posedge reset)
    begin : refhEOReg_process
      if (reset == 1'b1) begin
        hEndOut <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndOut <= pixelHEndOutReg;
        end
      end
    end



  assign out2_hEnd = hEndOut;

  always @(posedge clk or posedge reset)
    begin : rvSOReg_process
      if (reset == 1'b1) begin
        rvSOReg_reg[0] <= 1'b0;
        rvSOReg_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          rvSOReg_reg[0] <= rvSOReg_reg_next[0];
          rvSOReg_reg[1] <= rvSOReg_reg_next[1];
        end
      end
    end

  assign pixelVStartOutReg = rvSOReg_reg[1];
  assign rvSOReg_reg_next[0] = pixelVStartPreReg;
  assign rvSOReg_reg_next[1] = rvSOReg_reg[0];



  always @(posedge clk or posedge reset)
    begin : refvSOReg_process
      if (reset == 1'b1) begin
        vStartOut <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartOut <= pixelVStartOutReg;
        end
      end
    end



  assign out2_vStart = vStartOut;

  always @(posedge clk or posedge reset)
    begin : rvEOReg_process
      if (reset == 1'b1) begin
        rvEOReg_reg[0] <= 1'b0;
        rvEOReg_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          rvEOReg_reg[0] <= rvEOReg_reg_next[0];
          rvEOReg_reg[1] <= rvEOReg_reg_next[1];
        end
      end
    end

  assign pixelVEndOutReg = rvEOReg_reg[1];
  assign rvEOReg_reg_next[0] = pixelVEndPreReg;
  assign rvEOReg_reg_next[1] = rvEOReg_reg[0];



  always @(posedge clk or posedge reset)
    begin : refvEOReg_process
      if (reset == 1'b1) begin
        vEndOut <= 1'b0;
      end
      else begin
        if (enb) begin
          vEndOut <= pixelVEndOutReg;
        end
      end
    end



  assign out2_vEnd = vEndOut;

  always @(posedge clk or posedge reset)
    begin : refvalOReg_process
      if (reset == 1'b1) begin
        validOut <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut <= pixelValidOutReg;
        end
      end
    end



  assign out2_valid = validOut;

endmodule  // Harris_HW_ip_src_Pixel_Stream_Aligner

