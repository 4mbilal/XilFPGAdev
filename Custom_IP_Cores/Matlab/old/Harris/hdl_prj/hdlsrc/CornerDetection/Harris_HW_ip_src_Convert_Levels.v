// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CornerDetection\Harris_HW_ip_src_Convert_Levels.v
// Created: 2020-01-15 11:28:56
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Harris_HW_ip_src_Convert_Levels
// Source Path: CornerDetection/Harris_HW/HDL Corner Algorithm/Convert Levels
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Harris_HW_ip_src_Convert_Levels
          (clk,
           reset,
           enb,
           HarrisIn,
           PixelOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [37:0] HarrisIn;  // sfix38
  output  [7:0] PixelOut;  // uint8


  wire [7:0] kconst;  // ufix8
  reg [7:0] kconst_1;  // ufix8
  wire Compare_To_Constant_cmpOut;
  wire [7:0] Compare_To_Constant_out1;  // uint8
  reg [7:0] Compare_To_Constant_out1_1;  // uint8
  wire [15:0] Gain_mul_temp;  // ufix16
  wire [7:0] Gain_out1;  // uint8
  reg [7:0] Gain_out1_1;  // uint8


  assign kconst = 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  assign Compare_To_Constant_cmpOut = HarrisIn > 38'sh0000003A98;



  assign Compare_To_Constant_out1 = {7'b0, Compare_To_Constant_cmpOut};



  always @(posedge clk or posedge reset)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Compare_To_Constant_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Compare_To_Constant_out1_1 <= Compare_To_Constant_out1;
        end
      end
    end



  assign Gain_mul_temp = kconst_1 * Compare_To_Constant_out1_1;
  assign Gain_out1 = Gain_mul_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign PixelOut = Gain_out1_1;

endmodule  // Harris_HW_ip_src_Convert_Levels

