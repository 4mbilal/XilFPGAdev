// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\V1\ContrastS_ip_src_MATLAB_Function.v
// Created: 2018-12-04 11:53:13
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ContrastS_ip_src_MATLAB_Function
// Source Path: V1/ContrastStretch_HW/ContrastStretching/MATLAB Function
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ContrastS_ip_src_MATLAB_Function
          (in,
           vstart,
           valid,
           curr_low_ctr,
           curr_low,
           curr_high_ctr,
           curr_high,
           out1,
           out2,
           next_low_ctr,
           next_low,
           next_high_ctr,
           next_high);


  input   [7:0] in;  // uint8
  input   vstart;
  input   valid;
  input   [19:0] curr_low_ctr;  // ufix20
  input   [7:0] curr_low;  // uint8
  input   [19:0] curr_high_ctr;  // ufix20
  input   [7:0] curr_high;  // uint8
  output  [17:0] out1;  // ufix18
  output  [7:0] out2;  // uint8
  output  [19:0] next_low_ctr;  // ufix20
  output  [7:0] next_low;  // uint8
  output  [19:0] next_high_ctr;  // ufix20
  output  [7:0] next_high;  // uint8

  reg [17:0] out1_1;  // ufix18
  reg [7:0] out2_1;  // uint8
  reg [19:0] next_low_ctr_1;  // ufix20
  reg [7:0] next_low_1;  // uint8
  reg [19:0] next_high_ctr_1;  // ufix20
  reg [7:0] next_high_1;  // uint8
  reg [7:0] a;  // ufix8
  reg [20:0] add_temp;  // ufix21
  reg signed [9:0] sub_temp;  // sfix10
  reg [8:0] add_temp_0;  // ufix9
  reg [20:0] add_temp_1;  // ufix21
  reg [8:0] add_temp_2;  // ufix9
  reg signed [9:0] sub_temp_0;  // sfix10
  reg signed [9:0] sub_temp_1;  // sfix10
  reg [8:0] cast;  // ufix9
  reg [17:0] mul_temp;  // ufix18_En1
  reg signed [9:0] sub_temp_2;  // sfix10
  reg [20:0] t_0;  // ufix21
  reg signed [9:0] t_1;  // sfix10
  reg [8:0] t_2;  // ufix9
  reg [20:0] t_3;  // ufix21
  reg [8:0] t_4;  // ufix9
  reg signed [9:0] t_5;  // sfix10
  reg signed [9:0] t_6;  // sfix10
  reg signed [9:0] t_7;  // sfix10
  reg signed [9:0] t_8;  // sfix10
  reg signed [9:0] t_9;  // sfix10


  always @(in, vstart, valid, curr_low_ctr, curr_low, curr_high_ctr, curr_high) begin
    if (vstart) begin
      next_low_ctr_1 = 20'b00000000000000000000;
    end
    else if ((in < curr_low) && valid) begin
      t_0 = {1'b0, curr_low_ctr};
      add_temp = t_0 + 21'b000000000000000000001;
      if (add_temp[20] != 1'b0) begin
        next_low_ctr_1 = 20'b11111111111111111111;
      end
      else begin
        next_low_ctr_1 = add_temp[19:0];
      end
    end
    else begin
      next_low_ctr_1 = curr_low_ctr;
    end
    if (vstart) begin
      if (curr_low_ctr <= 20'b00000000011000000000) begin
        //150*curr_low)
        t_2 = {1'b0, curr_low};
        add_temp_0 = t_2 + 9'b000000001;
        if (add_temp_0[8] != 1'b0) begin
          next_low_1 = 8'b11111111;
        end
        else begin
          next_low_1 = add_temp_0[7:0];
        end
      end
      else begin
        //         if(curr_low>0)
        t_1 = {2'b0, curr_low};
        sub_temp = t_1 - 10'sb0000000001;
        if ((sub_temp[9] == 1'b0) && (sub_temp[8] != 1'b0)) begin
          next_low_1 = 8'b11111111;
        end
        else if (sub_temp[9] == 1'b1) begin
          next_low_1 = 8'b00000000;
        end
        else begin
          next_low_1 = sub_temp[7:0];
        end
        //         else
        //             next_low = curr_low;
        //         end
      end
    end
    else begin
      next_low_1 = curr_low;
    end
    if (vstart) begin
      next_high_ctr_1 = 20'b00000000000000000000;
    end
    else if ((in > curr_high) && valid) begin
      t_3 = {1'b0, curr_high_ctr};
      add_temp_1 = t_3 + 21'b000000000000000000001;
      if (add_temp_1[20] != 1'b0) begin
        next_high_ctr_1 = 20'b11111111111111111111;
      end
      else begin
        next_high_ctr_1 = add_temp_1[19:0];
      end
    end
    else begin
      next_high_ctr_1 = curr_high_ctr;
    end
    if (vstart) begin
      if (curr_high_ctr <= 20'b00000000011000000000) begin
        //150*(255-curr_high))
        t_5 = {2'b0, curr_high};
        sub_temp_0 = t_5 - 10'sb0000000001;
        if ((sub_temp_0[9] == 1'b0) && (sub_temp_0[8] != 1'b0)) begin
          next_high_1 = 8'b11111111;
        end
        else if (sub_temp_0[9] == 1'b1) begin
          next_high_1 = 8'b00000000;
        end
        else begin
          next_high_1 = sub_temp_0[7:0];
        end
      end
      else begin
        //         if(curr_low>0)
        t_4 = {1'b0, curr_high};
        add_temp_2 = t_4 + 9'b000000001;
        if (add_temp_2[8] != 1'b0) begin
          next_high_1 = 8'b11111111;
        end
        else begin
          next_high_1 = add_temp_2[7:0];
        end
        //         else
        //             next_low = curr_low;
        //         end
      end
    end
    else begin
      next_high_1 = curr_high;
    end
    a = in;
    t_6 = {2'b0, a};
    t_7 = {2'b0, curr_low};
    sub_temp_1 = t_6 - t_7;
    if (sub_temp_1[9] == 1'b1) begin
      cast = 9'b000000000;
    end
    else begin
      cast = sub_temp_1[8:0];
    end
    mul_temp = cast * 9'b111111110;
    out1_1 = ({1'b0, mul_temp[17:1]}) + mul_temp[0];
    t_8 = {2'b0, curr_high};
    t_9 = {2'b0, curr_low};
    sub_temp_2 = t_8 - t_9;
    if ((sub_temp_2[9] == 1'b0) && (sub_temp_2[8] != 1'b0)) begin
      out2_1 = 8'b11111111;
    end
    else if (sub_temp_2[9] == 1'b1) begin
      out2_1 = 8'b00000000;
    end
    else begin
      out2_1 = sub_temp_2[7:0];
    end
  end



  assign out1 = out1_1;

  assign out2 = out2_1;

  assign next_low_ctr = next_low_ctr_1;

  assign next_low = next_low_1;

  assign next_high_ctr = next_high_ctr_1;

  assign next_high = next_high_1;

endmodule  // ContrastS_ip_src_MATLAB_Function

