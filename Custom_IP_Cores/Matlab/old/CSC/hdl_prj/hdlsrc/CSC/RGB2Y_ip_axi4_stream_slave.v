// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CSC\RGB2Y_ip_axi4_stream_slave.v
// Created: 2017-12-30 16:25:23
// 
// Generated by MATLAB 9.0 and HDL Coder 3.8
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RGB2Y_ip_axi4_stream_slave
// Source Path: RGB2Y_ip/RGB2Y_ip_axi4_stream_slave
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RGB2Y_ip_axi4_stream_slave
          (
           clk,
           reset,
           AXI4_Stream_Slave_TDATA,
           AXI4_Stream_Slave_TVALID,
           AXI4_Stream_Slave_TLAST,
           AXI4_Stream_Slave_TUSER,
           user_ready,
           AXI4_Stream_Slave_TREADY,
           user_data,
           user_valid,
           user_TLAST,
           user_TUSER
          );


  input   clk;
  input   reset;
  input   [31:0] AXI4_Stream_Slave_TDATA;  // ufix32
  input   AXI4_Stream_Slave_TVALID;  // ufix1
  input   AXI4_Stream_Slave_TLAST;  // ufix1
  input   AXI4_Stream_Slave_TUSER;  // ufix1
  input   user_ready;  // ufix1
  output  AXI4_Stream_Slave_TREADY;  // ufix1
  output  [31:0] user_data;  // ufix32
  output  user_valid;  // ufix1
  output  user_TLAST;  // ufix1
  output  user_TUSER;  // ufix1


  wire enb;
  wire const_1;  // ufix1
  reg  user_ready_delay;  // ufix1
  wire fifo_empty_data;  // ufix1
  wire fifo_full_data;  // ufix1
  wire fifo_empty_neg;  // ufix1


  assign const_1 = 1'b1;



  assign enb = const_1;

  always @(posedge clk)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        user_ready_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          user_ready_delay <= user_ready;
        end
      end
    end



  RGB2Y_ip_fifo_data_block   u_RGB2Y_ip_fifo_data_inst   (.clk(clk),
                                                          .reset(reset),
                                                          .enb(const_1),
                                                          .In(AXI4_Stream_Slave_TDATA),  // ufix32
                                                          .Push(AXI4_Stream_Slave_TVALID),  // ufix1
                                                          .Pop(user_ready_delay),  // ufix1
                                                          .Out(user_data),  // ufix32
                                                          .Empty(fifo_empty_data),  // ufix1
                                                          .Full(fifo_full_data)  // ufix1
                                                          );

  assign AXI4_Stream_Slave_TREADY =  ~ fifo_full_data;



  assign fifo_empty_neg =  ~ fifo_empty_data;



  assign user_valid = fifo_empty_neg & user_ready_delay;



  RGB2Y_ip_fifo_TLAST_block   u_RGB2Y_ip_fifo_TLAST_inst   (.clk(clk),
                                                            .reset(reset),
                                                            .enb(const_1),
                                                            .In(AXI4_Stream_Slave_TLAST),  // ufix1
                                                            .Push(AXI4_Stream_Slave_TVALID),  // ufix1
                                                            .Pop(user_ready_delay),  // ufix1
                                                            .Out(user_TLAST)  // ufix1
                                                            );

  RGB2Y_ip_fifo_TUSER_block   u_RGB2Y_ip_fifo_TUSER_inst   (.clk(clk),
                                                            .reset(reset),
                                                            .enb(const_1),
                                                            .In(AXI4_Stream_Slave_TUSER),  // ufix1
                                                            .Push(AXI4_Stream_Slave_TVALID),  // ufix1
                                                            .Pop(user_ready_delay),  // ufix1
                                                            .Out(user_TUSER)  // ufix1
                                                            );

endmodule  // RGB2Y_ip_axi4_stream_slave

