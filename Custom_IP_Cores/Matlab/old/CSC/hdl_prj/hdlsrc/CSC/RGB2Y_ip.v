// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CSC\RGB2Y_ip.v
// Created: 2017-12-30 16:25:23
// 
// Generated by MATLAB 9.0 and HDL Coder 3.8
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: -1
// Target subsystem base rate: -1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RGB2Y_ip
// Source Path: RGB2Y_ip
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RGB2Y_ip
          (
           IPCORE_CLK,
           IPCORE_RESETN,
           AXI4_Stream_Master_TREADY,
           AXI4_Stream_Slave_TDATA,
           AXI4_Stream_Slave_TVALID,
           AXI4_Stream_Slave_TLAST,
           AXI4_Stream_Slave_TUSER,
           AXI4_Lite_ACLK,
           AXI4_Lite_ARESETN,
           AXI4_Lite_AWADDR,
           AXI4_Lite_AWVALID,
           AXI4_Lite_WDATA,
           AXI4_Lite_WSTRB,
           AXI4_Lite_WVALID,
           AXI4_Lite_BREADY,
           AXI4_Lite_ARADDR,
           AXI4_Lite_ARVALID,
           AXI4_Lite_RREADY,
           AXI4_Stream_Master_TDATA,
           AXI4_Stream_Master_TVALID,
           AXI4_Stream_Master_TLAST,
           AXI4_Stream_Master_TUSER,
           AXI4_Stream_Slave_TREADY,
           AXI4_Lite_AWREADY,
           AXI4_Lite_WREADY,
           AXI4_Lite_BRESP,
           AXI4_Lite_BVALID,
           AXI4_Lite_ARREADY,
           AXI4_Lite_RDATA,
           AXI4_Lite_RRESP,
           AXI4_Lite_RVALID
          );


  input   IPCORE_CLK;  // ufix1
  input   IPCORE_RESETN;  // ufix1
  input   AXI4_Stream_Master_TREADY;  // ufix1
  input   [31:0] AXI4_Stream_Slave_TDATA;  // ufix32
  input   AXI4_Stream_Slave_TVALID;  // ufix1
  input   AXI4_Stream_Slave_TLAST;  // ufix1
  input   AXI4_Stream_Slave_TUSER;  // ufix1
  input   AXI4_Lite_ACLK;  // ufix1
  input   AXI4_Lite_ARESETN;  // ufix1
  input   [15:0] AXI4_Lite_AWADDR;  // ufix16
  input   AXI4_Lite_AWVALID;  // ufix1
  input   [31:0] AXI4_Lite_WDATA;  // ufix32
  input   [3:0] AXI4_Lite_WSTRB;  // ufix4
  input   AXI4_Lite_WVALID;  // ufix1
  input   AXI4_Lite_BREADY;  // ufix1
  input   [15:0] AXI4_Lite_ARADDR;  // ufix16
  input   AXI4_Lite_ARVALID;  // ufix1
  input   AXI4_Lite_RREADY;  // ufix1
  output  [31:0] AXI4_Stream_Master_TDATA;  // ufix32
  output  AXI4_Stream_Master_TVALID;  // ufix1
  output  AXI4_Stream_Master_TLAST;  // ufix1
  output  AXI4_Stream_Master_TUSER;  // ufix1
  output  AXI4_Stream_Slave_TREADY;  // ufix1
  output  AXI4_Lite_AWREADY;  // ufix1
  output  AXI4_Lite_WREADY;  // ufix1
  output  [1:0] AXI4_Lite_BRESP;  // ufix2
  output  AXI4_Lite_BVALID;  // ufix1
  output  AXI4_Lite_ARREADY;  // ufix1
  output  [31:0] AXI4_Lite_RDATA;  // ufix32
  output  [1:0] AXI4_Lite_RRESP;  // ufix2
  output  AXI4_Lite_RVALID;  // ufix1


  wire reset;
  wire reset_cm;  // ufix1
  wire reset_internal;  // ufix1
  wire write_axi_enable;  // ufix1
  wire Video_TUSER0_out_sig;  // ufix1
  wire top_user_TUSER;  // ufix1
  wire Video_TLAST_out_sig;  // ufix1
  wire top_user_TLAST;  // ufix1
  wire Video_Valid_out_sig;  // ufix1
  wire top_user_valid;  // ufix1
  wire top_user_TLAST_1;  // ufix1
  wire Video_TLAST_in_sig;  // ufix1
  wire top_user_TUSER_1;  // ufix1
  wire Video_TUSER0_in_sig;  // ufix1
  wire top_user_ready;  // ufix1
  wire Video_Ready_in_sig;  // ufix1
  wire top_user_valid_1;  // ufix1
  wire Video_Valid_in_sig;  // ufix1
  wire Video_Ready_out_sig;  // ufix1
  wire top_user_ready_1;  // ufix1
  wire [31:0] top_user_data;  // ufix32
  wire ce_out_sig;  // ufix1
  wire [31:0] YYY_sig;  // ufix32


  assign reset_cm =  ~ IPCORE_RESETN;



  assign reset = reset_cm | reset_internal;



  RGB2Y_ip_axi_lite   u_RGB2Y_ip_axi_lite_inst   (.reset(reset),
                                                  .AXI4_Lite_ACLK(AXI4_Lite_ACLK),  // ufix1
                                                  .AXI4_Lite_ARESETN(AXI4_Lite_ARESETN),  // ufix1
                                                  .AXI4_Lite_AWADDR(AXI4_Lite_AWADDR),  // ufix16
                                                  .AXI4_Lite_AWVALID(AXI4_Lite_AWVALID),  // ufix1
                                                  .AXI4_Lite_WDATA(AXI4_Lite_WDATA),  // ufix32
                                                  .AXI4_Lite_WSTRB(AXI4_Lite_WSTRB),  // ufix4
                                                  .AXI4_Lite_WVALID(AXI4_Lite_WVALID),  // ufix1
                                                  .AXI4_Lite_BREADY(AXI4_Lite_BREADY),  // ufix1
                                                  .AXI4_Lite_ARADDR(AXI4_Lite_ARADDR),  // ufix16
                                                  .AXI4_Lite_ARVALID(AXI4_Lite_ARVALID),  // ufix1
                                                  .AXI4_Lite_RREADY(AXI4_Lite_RREADY),  // ufix1
                                                  .AXI4_Lite_AWREADY(AXI4_Lite_AWREADY),  // ufix1
                                                  .AXI4_Lite_WREADY(AXI4_Lite_WREADY),  // ufix1
                                                  .AXI4_Lite_BRESP(AXI4_Lite_BRESP),  // ufix2
                                                  .AXI4_Lite_BVALID(AXI4_Lite_BVALID),  // ufix1
                                                  .AXI4_Lite_ARREADY(AXI4_Lite_ARREADY),  // ufix1
                                                  .AXI4_Lite_RDATA(AXI4_Lite_RDATA),  // ufix32
                                                  .AXI4_Lite_RRESP(AXI4_Lite_RRESP),  // ufix2
                                                  .AXI4_Lite_RVALID(AXI4_Lite_RVALID),  // ufix1
                                                  .write_axi_enable(write_axi_enable),  // ufix1
                                                  .reset_internal(reset_internal)  // ufix1
                                                  );

  assign top_user_TUSER = Video_TUSER0_out_sig;



  assign top_user_TLAST = Video_TLAST_out_sig;



  assign top_user_valid = Video_Valid_out_sig;



  assign Video_TLAST_in_sig = top_user_TLAST_1;



  assign Video_TUSER0_in_sig = top_user_TUSER_1;



  assign Video_Ready_in_sig = top_user_ready;



  assign Video_Valid_in_sig = top_user_valid_1;



  assign top_user_ready_1 = Video_Ready_out_sig;



  RGB2Y_ip_axi4_stream_slave   u_RGB2Y_ip_axi4_stream_slave_inst   (.clk(IPCORE_CLK),  // ufix1
                                                                    .reset(reset),
                                                                    .AXI4_Stream_Slave_TDATA(AXI4_Stream_Slave_TDATA),  // ufix32
                                                                    .AXI4_Stream_Slave_TVALID(AXI4_Stream_Slave_TVALID),  // ufix1
                                                                    .AXI4_Stream_Slave_TLAST(AXI4_Stream_Slave_TLAST),  // ufix1
                                                                    .AXI4_Stream_Slave_TUSER(AXI4_Stream_Slave_TUSER),  // ufix1
                                                                    .user_ready(top_user_ready_1),  // ufix1
                                                                    .AXI4_Stream_Slave_TREADY(AXI4_Stream_Slave_TREADY),  // ufix1
                                                                    .user_data(top_user_data),  // ufix32
                                                                    .user_valid(top_user_valid_1),  // ufix1
                                                                    .user_TLAST(top_user_TLAST_1),  // ufix1
                                                                    .user_TUSER(top_user_TUSER_1)  // ufix1
                                                                    );

  RGB2Y_ip_dut   u_RGB2Y_ip_dut_inst   (.clk(IPCORE_CLK),  // ufix1
                                        .reset(reset),
                                        .dut_enable(write_axi_enable),  // ufix1
                                        .RGB(top_user_data),  // ufix32
                                        .Video_Valid_in(Video_Valid_in_sig),  // ufix1
                                        .Video_Ready_in(Video_Ready_in_sig),  // ufix1
                                        .Video_TUSER0_in(Video_TUSER0_in_sig),  // ufix1
                                        .Video_TLAST_in(Video_TLAST_in_sig),  // ufix1
                                        .ce_out(ce_out_sig),  // ufix1
                                        .YYY(YYY_sig),  // ufix32
                                        .Video_Valid_out(Video_Valid_out_sig),  // ufix1
                                        .Video_Ready_out(Video_Ready_out_sig),  // ufix1
                                        .Video_TUSER0_out(Video_TUSER0_out_sig),  // ufix1
                                        .Video_TLAST_out(Video_TLAST_out_sig)  // ufix1
                                        );

  RGB2Y_ip_axi4_stream_master   u_RGB2Y_ip_axi4_stream_master_inst   (.clk(IPCORE_CLK),  // ufix1
                                                                      .reset(reset),
                                                                      .AXI4_Stream_Master_TREADY(AXI4_Stream_Master_TREADY),  // ufix1
                                                                      .user_data(YYY_sig),  // ufix32
                                                                      .user_valid(top_user_valid),  // ufix1
                                                                      .user_TLAST(top_user_TLAST),  // ufix1
                                                                      .user_TUSER(top_user_TUSER),  // ufix1
                                                                      .AXI4_Stream_Master_TDATA(AXI4_Stream_Master_TDATA),  // ufix32
                                                                      .AXI4_Stream_Master_TVALID(AXI4_Stream_Master_TVALID),  // ufix1
                                                                      .AXI4_Stream_Master_TLAST(AXI4_Stream_Master_TLAST),  // ufix1
                                                                      .AXI4_Stream_Master_TUSER(AXI4_Stream_Master_TUSER),  // ufix1
                                                                      .user_ready(top_user_ready)  // ufix1
                                                                      );

endmodule  // RGB2Y_ip

