// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_Image_Filter1.v
// Created: 2018-10-21 17:42:58
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_Image_Filter1
// Source Path: HSG/HSG/Image Filter1
// Hierarchy Level: 1
// 
// Image Filter
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_Image_Filter1
          (clk,
           reset,
           enb,
           in0,
           in1_hStart,
           in1_hEnd,
           in1_vStart,
           in1_vEnd,
           in1_valid,
           out0,
           out1_hStart,
           out1_hEnd,
           out1_vStart,
           out1_vEnd,
           out1_valid);


  input   clk;
  input   reset;
  input   enb;
  input   in0;  // ufix1
  input   in1_hStart;
  input   in1_hEnd;
  input   in1_vStart;
  input   in1_vEnd;
  input   in1_valid;
  output  [3:0] out0;  // ufix4
  output  out1_hStart;
  output  out1_hEnd;
  output  out1_vStart;
  output  out1_vEnd;
  output  out1_valid;

  reg  dataInReg;  // ufix1
  reg  hStartInReg;
  reg  hendInReg;
  reg  vStartInReg;
  reg  vendInReg;
  reg  validInReg;
  wire LMKDataOut_0;  // ufix1
  wire LMKDataOut_1;  // ufix1
  wire LMKDataOut_2;  // ufix1
  wire LMKDataOut_3;  // ufix1
  wire LMKDataOut_4;  // ufix1
  wire LMKDataOut_5;  // ufix1
  wire LMKhStartOut;
  wire LMKhEndOut;
  wire LMKvStartOut;
  wire LMKvEndOut;
  wire LMKvalidOut;
  wire LMKprocessOut;
  wire [3:0] preFilterDataOut;  // ufix4
  wire prehStartOut;
  wire prehEndOut;
  wire prevStartOut;
  wire prevEndOut;
  wire preValdiOut;
  wire [3:0] zeroOut_1;  // ufix4
  wire [3:0] preDataOut;  // ufix4
  reg [3:0] intdelay_reg [0:3];  // ufix4 [4]
  wire [3:0] intdelay_reg_next [0:3];  // ufix4 [4]
  wire [3:0] dataOut;  // ufix4
  reg  [0:3] intdelay_reg_1;  // ufix1 [4]
  wire [0:3] intdelay_reg_next_1;  // ufix1 [4]
  wire hStartOut;
  reg  [0:3] intdelay_reg_2;  // ufix1 [4]
  wire [0:3] intdelay_reg_next_2;  // ufix1 [4]
  wire hEndOut;
  reg  [0:3] intdelay_reg_3;  // ufix1 [4]
  wire [0:3] intdelay_reg_next_3;  // ufix1 [4]
  wire vStartOut;
  reg  [0:3] intdelay_reg_4;  // ufix1 [4]
  wire [0:3] intdelay_reg_next_4;  // ufix1 [4]
  wire vEndOut;
  reg  [0:3] intdelay_reg_5;  // ufix1 [4]
  wire [0:3] intdelay_reg_next_5;  // ufix1 [4]
  wire validOut;


  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        dataInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          dataInReg <= in0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        hStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartInReg <= in1_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        hendInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hendInReg <= in1_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        vStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartInReg <= in1_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        vendInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vendInReg <= in1_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        validInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          validInReg <= in1_valid;
        end
      end
    end



  HSG_IP_src_LineBuffer_block1 u_LineBuffer (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .dataIn(dataInReg),  // ufix1
                                             .hStartIn(hStartInReg),
                                             .hEndIn(hendInReg),
                                             .vStartIn(vStartInReg),
                                             .vEndIn(vendInReg),
                                             .validIn(validInReg),
                                             .dataOut_0(LMKDataOut_0),  // ufix1
                                             .dataOut_1(LMKDataOut_1),  // ufix1
                                             .dataOut_2(LMKDataOut_2),  // ufix1
                                             .dataOut_3(LMKDataOut_3),  // ufix1
                                             .dataOut_4(LMKDataOut_4),  // ufix1
                                             .dataOut_5(LMKDataOut_5),  // ufix1
                                             .hStartOut(LMKhStartOut),
                                             .hEndOut(LMKhEndOut),
                                             .vStartOut(LMKvStartOut),
                                             .vEndOut(LMKvEndOut),
                                             .validOut(LMKvalidOut),
                                             .processDataOut(LMKprocessOut)
                                             );

  HSG_IP_src_FIR2DKernel_block u_imagekernel_inst (.clk(clk),
                                                   .reset(reset),
                                                   .enb(enb),
                                                   .dataIn_0(LMKDataOut_0),  // ufix1
                                                   .dataIn_1(LMKDataOut_1),  // ufix1
                                                   .dataIn_2(LMKDataOut_2),  // ufix1
                                                   .dataIn_3(LMKDataOut_3),  // ufix1
                                                   .dataIn_4(LMKDataOut_4),  // ufix1
                                                   .dataIn_5(LMKDataOut_5),  // ufix1
                                                   .vStartIn(LMKhStartOut),
                                                   .vEndIn(LMKhEndOut),
                                                   .hStartIn(LMKvStartOut),
                                                   .hEndIn(LMKvEndOut),
                                                   .validIn(LMKvalidOut),
                                                   .processData(LMKprocessOut),
                                                   .dataOut(preFilterDataOut),  // ufix4
                                                   .vStartout(prehStartOut),
                                                   .vEndOut(prehEndOut),
                                                   .hStartOut(prevStartOut),
                                                   .hEndOut(prevEndOut),
                                                   .validOut(preValdiOut)
                                                   );

  assign zeroOut_1 = 4'b0000;



  assign preDataOut = (preValdiOut == 1'b0 ? zeroOut_1 :
              preFilterDataOut);



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 4'b0000;
        intdelay_reg[1] <= 4'b0000;
        intdelay_reg[2] <= 4'b0000;
        intdelay_reg[3] <= 4'b0000;
      end
      else begin
        if (enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
          intdelay_reg[3] <= intdelay_reg_next[3];
        end
      end
    end

  assign dataOut = intdelay_reg[3];
  assign intdelay_reg_next[0] = preDataOut;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];
  assign intdelay_reg_next[3] = intdelay_reg[2];



  assign out0 = dataOut;

  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 1'b0;
        intdelay_reg_1[1] <= 1'b0;
        intdelay_reg_1[2] <= 1'b0;
        intdelay_reg_1[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          intdelay_reg_1[2] <= intdelay_reg_next_1[2];
          intdelay_reg_1[3] <= intdelay_reg_next_1[3];
        end
      end
    end

  assign hStartOut = intdelay_reg_1[3];
  assign intdelay_reg_next_1[0] = prehStartOut;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];
  assign intdelay_reg_next_1[2] = intdelay_reg_1[1];
  assign intdelay_reg_next_1[3] = intdelay_reg_1[2];



  assign out1_hStart = hStartOut;

  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
        intdelay_reg_2[2] <= 1'b0;
        intdelay_reg_2[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          intdelay_reg_2[2] <= intdelay_reg_next_2[2];
          intdelay_reg_2[3] <= intdelay_reg_next_2[3];
        end
      end
    end

  assign hEndOut = intdelay_reg_2[3];
  assign intdelay_reg_next_2[0] = prehEndOut;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];
  assign intdelay_reg_next_2[2] = intdelay_reg_2[1];
  assign intdelay_reg_next_2[3] = intdelay_reg_2[2];



  assign out1_hEnd = hEndOut;

  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 1'b0;
        intdelay_reg_3[1] <= 1'b0;
        intdelay_reg_3[2] <= 1'b0;
        intdelay_reg_3[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
          intdelay_reg_3[2] <= intdelay_reg_next_3[2];
          intdelay_reg_3[3] <= intdelay_reg_next_3[3];
        end
      end
    end

  assign vStartOut = intdelay_reg_3[3];
  assign intdelay_reg_next_3[0] = prevStartOut;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];
  assign intdelay_reg_next_3[2] = intdelay_reg_3[1];
  assign intdelay_reg_next_3[3] = intdelay_reg_3[2];



  assign out1_vStart = vStartOut;

  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 1'b0;
        intdelay_reg_4[1] <= 1'b0;
        intdelay_reg_4[2] <= 1'b0;
        intdelay_reg_4[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_4[0] <= intdelay_reg_next_4[0];
          intdelay_reg_4[1] <= intdelay_reg_next_4[1];
          intdelay_reg_4[2] <= intdelay_reg_next_4[2];
          intdelay_reg_4[3] <= intdelay_reg_next_4[3];
        end
      end
    end

  assign vEndOut = intdelay_reg_4[3];
  assign intdelay_reg_next_4[0] = prevEndOut;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];
  assign intdelay_reg_next_4[2] = intdelay_reg_4[1];
  assign intdelay_reg_next_4[3] = intdelay_reg_4[2];



  assign out1_vEnd = vEndOut;

  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 1'b0;
        intdelay_reg_5[1] <= 1'b0;
        intdelay_reg_5[2] <= 1'b0;
        intdelay_reg_5[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_5[0] <= intdelay_reg_next_5[0];
          intdelay_reg_5[1] <= intdelay_reg_next_5[1];
          intdelay_reg_5[2] <= intdelay_reg_next_5[2];
          intdelay_reg_5[3] <= intdelay_reg_next_5[3];
        end
      end
    end

  assign validOut = intdelay_reg_5[3];
  assign intdelay_reg_next_5[0] = preValdiOut;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];
  assign intdelay_reg_next_5[2] = intdelay_reg_5[1];
  assign intdelay_reg_next_5[3] = intdelay_reg_5[2];



  assign out1_valid = validOut;

endmodule  // HSG_IP_src_Image_Filter1

