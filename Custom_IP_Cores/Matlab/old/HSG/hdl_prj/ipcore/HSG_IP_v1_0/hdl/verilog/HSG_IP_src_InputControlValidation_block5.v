// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_InputControlValidation_block5.v
// Created: 2018-10-21 17:42:59
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_InputControlValidation_block5
// Source Path: HSG/HSG/Image Filter5/LineBuffer/InputControlValidation
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_InputControlValidation_block5
          (clk,
           reset,
           enb,
           hStartIn,
           hEndIn,
           vStartIn,
           vEndIn,
           validIn,
           hStartOut,
           hEndOut,
           vStartOut,
           vEndOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   hStartIn;
  input   hEndIn;
  input   vStartIn;
  input   vEndIn;
  input   validIn;
  output  hStartOut;
  output  hEndOut;
  output  vStartOut;
  output  vEndOut;
  output  validOut;

  wire LineBuffervEndInv;  // ufix1
  wire LineBufferinFrame2Term;  // ufix1
  wire LineBufferValidInv;  // ufix1
  reg  LineBufferinFrame;  // ufix1
  wire LineBufferinFrame3Term;  // ufix1
  wire LineBufferinFrame1Term;  // ufix1
  wire LineBufferinFrameNext;  // ufix1
  wire LineBufferhEndInv;  // ufix1
  wire LineBufferinLine2Term;  // ufix1
  wire LineBufferinFrameInv;  // ufix1
  reg  LineBufferinLine;  // ufix1
  wire LineBufferinLineInv;  // ufix1
  wire LineBufferinLine6Term;  // ufix1
  wire LineBufferinLine5Term;  // ufix1
  wire LineBufferinLine4Term;  // ufix1
  wire LineBufferinLine3Term;  // ufix1
  wire LineBufferinLine1Term;  // ufix1
  wire LineBufferinLineNext;  // ufix1
  wire InFrameInLine_1;  // ufix1
  reg  hStartReg;  // ufix1
  reg  vStartReg;  // ufix1
  reg  validReg;  // ufix1
  wire validPre;  // ufix1
  reg  LineBufferinFramePrev;  // ufix1
  reg  LineBufferinLinePrev;  // ufix1
  wire InFrameInLinePrev;  // ufix1
  wire validPost;  // ufix1


  assign LineBuffervEndInv =  ~ vEndIn;



  assign LineBufferinFrame2Term = validIn & vStartIn;



  assign LineBufferValidInv =  ~ validIn;



  assign LineBufferinFrame3Term = LineBufferValidInv & LineBufferinFrame;



  assign LineBufferinFrame1Term = LineBuffervEndInv & LineBufferinFrame;



  assign LineBufferinFrameNext = LineBufferinFrame3Term | (LineBufferinFrame1Term | LineBufferinFrame2Term);



  always @(posedge clk or posedge reset)
    begin : inFReg_process
      if (reset == 1'b1) begin
        LineBufferinFrame <= 1'b0;
      end
      else begin
        if (enb) begin
          LineBufferinFrame <= LineBufferinFrameNext;
        end
      end
    end



  assign LineBufferhEndInv =  ~ hEndIn;



  assign LineBufferinLine2Term = vStartIn & (validIn & hStartIn);



  assign LineBufferinFrameInv =  ~ LineBufferinFrame;



  assign LineBufferinLineInv =  ~ LineBufferinLine;



  assign LineBufferinLine6Term = LineBufferinLineInv & (LineBufferinFrame & (LineBuffervEndInv & (validIn & hStartIn)));



  assign LineBufferinLine5Term = LineBufferValidInv & LineBufferinLine;



  assign LineBufferinLine4Term = LineBufferinFrameInv & LineBufferinLine;



  assign LineBufferinLine3Term = vStartIn & LineBufferinLine;



  assign LineBufferinLine1Term = LineBufferhEndInv & LineBufferinLine;



  assign LineBufferinLineNext = LineBufferinLine6Term | (LineBufferinLine5Term | (LineBufferinLine4Term | (LineBufferinLine3Term | (LineBufferinLine1Term | LineBufferinLine2Term))));



  always @(posedge clk or posedge reset)
    begin : inLReg_process
      if (reset == 1'b1) begin
        LineBufferinLine <= 1'b0;
      end
      else begin
        if (enb) begin
          LineBufferinLine <= LineBufferinLineNext;
        end
      end
    end



  assign InFrameInLine_1 = LineBufferinFrame & LineBufferinLine;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        hStartReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartReg <= hStartIn;
        end
      end
    end



  assign hStartOut = InFrameInLine_1 & hStartReg;



  assign hEndOut = InFrameInLine_1 & hEndIn;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        vStartReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartReg <= vStartIn;
        end
      end
    end



  assign vStartOut = InFrameInLine_1 & vStartReg;



  assign vEndOut = InFrameInLine_1 & vEndIn;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        validReg <= 1'b0;
      end
      else begin
        if (enb) begin
          validReg <= validIn;
        end
      end
    end



  assign validPre = InFrameInLine_1 & validReg;



  always @(posedge clk or posedge reset)
    begin : inFPReg_process
      if (reset == 1'b1) begin
        LineBufferinFramePrev <= 1'b0;
      end
      else begin
        if (enb) begin
          LineBufferinFramePrev <= LineBufferinFrame;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : inLPReg_process
      if (reset == 1'b1) begin
        LineBufferinLinePrev <= 1'b0;
      end
      else begin
        if (enb) begin
          LineBufferinLinePrev <= LineBufferinLine;
        end
      end
    end



  assign InFrameInLinePrev = LineBufferinFramePrev & LineBufferinLinePrev;



  assign validPost = InFrameInLinePrev & validReg;



  assign validOut = validPre | validPost;



endmodule  // HSG_IP_src_InputControlValidation_block5

