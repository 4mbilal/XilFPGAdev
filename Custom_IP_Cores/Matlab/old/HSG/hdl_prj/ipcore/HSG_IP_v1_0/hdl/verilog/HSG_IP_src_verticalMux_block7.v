// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_verticalMux_block7.v
// Created: 2018-10-21 17:43:00
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_verticalMux_block7
// Source Path: HSG/HSG/Image Filter7/LineBuffer/verticalMux
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_verticalMux_block7
          (clk,
           reset,
           enb,
           dataIn1,
           dataIn2,
           dataIn3,
           dataIn4,
           dataIn5,
           dataIn6,
           dataIn7,
           verMuxSEL,
           dataOut1,
           dataOut2,
           dataOut3,
           dataOut4,
           dataOut5,
           dataOut6);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn1;  // ufix1
  input   dataIn2;  // ufix1
  input   dataIn3;  // ufix1
  input   dataIn4;  // ufix1
  input   dataIn5;  // ufix1
  input   dataIn6;  // ufix1
  input   dataIn7;  // ufix1
  input   [2:0] verMuxSEL;  // ufix3
  output  dataOut1;  // ufix1
  output  dataOut2;  // ufix1
  output  dataOut3;  // ufix1
  output  dataOut4;  // ufix1
  output  dataOut5;  // ufix1
  output  dataOut6;  // ufix1

  reg [2:0] SEL;  // ufix3
  reg  inSignalD1;  // ufix1
  wire paddingConstant;  // ufix1
  reg  inSignalD2;  // ufix1
  reg  inSignalD3;  // ufix1
  reg  inSignalD4;  // ufix1
  reg  inSignalD5;  // ufix1
  reg  inSignalD6;  // ufix1


  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        SEL <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL <= verMuxSEL;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        inSignalD1 <= 1'b0;
      end
      else begin
        if (enb) begin
          inSignalD1 <= dataIn1;
        end
      end
    end



  assign paddingConstant = 1'b0;



  assign dataOut1 = (SEL == 3'b000 ? inSignalD1 :
              (SEL == 3'b001 ? inSignalD1 :
              (SEL == 3'b010 ? inSignalD1 :
              (SEL == 3'b011 ? inSignalD1 :
              (SEL == 3'b100 ? paddingConstant :
              (SEL == 3'b101 ? paddingConstant :
              paddingConstant))))));



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        inSignalD2 <= 1'b0;
      end
      else begin
        if (enb) begin
          inSignalD2 <= dataIn2;
        end
      end
    end



  assign dataOut2 = (SEL == 3'b000 ? inSignalD2 :
              (SEL == 3'b001 ? inSignalD2 :
              (SEL == 3'b010 ? inSignalD2 :
              (SEL == 3'b011 ? inSignalD2 :
              (SEL == 3'b100 ? inSignalD2 :
              (SEL == 3'b101 ? paddingConstant :
              paddingConstant))))));



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        inSignalD3 <= 1'b0;
      end
      else begin
        if (enb) begin
          inSignalD3 <= dataIn3;
        end
      end
    end



  assign dataOut3 = (SEL == 3'b000 ? inSignalD3 :
              (SEL == 3'b001 ? inSignalD3 :
              (SEL == 3'b010 ? inSignalD3 :
              (SEL == 3'b011 ? inSignalD3 :
              (SEL == 3'b100 ? inSignalD3 :
              (SEL == 3'b101 ? inSignalD3 :
              paddingConstant))))));



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        inSignalD4 <= 1'b0;
      end
      else begin
        if (enb) begin
          inSignalD4 <= dataIn4;
        end
      end
    end



  // PASS THROUGH
  assign dataOut4 = inSignalD4;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        inSignalD5 <= 1'b0;
      end
      else begin
        if (enb) begin
          inSignalD5 <= dataIn5;
        end
      end
    end



  assign dataOut5 = (SEL == 3'b000 ? paddingConstant :
              (SEL == 3'b001 ? inSignalD5 :
              (SEL == 3'b010 ? inSignalD5 :
              (SEL == 3'b011 ? inSignalD5 :
              (SEL == 3'b100 ? inSignalD5 :
              (SEL == 3'b101 ? inSignalD5 :
              inSignalD5))))));



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_6_process
      if (reset == 1'b1) begin
        inSignalD6 <= 1'b0;
      end
      else begin
        if (enb) begin
          inSignalD6 <= dataIn6;
        end
      end
    end



  assign dataOut6 = (SEL == 3'b000 ? paddingConstant :
              (SEL == 3'b001 ? paddingConstant :
              (SEL == 3'b010 ? inSignalD6 :
              (SEL == 3'b011 ? inSignalD6 :
              (SEL == 3'b100 ? inSignalD6 :
              (SEL == 3'b101 ? inSignalD6 :
              inSignalD6))))));



endmodule  // HSG_IP_src_verticalMux_block7

