// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_horizontalMux.v
// Created: 2018-10-21 17:42:58
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_horizontalMux
// Source Path: HSG/HSG/Edge Detector/LineBuffer/horizontalMux
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_horizontalMux
          (clk,
           reset,
           enb,
           dataIn1,
           dataIn2,
           dataIn3,
           unloadSEL,
           horMUXSEL,
           dataOut1,
           dataOut2,
           dataOut3);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] dataIn1;  // uint8
  input   [7:0] dataIn2;  // uint8
  input   [7:0] dataIn3;  // uint8
  input   unloadSEL;
  input   [1:0] horMUXSEL;  // ufix2
  output  [7:0] dataOut1;  // uint8
  output  [7:0] dataOut2;  // uint8
  output  [7:0] dataOut3;  // uint8

  reg  [0:2] intdelay_reg;  // ufix1 [3]
  wire [0:2] intdelay_reg_next;  // ufix1 [3]
  wire unloadSELD;
  reg [7:0] reg_reg [0:1];  // ufix8 [2]
  wire [7:0] reg_reg_next [0:1];  // ufix8 [2]
  wire [7:0] SEL;  // uint8
  wire [7:0] SEL_1;  // uint8
  reg [1:0] horMUXSEL_1;  // ufix2
  reg [1:0] horMUXSEL_2;  // ufix2
  wire [1:0] SEL_2;  // ufix2
  wire prePad;
  wire prePad_1;
  reg [1:0] SEL_3;  // ufix2
  wire [1:0] SEL_4;  // ufix2
  reg  [0:2] intdelay_reg_1;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_1;  // ufix1 [3]
  wire unloadSELD_1;
  reg [7:0] reg_reg_1 [0:1];  // ufix8 [2]
  wire [7:0] reg_reg_next_1 [0:1];  // ufix8 [2]
  wire [7:0] SEL_5;  // uint8
  wire [7:0] SEL_6;  // uint8
  wire [1:0] SEL_7;  // ufix2
  wire prePad_2;
  wire prePad_3;
  reg [1:0] SEL_8;  // ufix2
  wire [1:0] SEL_9;  // ufix2
  reg  [0:2] intdelay_reg_2;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_2;  // ufix1 [3]
  wire unloadSELD_2;
  reg [7:0] reg_reg_2 [0:1];  // ufix8 [2]
  wire [7:0] reg_reg_next_2 [0:1];  // ufix8 [2]
  wire [7:0] SEL_10;  // uint8
  wire [7:0] SEL_11;  // uint8
  wire [1:0] SEL_12;  // ufix2
  wire prePad_4;
  wire prePad_5;
  reg [1:0] SEL_13;  // ufix2
  wire [1:0] SEL_14;  // ufix2


  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
        intdelay_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
        end
      end
    end

  assign unloadSELD = intdelay_reg[2];
  assign intdelay_reg_next[0] = unloadSEL;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        reg_reg[0] <= 8'b00000000;
        reg_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          reg_reg[0] <= reg_reg_next[0];
          reg_reg[1] <= reg_reg_next[1];
        end
      end
    end

  assign SEL = reg_reg[1];
  assign reg_reg_next[0] = dataIn1;
  assign reg_reg_next[1] = reg_reg[0];



  assign SEL_1 = (unloadSELD == 1'b0 ? SEL :
              SEL);



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        horMUXSEL_1 <= 2'b00;
      end
      else begin
        if (enb) begin
          horMUXSEL_1 <= horMUXSEL;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        horMUXSEL_2 <= 2'b00;
      end
      else begin
        if (enb) begin
          horMUXSEL_2 <= horMUXSEL_1;
        end
      end
    end



  assign SEL_2 = (unloadSELD == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad = SEL_2 < 2'b01;



  assign prePad_1 = prePad & unloadSELD;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        SEL_3 <= 2'b00;
      end
      else begin
        if (enb) begin
          SEL_3 <= SEL_2;
        end
      end
    end



  assign SEL_4 = (prePad_1 == 1'b0 ? SEL_2 :
              SEL_3);



  HSG_IP_src_horizontalPadder u_horPAD1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dataIn(SEL_1),  // uint8
                                         .horSEL(SEL_4),  // ufix2
                                         .dataOut(dataOut1)  // uint8
                                         );

  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 1'b0;
        intdelay_reg_1[1] <= 1'b0;
        intdelay_reg_1[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          intdelay_reg_1[2] <= intdelay_reg_next_1[2];
        end
      end
    end

  assign unloadSELD_1 = intdelay_reg_1[2];
  assign intdelay_reg_next_1[0] = unloadSEL;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];
  assign intdelay_reg_next_1[2] = intdelay_reg_1[1];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        reg_reg_1[0] <= 8'b00000000;
        reg_reg_1[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          reg_reg_1[0] <= reg_reg_next_1[0];
          reg_reg_1[1] <= reg_reg_next_1[1];
        end
      end
    end

  assign SEL_5 = reg_reg_1[1];
  assign reg_reg_next_1[0] = dataIn2;
  assign reg_reg_next_1[1] = reg_reg_1[0];



  assign SEL_6 = (unloadSELD_1 == 1'b0 ? SEL_5 :
              SEL_5);



  assign SEL_7 = (unloadSELD_1 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_2 = SEL_7 < 2'b01;



  assign prePad_3 = prePad_2 & unloadSELD_1;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        SEL_8 <= 2'b00;
      end
      else begin
        if (enb) begin
          SEL_8 <= SEL_7;
        end
      end
    end



  assign SEL_9 = (prePad_3 == 1'b0 ? SEL_7 :
              SEL_8);



  HSG_IP_src_horizontalPadder u_horPAD1_1 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .dataIn(SEL_6),  // uint8
                                           .horSEL(SEL_9),  // ufix2
                                           .dataOut(dataOut2)  // uint8
                                           );

  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
        intdelay_reg_2[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          intdelay_reg_2[2] <= intdelay_reg_next_2[2];
        end
      end
    end

  assign unloadSELD_2 = intdelay_reg_2[2];
  assign intdelay_reg_next_2[0] = unloadSEL;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];
  assign intdelay_reg_next_2[2] = intdelay_reg_2[1];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        reg_reg_2[0] <= 8'b00000000;
        reg_reg_2[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          reg_reg_2[0] <= reg_reg_next_2[0];
          reg_reg_2[1] <= reg_reg_next_2[1];
        end
      end
    end

  assign SEL_10 = reg_reg_2[1];
  assign reg_reg_next_2[0] = dataIn3;
  assign reg_reg_next_2[1] = reg_reg_2[0];



  assign SEL_11 = (unloadSELD_2 == 1'b0 ? SEL_10 :
              SEL_10);



  assign SEL_12 = (unloadSELD_2 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_4 = SEL_12 < 2'b01;



  assign prePad_5 = prePad_4 & unloadSELD_2;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        SEL_13 <= 2'b00;
      end
      else begin
        if (enb) begin
          SEL_13 <= SEL_12;
        end
      end
    end



  assign SEL_14 = (prePad_5 == 1'b0 ? SEL_12 :
              SEL_13);



  HSG_IP_src_horizontalPadder u_horPAD1_2 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .dataIn(SEL_11),  // uint8
                                           .horSEL(SEL_14),  // ufix2
                                           .dataOut(dataOut3)  // uint8
                                           );

endmodule  // HSG_IP_src_horizontalMux

