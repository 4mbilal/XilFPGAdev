// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_horizontalMux_block2.v
// Created: 2018-10-21 17:42:59
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_horizontalMux_block2
// Source Path: HSG/HSG/Image Filter2/LineBuffer/horizontalMux
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_horizontalMux_block2
          (clk,
           reset,
           enb,
           dataIn1,
           dataIn2,
           dataIn3,
           dataIn4,
           dataIn5,
           dataIn6,
           dataIn7,
           unloadSEL,
           horMUXSEL,
           dataOut1,
           dataOut2,
           dataOut3,
           dataOut4,
           dataOut5,
           dataOut6,
           dataOut7);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn1;  // ufix1
  input   dataIn2;  // ufix1
  input   dataIn3;  // ufix1
  input   dataIn4;  // ufix1
  input   dataIn5;  // ufix1
  input   dataIn6;  // ufix1
  input   dataIn7;  // ufix1
  input   unloadSEL;
  input   [2:0] horMUXSEL;  // ufix3
  output  dataOut1;  // ufix1
  output  dataOut2;  // ufix1
  output  dataOut3;  // ufix1
  output  dataOut4;  // ufix1
  output  dataOut5;  // ufix1
  output  dataOut6;  // ufix1
  output  dataOut7;  // ufix1

  reg  [0:1] intdelay_reg;  // ufix1 [2]
  wire [0:1] intdelay_reg_next;  // ufix1 [2]
  wire unloadSELD;
  reg  [0:1] reg_reg;  // ufix1 [2]
  wire [0:1] reg_reg_next;  // ufix1 [2]
  wire SEL;  // ufix1
  wire SEL_1;  // ufix1
  reg [2:0] horMUXSEL_1;  // ufix3
  reg [2:0] horMUXSEL_2;  // ufix3
  wire [2:0] SEL_2;  // ufix3
  wire prePad;
  wire prePad_1;
  reg  prePad_2;
  reg [2:0] SEL_3;  // ufix3
  wire [2:0] SEL_4;  // ufix3
  reg  [0:1] intdelay_reg_1;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_1;  // ufix1 [2]
  wire unloadSELD_1;
  reg  [0:1] reg_reg_1;  // ufix1 [2]
  wire [0:1] reg_reg_next_1;  // ufix1 [2]
  wire SEL_5;  // ufix1
  wire SEL_6;  // ufix1
  wire [2:0] SEL_7;  // ufix3
  wire prePad_3;
  wire prePad_4;
  reg  prePad_5;
  reg [2:0] SEL_8;  // ufix3
  wire [2:0] SEL_9;  // ufix3
  reg  [0:1] intdelay_reg_2;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_2;  // ufix1 [2]
  wire unloadSELD_2;
  reg  [0:1] reg_reg_2;  // ufix1 [2]
  wire [0:1] reg_reg_next_2;  // ufix1 [2]
  wire SEL_10;  // ufix1
  wire SEL_11;  // ufix1
  wire [2:0] SEL_12;  // ufix3
  wire prePad_6;
  wire prePad_7;
  reg  prePad_8;
  reg [2:0] SEL_13;  // ufix3
  wire [2:0] SEL_14;  // ufix3
  reg  [0:1] intdelay_reg_3;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_3;  // ufix1 [2]
  wire unloadSELD_3;
  reg  [0:1] reg_reg_3;  // ufix1 [2]
  wire [0:1] reg_reg_next_3;  // ufix1 [2]
  wire SEL_15;  // ufix1
  wire SEL_16;  // ufix1
  wire [2:0] SEL_17;  // ufix3
  wire prePad_9;
  wire prePad_10;
  reg  prePad_11;
  reg [2:0] SEL_18;  // ufix3
  wire [2:0] SEL_19;  // ufix3
  reg  [0:1] intdelay_reg_4;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_4;  // ufix1 [2]
  wire unloadSELD_4;
  reg  [0:1] reg_reg_4;  // ufix1 [2]
  wire [0:1] reg_reg_next_4;  // ufix1 [2]
  wire SEL_20;  // ufix1
  wire SEL_21;  // ufix1
  wire [2:0] SEL_22;  // ufix3
  wire prePad_12;
  wire prePad_13;
  reg  prePad_14;
  reg [2:0] SEL_23;  // ufix3
  wire [2:0] SEL_24;  // ufix3
  reg  [0:1] intdelay_reg_5;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_5;  // ufix1 [2]
  wire unloadSELD_5;
  reg  [0:1] reg_reg_5;  // ufix1 [2]
  wire [0:1] reg_reg_next_5;  // ufix1 [2]
  wire SEL_25;  // ufix1
  wire SEL_26;  // ufix1
  wire [2:0] SEL_27;  // ufix3
  wire prePad_15;
  wire prePad_16;
  reg  prePad_17;
  reg [2:0] SEL_28;  // ufix3
  wire [2:0] SEL_29;  // ufix3
  reg  [0:1] intdelay_reg_6;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_6;  // ufix1 [2]
  wire unloadSELD_6;
  reg  [0:1] reg_reg_6;  // ufix1 [2]
  wire [0:1] reg_reg_next_6;  // ufix1 [2]
  wire SEL_30;  // ufix1
  wire SEL_31;  // ufix1
  wire [2:0] SEL_32;  // ufix3
  wire prePad_18;
  wire prePad_19;
  reg  prePad_20;
  reg [2:0] SEL_33;  // ufix3
  wire [2:0] SEL_34;  // ufix3


  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
        end
      end
    end

  assign unloadSELD = intdelay_reg[1];
  assign intdelay_reg_next[0] = unloadSEL;
  assign intdelay_reg_next[1] = intdelay_reg[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        reg_reg[0] <= 1'b0;
        reg_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg[0] <= reg_reg_next[0];
          reg_reg[1] <= reg_reg_next[1];
        end
      end
    end

  assign SEL = reg_reg[1];
  assign reg_reg_next[0] = dataIn1;
  assign reg_reg_next[1] = reg_reg[0];



  assign SEL_1 = (unloadSELD == 1'b0 ? SEL :
              SEL);



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        horMUXSEL_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          horMUXSEL_1 <= horMUXSEL;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        horMUXSEL_2 <= 3'b000;
      end
      else begin
        if (enb) begin
          horMUXSEL_2 <= horMUXSEL_1;
        end
      end
    end



  assign SEL_2 = (unloadSELD == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad = SEL_2 < 3'b011;



  assign prePad_1 = prePad & unloadSELD;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        prePad_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_2 <= prePad_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        SEL_3 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_3 <= SEL_2;
        end
      end
    end



  assign SEL_4 = (prePad_2 == 1'b0 ? SEL_2 :
              SEL_3);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .dataIn(SEL_1),  // ufix1
                                                .horSEL(SEL_4),  // ufix3
                                                .dataOut(dataOut1)  // ufix1
                                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 1'b0;
        intdelay_reg_1[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
        end
      end
    end

  assign unloadSELD_1 = intdelay_reg_1[1];
  assign intdelay_reg_next_1[0] = unloadSEL;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        reg_reg_1[0] <= 1'b0;
        reg_reg_1[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg_1[0] <= reg_reg_next_1[0];
          reg_reg_1[1] <= reg_reg_next_1[1];
        end
      end
    end

  assign SEL_5 = reg_reg_1[1];
  assign reg_reg_next_1[0] = dataIn2;
  assign reg_reg_next_1[1] = reg_reg_1[0];



  assign SEL_6 = (unloadSELD_1 == 1'b0 ? SEL_5 :
              SEL_5);



  assign SEL_7 = (unloadSELD_1 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_3 = SEL_7 < 3'b011;



  assign prePad_4 = prePad_3 & unloadSELD_1;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        prePad_5 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_5 <= prePad_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        SEL_8 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_8 <= SEL_7;
        end
      end
    end



  assign SEL_9 = (prePad_5 == 1'b0 ? SEL_7 :
              SEL_8);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1_1 (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .dataIn(SEL_6),  // ufix1
                                                  .horSEL(SEL_9),  // ufix3
                                                  .dataOut(dataOut2)  // ufix1
                                                  );

  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
        end
      end
    end

  assign unloadSELD_2 = intdelay_reg_2[1];
  assign intdelay_reg_next_2[0] = unloadSEL;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_6_process
      if (reset == 1'b1) begin
        reg_reg_2[0] <= 1'b0;
        reg_reg_2[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg_2[0] <= reg_reg_next_2[0];
          reg_reg_2[1] <= reg_reg_next_2[1];
        end
      end
    end

  assign SEL_10 = reg_reg_2[1];
  assign reg_reg_next_2[0] = dataIn3;
  assign reg_reg_next_2[1] = reg_reg_2[0];



  assign SEL_11 = (unloadSELD_2 == 1'b0 ? SEL_10 :
              SEL_10);



  assign SEL_12 = (unloadSELD_2 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_6 = SEL_12 < 3'b011;



  assign prePad_7 = prePad_6 & unloadSELD_2;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_7_process
      if (reset == 1'b1) begin
        prePad_8 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_8 <= prePad_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_8_process
      if (reset == 1'b1) begin
        SEL_13 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_13 <= SEL_12;
        end
      end
    end



  assign SEL_14 = (prePad_8 == 1'b0 ? SEL_12 :
              SEL_13);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1_2 (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .dataIn(SEL_11),  // ufix1
                                                  .horSEL(SEL_14),  // ufix3
                                                  .dataOut(dataOut3)  // ufix1
                                                  );

  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 1'b0;
        intdelay_reg_3[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
        end
      end
    end

  assign unloadSELD_3 = intdelay_reg_3[1];
  assign intdelay_reg_next_3[0] = unloadSEL;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_9_process
      if (reset == 1'b1) begin
        reg_reg_3[0] <= 1'b0;
        reg_reg_3[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg_3[0] <= reg_reg_next_3[0];
          reg_reg_3[1] <= reg_reg_next_3[1];
        end
      end
    end

  assign SEL_15 = reg_reg_3[1];
  assign reg_reg_next_3[0] = dataIn4;
  assign reg_reg_next_3[1] = reg_reg_3[0];



  assign SEL_16 = (unloadSELD_3 == 1'b0 ? SEL_15 :
              SEL_15);



  assign SEL_17 = (unloadSELD_3 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_9 = SEL_17 < 3'b011;



  assign prePad_10 = prePad_9 & unloadSELD_3;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_10_process
      if (reset == 1'b1) begin
        prePad_11 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_11 <= prePad_10;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_11_process
      if (reset == 1'b1) begin
        SEL_18 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_18 <= SEL_17;
        end
      end
    end



  assign SEL_19 = (prePad_11 == 1'b0 ? SEL_17 :
              SEL_18);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1_3 (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .dataIn(SEL_16),  // ufix1
                                                  .horSEL(SEL_19),  // ufix3
                                                  .dataOut(dataOut4)  // ufix1
                                                  );

  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 1'b0;
        intdelay_reg_4[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_4[0] <= intdelay_reg_next_4[0];
          intdelay_reg_4[1] <= intdelay_reg_next_4[1];
        end
      end
    end

  assign unloadSELD_4 = intdelay_reg_4[1];
  assign intdelay_reg_next_4[0] = unloadSEL;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_12_process
      if (reset == 1'b1) begin
        reg_reg_4[0] <= 1'b0;
        reg_reg_4[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg_4[0] <= reg_reg_next_4[0];
          reg_reg_4[1] <= reg_reg_next_4[1];
        end
      end
    end

  assign SEL_20 = reg_reg_4[1];
  assign reg_reg_next_4[0] = dataIn5;
  assign reg_reg_next_4[1] = reg_reg_4[0];



  assign SEL_21 = (unloadSELD_4 == 1'b0 ? SEL_20 :
              SEL_20);



  assign SEL_22 = (unloadSELD_4 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_12 = SEL_22 < 3'b011;



  assign prePad_13 = prePad_12 & unloadSELD_4;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_13_process
      if (reset == 1'b1) begin
        prePad_14 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_14 <= prePad_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_14_process
      if (reset == 1'b1) begin
        SEL_23 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_23 <= SEL_22;
        end
      end
    end



  assign SEL_24 = (prePad_14 == 1'b0 ? SEL_22 :
              SEL_23);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1_4 (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .dataIn(SEL_21),  // ufix1
                                                  .horSEL(SEL_24),  // ufix3
                                                  .dataOut(dataOut5)  // ufix1
                                                  );

  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 1'b0;
        intdelay_reg_5[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_5[0] <= intdelay_reg_next_5[0];
          intdelay_reg_5[1] <= intdelay_reg_next_5[1];
        end
      end
    end

  assign unloadSELD_5 = intdelay_reg_5[1];
  assign intdelay_reg_next_5[0] = unloadSEL;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_15_process
      if (reset == 1'b1) begin
        reg_reg_5[0] <= 1'b0;
        reg_reg_5[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg_5[0] <= reg_reg_next_5[0];
          reg_reg_5[1] <= reg_reg_next_5[1];
        end
      end
    end

  assign SEL_25 = reg_reg_5[1];
  assign reg_reg_next_5[0] = dataIn6;
  assign reg_reg_next_5[1] = reg_reg_5[0];



  assign SEL_26 = (unloadSELD_5 == 1'b0 ? SEL_25 :
              SEL_25);



  assign SEL_27 = (unloadSELD_5 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_15 = SEL_27 < 3'b011;



  assign prePad_16 = prePad_15 & unloadSELD_5;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_16_process
      if (reset == 1'b1) begin
        prePad_17 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_17 <= prePad_16;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_17_process
      if (reset == 1'b1) begin
        SEL_28 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_28 <= SEL_27;
        end
      end
    end



  assign SEL_29 = (prePad_17 == 1'b0 ? SEL_27 :
              SEL_28);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1_5 (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .dataIn(SEL_26),  // ufix1
                                                  .horSEL(SEL_29),  // ufix3
                                                  .dataOut(dataOut6)  // ufix1
                                                  );

  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_6[0] <= 1'b0;
        intdelay_reg_6[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_6[0] <= intdelay_reg_next_6[0];
          intdelay_reg_6[1] <= intdelay_reg_next_6[1];
        end
      end
    end

  assign unloadSELD_6 = intdelay_reg_6[1];
  assign intdelay_reg_next_6[0] = unloadSEL;
  assign intdelay_reg_next_6[1] = intdelay_reg_6[0];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_18_process
      if (reset == 1'b1) begin
        reg_reg_6[0] <= 1'b0;
        reg_reg_6[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reg_reg_6[0] <= reg_reg_next_6[0];
          reg_reg_6[1] <= reg_reg_next_6[1];
        end
      end
    end

  assign SEL_30 = reg_reg_6[1];
  assign reg_reg_next_6[0] = dataIn7;
  assign reg_reg_next_6[1] = reg_reg_6[0];



  assign SEL_31 = (unloadSELD_6 == 1'b0 ? SEL_30 :
              SEL_30);



  assign SEL_32 = (unloadSELD_6 == 1'b0 ? horMUXSEL_2 :
              horMUXSEL_1);



  assign prePad_18 = SEL_32 < 3'b011;



  assign prePad_19 = prePad_18 & unloadSELD_6;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_19_process
      if (reset == 1'b1) begin
        prePad_20 <= 1'b0;
      end
      else begin
        if (enb) begin
          prePad_20 <= prePad_19;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_20_process
      if (reset == 1'b1) begin
        SEL_33 <= 3'b000;
      end
      else begin
        if (enb) begin
          SEL_33 <= SEL_32;
        end
      end
    end



  assign SEL_34 = (prePad_20 == 1'b0 ? SEL_32 :
              SEL_33);



  HSG_IP_src_horizontalPadder_block2 u_horPAD1_6 (.clk(clk),
                                                  .reset(reset),
                                                  .enb(enb),
                                                  .dataIn(SEL_31),  // ufix1
                                                  .horSEL(SEL_34),  // ufix3
                                                  .dataOut(dataOut7)  // ufix1
                                                  );

endmodule  // HSG_IP_src_horizontalMux_block2

