// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_dataWriteFSM_block.v
// Created: 2018-10-21 17:42:58
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_dataWriteFSM_block
// Source Path: HSG/HSG/Image Filter/LineBuffer/dataWriteFSM
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_dataWriteFSM_block
          (clk,
           reset,
           enb,
           hStartIn,
           hEndIn,
           vStartIn,
           vEndIn,
           validTempIn,
           preProcessFlag,
           postProcessFlag,
           hStartFlag,
           vStartFlag,
           hEndFlag,
           unloadingD,
           runOrUnload,
           resetFIFO,
           horMUXSEL,
           verMUXSEL,
           hStartOut,
           hEndOut,
           vStartOut,
           vEndOut,
           validOut,
           processDataOut);


  input   clk;
  input   reset;
  input   enb;
  input   hStartIn;
  input   hEndIn;
  input   vStartIn;
  input   vEndIn;
  input   validTempIn;
  input   preProcessFlag;
  input   postProcessFlag;
  input   hStartFlag;
  input   vStartFlag;
  input   hEndFlag;
  input   unloadingD;
  input   runOrUnload;
  input   resetFIFO;
  output  [2:0] horMUXSEL;  // ufix3
  output  [2:0] verMUXSEL;  // ufix3
  output  hStartOut;
  output  hEndOut;
  output  vStartOut;
  output  vEndOut;
  output  validOut;
  output  processDataOut;

  reg signed [15:0] dataWriteFSM_PaddingCount;  // int16
  reg signed [15:0] dataWriteFSM_PaddingLine;  // int16
  reg  dataWriteFSM_validREG;
  reg [2:0] dataWriteFSM_horizontalMUXSEL;  // ufix3
  reg [2:0] dataWriteFSM_verticalMUXSEL;  // ufix3
  reg  dataWriteFSM_Unloading;
  reg signed [15:0] dataWriteFSM_PaddingCount_next;  // int16
  reg signed [15:0] dataWriteFSM_PaddingLine_next;  // int16
  reg  dataWriteFSM_validREG_next;
  reg [2:0] dataWriteFSM_horizontalMUXSEL_next;  // ufix3
  reg [2:0] dataWriteFSM_verticalMUXSEL_next;  // ufix3
  reg  dataWriteFSM_Unloading_next;
  reg [2:0] horMUXSEL_1;  // ufix3
  reg [2:0] verMUXSEL_1;  // ufix3
  reg  hStartOut_1;
  reg  hEndOut_1;
  reg  vStartOut_1;
  reg  vEndOut_1;
  reg  validOut_1;
  reg  processDataOut_1;
  reg  dataWriteFSM_out7_0;
  reg  dataWriteFSM_runOrUnloadS;
  reg  dataWriteFSM_t_0;
  reg  dataWriteFSM_t_1;
  reg signed [15:0] dataWriteFSM_PaddingLine_temp;  // int16
  reg  dataWriteFSM_validREG_temp;
  reg [2:0] dataWriteFSM_horizontalMUXSEL_temp;  // ufix3
  reg [2:0] dataWriteFSM_verticalMUXSEL_temp;  // ufix3


  // Data Write FSM - write output data
  always @(posedge clk or posedge reset)
    begin : dataWriteFSM_process
      if (reset == 1'b1) begin
        dataWriteFSM_PaddingCount <= 16'sd0;
        dataWriteFSM_PaddingLine <= 16'sd0;
        dataWriteFSM_horizontalMUXSEL <= 3'b000;
        dataWriteFSM_verticalMUXSEL <= 3'b000;
        dataWriteFSM_validREG <= 1'b0;
        dataWriteFSM_Unloading <= 1'b0;
      end
      else begin
        if (enb) begin
          dataWriteFSM_PaddingCount <= dataWriteFSM_PaddingCount_next;
          dataWriteFSM_PaddingLine <= dataWriteFSM_PaddingLine_next;
          dataWriteFSM_validREG <= dataWriteFSM_validREG_next;
          dataWriteFSM_horizontalMUXSEL <= dataWriteFSM_horizontalMUXSEL_next;
          dataWriteFSM_verticalMUXSEL <= dataWriteFSM_verticalMUXSEL_next;
          dataWriteFSM_Unloading <= dataWriteFSM_Unloading_next;
        end
      end
    end

  always @(dataWriteFSM_PaddingCount, dataWriteFSM_PaddingLine, dataWriteFSM_validREG,
       dataWriteFSM_horizontalMUXSEL, dataWriteFSM_verticalMUXSEL,
       dataWriteFSM_Unloading, hStartIn, hEndIn, vStartIn, vEndIn, validTempIn,
       preProcessFlag, postProcessFlag, hStartFlag, vStartFlag, unloadingD,
       runOrUnload, resetFIFO) begin
    dataWriteFSM_PaddingLine_temp = dataWriteFSM_PaddingLine;
    dataWriteFSM_validREG_temp = dataWriteFSM_validREG;
    dataWriteFSM_verticalMUXSEL_temp = dataWriteFSM_verticalMUXSEL;
    dataWriteFSM_PaddingCount_next = dataWriteFSM_PaddingCount;
    dataWriteFSM_Unloading_next = dataWriteFSM_Unloading;
    dataWriteFSM_runOrUnloadS = runOrUnload != 1'b0;
    if ((unloadingD != 1'b0) && (dataWriteFSM_PaddingLine == 16'sd0)) begin
      dataWriteFSM_PaddingLine_temp = 16'sd3;
    end
    if (validTempIn != 1'b0) begin
      dataWriteFSM_PaddingCount_next = 16'sd0;
      dataWriteFSM_horizontalMUXSEL_temp = 3'b011;
      if (hStartIn != 1'b0) begin
        dataWriteFSM_validREG_temp = 1'b1;
      end
      hStartOut_1 = hStartIn;
      hEndOut_1 = hEndIn;
      vStartOut_1 = vStartIn;
      vEndOut_1 = vEndIn;
      validOut_1 = dataWriteFSM_validREG_temp;
      dataWriteFSM_out7_0 = 1'b1;
      if (hEndIn != 1'b0) begin
        dataWriteFSM_validREG_temp = 1'b0;
      end
    end
    else begin
      dataWriteFSM_t_0 = preProcessFlag && dataWriteFSM_runOrUnloadS;
      dataWriteFSM_t_1 = postProcessFlag && dataWriteFSM_runOrUnloadS;
      if (dataWriteFSM_t_0) begin
        if (dataWriteFSM_PaddingCount == 16'sd0) begin
          dataWriteFSM_horizontalMUXSEL_temp = 3'b000;
          dataWriteFSM_PaddingCount_next = 16'sd1;
        end
        else begin
          dataWriteFSM_horizontalMUXSEL_temp = dataWriteFSM_horizontalMUXSEL + 3'b001;
        end
        dataWriteFSM_out7_0 = dataWriteFSM_horizontalMUXSEL_temp > 3'b000;
      end
      else if (dataWriteFSM_t_1) begin
        dataWriteFSM_horizontalMUXSEL_temp = dataWriteFSM_horizontalMUXSEL + 3'b001;
        if (dataWriteFSM_Unloading) begin
          dataWriteFSM_out7_0 = dataWriteFSM_horizontalMUXSEL_temp < 3'b110;
        end
        else begin
          dataWriteFSM_out7_0 = 1'b1;
        end
      end
      else begin
        dataWriteFSM_out7_0 = 1'b0;
        dataWriteFSM_horizontalMUXSEL_temp = 3'b000;
        dataWriteFSM_PaddingCount_next = 16'sd0;
      end
      hStartOut_1 = 1'b0;
      hEndOut_1 = 1'b0;
      vStartOut_1 = 1'b0;
      vEndOut_1 = 1'b0;
      validOut_1 = 1'b0;
    end
    if (dataWriteFSM_PaddingLine_temp != 16'sd0) begin
      if (dataWriteFSM_Unloading) begin
        if (hStartFlag != 1'b0) begin
          dataWriteFSM_verticalMUXSEL_temp = dataWriteFSM_verticalMUXSEL + 3'b001;
          dataWriteFSM_PaddingLine_temp = dataWriteFSM_PaddingLine_temp - 16'sd1;
        end
      end
      else if (hStartFlag != 1'b0) begin
        dataWriteFSM_verticalMUXSEL_temp = dataWriteFSM_verticalMUXSEL + 3'b001;
        dataWriteFSM_PaddingLine_temp = dataWriteFSM_PaddingLine_temp - 16'sd1;
      end
    end
    else if ( ! dataWriteFSM_Unloading) begin
      dataWriteFSM_verticalMUXSEL_temp = 3'b011;
    end
    if (vStartFlag != 1'b0) begin
      dataWriteFSM_PaddingLine_temp = 16'sd3;
      dataWriteFSM_verticalMUXSEL_temp = 3'b000;
    end
    else if (dataWriteFSM_PaddingLine_temp == -16'sd1) begin
      dataWriteFSM_PaddingLine_temp = 16'sd0;
    end
    if (resetFIFO != 1'b0) begin
      dataWriteFSM_verticalMUXSEL_temp = 3'b000;
      dataWriteFSM_PaddingLine_temp = 16'sd3;
      dataWriteFSM_PaddingCount_next = 16'sd0;
      dataWriteFSM_validREG_temp = 1'b0;
      dataWriteFSM_horizontalMUXSEL_temp = 3'b000;
      dataWriteFSM_Unloading_next = 1'b0;
    end
    if (unloadingD != 1'b0) begin
      dataWriteFSM_Unloading_next = 1'b1;
    end
    horMUXSEL_1 = dataWriteFSM_horizontalMUXSEL_temp;
    verMUXSEL_1 = dataWriteFSM_verticalMUXSEL_temp;
    processDataOut_1 = dataWriteFSM_out7_0;
    dataWriteFSM_PaddingLine_next = dataWriteFSM_PaddingLine_temp;
    dataWriteFSM_validREG_next = dataWriteFSM_validREG_temp;
    dataWriteFSM_horizontalMUXSEL_next = dataWriteFSM_horizontalMUXSEL_temp;
    dataWriteFSM_verticalMUXSEL_next = dataWriteFSM_verticalMUXSEL_temp;
  end



  assign horMUXSEL = horMUXSEL_1;

  assign verMUXSEL = verMUXSEL_1;

  assign hStartOut = hStartOut_1;

  assign hEndOut = hEndOut_1;

  assign vStartOut = vStartOut_1;

  assign vEndOut = vEndOut_1;

  assign validOut = validOut_1;

  assign processDataOut = processDataOut_1;

endmodule  // HSG_IP_src_dataWriteFSM_block

