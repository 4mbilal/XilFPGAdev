// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_FIFO_block5.v
// Created: 2018-10-21 17:42:59
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_FIFO_block5
// Source Path: HSG/HSG/Image Filter5/LineBuffer/DataMemory/FIFO
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_FIFO_block5
          (clk,
           reset,
           enb,
           dataIn,
           Push,
           Pop,
           load,
           dataOut,
           EmptyFlag);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   Push;
  input   Pop;
  input   load;
  output  dataOut;  // ufix1
  output  EmptyFlag;

  reg [9:0] writePointer;  // ufix10
  wire popEn;
  reg [9:0] readPointer;  // ufix10
  wire relop_relop1;
  wire notEmpty;
  reg  popEnREG;
  wire initData;  // ufix1
  reg  dataOut_1;  // ufix1
  reg  EmptyFlag_1;


  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Write_Count_process
      if (reset == 1'b1) begin
        writePointer <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (load == 1'b1) begin
            writePointer <= 10'b0000000000;
          end
          else if (Push == 1'b1) begin
            writePointer <= writePointer + 10'b0000000001;
          end
        end
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk or posedge reset)
    begin : Read_Count_process
      if (reset == 1'b1) begin
        readPointer <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          if (load == 1'b1) begin
            readPointer <= 10'b0000000000;
          end
          else if (popEn == 1'b1) begin
            readPointer <= readPointer + 10'b0000000001;
          end
        end
      end
    end



  assign relop_relop1 = writePointer == readPointer;



  assign notEmpty =  ~ relop_relop1;



  assign popEn = notEmpty & Pop;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        popEnREG <= 1'b0;
      end
      else begin
        if (enb) begin
          popEnREG <= popEn;
        end
      end
    end



  HSG_IP_src_SimpleDualPortRAM_singlebit #(.AddrWidth(10),
                                           .DataWidth(1)
                                           )
                                         u_simpleDualPortRam (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(dataIn),  // ufix1
                                                              .wr_addr(writePointer),
                                                              .wr_en(Push),
                                                              .rd_addr(readPointer),
                                                              .rd_dout(initData)  // ufix1
                                                              );

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        dataOut_1 <= 1'b0;
      end
      else begin
        if (enb && popEnREG) begin
          dataOut_1 <= initData;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        EmptyFlag_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          EmptyFlag_1 <= relop_relop1;
        end
      end
    end



  assign dataOut = dataOut_1;

  assign EmptyFlag = EmptyFlag_1;

endmodule  // HSG_IP_src_FIFO_block5

