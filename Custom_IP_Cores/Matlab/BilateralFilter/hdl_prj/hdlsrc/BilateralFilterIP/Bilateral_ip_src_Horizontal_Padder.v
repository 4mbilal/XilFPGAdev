// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\BilateralFilterIP\Bilateral_ip_src_Horizontal_Padder.v
// Created: 2021-04-16 01:15:52
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Bilateral_ip_src_Horizontal_Padder
// Source Path: BilateralFilterIP/BilateralFilter_HW/Bilateral Filter1/LineBuffer/Horizontal Padder
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Bilateral_ip_src_Horizontal_Padder
          (clk,
           reset,
           enb,
           dataVectorIn_0,
           dataVectorIn_1,
           dataVectorIn_2,
           dataVectorIn_3,
           dataVectorIn_4,
           dataVectorIn_5,
           dataVectorIn_6,
           dataVectorIn_7,
           dataVectorIn_8,
           horPadCount,
           padShift,
           dataVector_0,
           dataVector_1,
           dataVector_2,
           dataVector_3,
           dataVector_4,
           dataVector_5,
           dataVector_6,
           dataVector_7,
           dataVector_8);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] dataVectorIn_0;  // uint8
  input   [7:0] dataVectorIn_1;  // uint8
  input   [7:0] dataVectorIn_2;  // uint8
  input   [7:0] dataVectorIn_3;  // uint8
  input   [7:0] dataVectorIn_4;  // uint8
  input   [7:0] dataVectorIn_5;  // uint8
  input   [7:0] dataVectorIn_6;  // uint8
  input   [7:0] dataVectorIn_7;  // uint8
  input   [7:0] dataVectorIn_8;  // uint8
  input   [9:0] horPadCount;  // ufix10
  input   padShift;
  output  [7:0] dataVector_0;  // uint8
  output  [7:0] dataVector_1;  // uint8
  output  [7:0] dataVector_2;  // uint8
  output  [7:0] dataVector_3;  // uint8
  output  [7:0] dataVector_4;  // uint8
  output  [7:0] dataVector_5;  // uint8
  output  [7:0] dataVector_6;  // uint8
  output  [7:0] dataVector_7;  // uint8
  output  [7:0] dataVector_8;  // uint8


  wire [7:0] DataMuxIn1 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn1_1 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_1 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_1 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn2 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_2 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_2 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn3 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_3 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_3 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn4 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_4 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_4 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn5 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_5 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_5 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn6 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_6 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_6 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn7 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_7 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_7 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn8 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_8 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_8 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn9 [0:8];  // uint8 [9]
  reg [7:0] intdelay_reg_9 [0:8];  // ufix8 [9]
  wire [7:0] intdelay_reg_next_9 [0:8];  // ufix8 [9]
  wire [7:0] DataMuxIn10 [0:8];  // uint8 [9]
  wire [7:0] dataVector [0:8];  // uint8 [9]


  assign DataMuxIn1[0] = dataVectorIn_0;
  assign DataMuxIn1[1] = dataVectorIn_1;
  assign DataMuxIn1[2] = dataVectorIn_2;
  assign DataMuxIn1[3] = dataVectorIn_3;
  assign DataMuxIn1[4] = dataVectorIn_4;
  assign DataMuxIn1[5] = dataVectorIn_5;
  assign DataMuxIn1[6] = dataVectorIn_6;
  assign DataMuxIn1[7] = dataVectorIn_7;
  assign DataMuxIn1[8] = dataVectorIn_8;

  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 8'b00000000;
        intdelay_reg[1] <= 8'b00000000;
        intdelay_reg[2] <= 8'b00000000;
        intdelay_reg[3] <= 8'b00000000;
        intdelay_reg[4] <= 8'b00000000;
        intdelay_reg[5] <= 8'b00000000;
        intdelay_reg[6] <= 8'b00000000;
        intdelay_reg[7] <= 8'b00000000;
        intdelay_reg[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
          intdelay_reg[3] <= intdelay_reg_next[3];
          intdelay_reg[4] <= intdelay_reg_next[4];
          intdelay_reg[5] <= intdelay_reg_next[5];
          intdelay_reg[6] <= intdelay_reg_next[6];
          intdelay_reg[7] <= intdelay_reg_next[7];
          intdelay_reg[8] <= intdelay_reg_next[8];
        end
      end
    end

  assign DataMuxIn1_1[0] = intdelay_reg[0];
  assign DataMuxIn1_1[1] = intdelay_reg[1];
  assign DataMuxIn1_1[2] = intdelay_reg[2];
  assign DataMuxIn1_1[3] = intdelay_reg[3];
  assign DataMuxIn1_1[4] = intdelay_reg[4];
  assign DataMuxIn1_1[5] = intdelay_reg[5];
  assign DataMuxIn1_1[6] = intdelay_reg[6];
  assign DataMuxIn1_1[7] = intdelay_reg[7];
  assign DataMuxIn1_1[8] = intdelay_reg[8];
  assign intdelay_reg_next[0] = DataMuxIn1[0];
  assign intdelay_reg_next[1] = DataMuxIn1[1];
  assign intdelay_reg_next[2] = DataMuxIn1[2];
  assign intdelay_reg_next[3] = DataMuxIn1[3];
  assign intdelay_reg_next[4] = DataMuxIn1[4];
  assign intdelay_reg_next[5] = DataMuxIn1[5];
  assign intdelay_reg_next[6] = DataMuxIn1[6];
  assign intdelay_reg_next[7] = DataMuxIn1[7];
  assign intdelay_reg_next[8] = DataMuxIn1[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 8'b00000000;
        intdelay_reg_1[1] <= 8'b00000000;
        intdelay_reg_1[2] <= 8'b00000000;
        intdelay_reg_1[3] <= 8'b00000000;
        intdelay_reg_1[4] <= 8'b00000000;
        intdelay_reg_1[5] <= 8'b00000000;
        intdelay_reg_1[6] <= 8'b00000000;
        intdelay_reg_1[7] <= 8'b00000000;
        intdelay_reg_1[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          intdelay_reg_1[2] <= intdelay_reg_next_1[2];
          intdelay_reg_1[3] <= intdelay_reg_next_1[3];
          intdelay_reg_1[4] <= intdelay_reg_next_1[4];
          intdelay_reg_1[5] <= intdelay_reg_next_1[5];
          intdelay_reg_1[6] <= intdelay_reg_next_1[6];
          intdelay_reg_1[7] <= intdelay_reg_next_1[7];
          intdelay_reg_1[8] <= intdelay_reg_next_1[8];
        end
      end
    end

  assign DataMuxIn2[0] = intdelay_reg_1[0];
  assign DataMuxIn2[1] = intdelay_reg_1[1];
  assign DataMuxIn2[2] = intdelay_reg_1[2];
  assign DataMuxIn2[3] = intdelay_reg_1[3];
  assign DataMuxIn2[4] = intdelay_reg_1[4];
  assign DataMuxIn2[5] = intdelay_reg_1[5];
  assign DataMuxIn2[6] = intdelay_reg_1[6];
  assign DataMuxIn2[7] = intdelay_reg_1[7];
  assign DataMuxIn2[8] = intdelay_reg_1[8];
  assign intdelay_reg_next_1[0] = DataMuxIn1_1[0];
  assign intdelay_reg_next_1[1] = DataMuxIn1_1[1];
  assign intdelay_reg_next_1[2] = DataMuxIn1_1[2];
  assign intdelay_reg_next_1[3] = DataMuxIn1_1[3];
  assign intdelay_reg_next_1[4] = DataMuxIn1_1[4];
  assign intdelay_reg_next_1[5] = DataMuxIn1_1[5];
  assign intdelay_reg_next_1[6] = DataMuxIn1_1[6];
  assign intdelay_reg_next_1[7] = DataMuxIn1_1[7];
  assign intdelay_reg_next_1[8] = DataMuxIn1_1[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 8'b00000000;
        intdelay_reg_2[1] <= 8'b00000000;
        intdelay_reg_2[2] <= 8'b00000000;
        intdelay_reg_2[3] <= 8'b00000000;
        intdelay_reg_2[4] <= 8'b00000000;
        intdelay_reg_2[5] <= 8'b00000000;
        intdelay_reg_2[6] <= 8'b00000000;
        intdelay_reg_2[7] <= 8'b00000000;
        intdelay_reg_2[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          intdelay_reg_2[2] <= intdelay_reg_next_2[2];
          intdelay_reg_2[3] <= intdelay_reg_next_2[3];
          intdelay_reg_2[4] <= intdelay_reg_next_2[4];
          intdelay_reg_2[5] <= intdelay_reg_next_2[5];
          intdelay_reg_2[6] <= intdelay_reg_next_2[6];
          intdelay_reg_2[7] <= intdelay_reg_next_2[7];
          intdelay_reg_2[8] <= intdelay_reg_next_2[8];
        end
      end
    end

  assign DataMuxIn3[0] = intdelay_reg_2[0];
  assign DataMuxIn3[1] = intdelay_reg_2[1];
  assign DataMuxIn3[2] = intdelay_reg_2[2];
  assign DataMuxIn3[3] = intdelay_reg_2[3];
  assign DataMuxIn3[4] = intdelay_reg_2[4];
  assign DataMuxIn3[5] = intdelay_reg_2[5];
  assign DataMuxIn3[6] = intdelay_reg_2[6];
  assign DataMuxIn3[7] = intdelay_reg_2[7];
  assign DataMuxIn3[8] = intdelay_reg_2[8];
  assign intdelay_reg_next_2[0] = DataMuxIn2[0];
  assign intdelay_reg_next_2[1] = DataMuxIn2[1];
  assign intdelay_reg_next_2[2] = DataMuxIn2[2];
  assign intdelay_reg_next_2[3] = DataMuxIn2[3];
  assign intdelay_reg_next_2[4] = DataMuxIn2[4];
  assign intdelay_reg_next_2[5] = DataMuxIn2[5];
  assign intdelay_reg_next_2[6] = DataMuxIn2[6];
  assign intdelay_reg_next_2[7] = DataMuxIn2[7];
  assign intdelay_reg_next_2[8] = DataMuxIn2[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 8'b00000000;
        intdelay_reg_3[1] <= 8'b00000000;
        intdelay_reg_3[2] <= 8'b00000000;
        intdelay_reg_3[3] <= 8'b00000000;
        intdelay_reg_3[4] <= 8'b00000000;
        intdelay_reg_3[5] <= 8'b00000000;
        intdelay_reg_3[6] <= 8'b00000000;
        intdelay_reg_3[7] <= 8'b00000000;
        intdelay_reg_3[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
          intdelay_reg_3[2] <= intdelay_reg_next_3[2];
          intdelay_reg_3[3] <= intdelay_reg_next_3[3];
          intdelay_reg_3[4] <= intdelay_reg_next_3[4];
          intdelay_reg_3[5] <= intdelay_reg_next_3[5];
          intdelay_reg_3[6] <= intdelay_reg_next_3[6];
          intdelay_reg_3[7] <= intdelay_reg_next_3[7];
          intdelay_reg_3[8] <= intdelay_reg_next_3[8];
        end
      end
    end

  assign DataMuxIn4[0] = intdelay_reg_3[0];
  assign DataMuxIn4[1] = intdelay_reg_3[1];
  assign DataMuxIn4[2] = intdelay_reg_3[2];
  assign DataMuxIn4[3] = intdelay_reg_3[3];
  assign DataMuxIn4[4] = intdelay_reg_3[4];
  assign DataMuxIn4[5] = intdelay_reg_3[5];
  assign DataMuxIn4[6] = intdelay_reg_3[6];
  assign DataMuxIn4[7] = intdelay_reg_3[7];
  assign DataMuxIn4[8] = intdelay_reg_3[8];
  assign intdelay_reg_next_3[0] = DataMuxIn3[0];
  assign intdelay_reg_next_3[1] = DataMuxIn3[1];
  assign intdelay_reg_next_3[2] = DataMuxIn3[2];
  assign intdelay_reg_next_3[3] = DataMuxIn3[3];
  assign intdelay_reg_next_3[4] = DataMuxIn3[4];
  assign intdelay_reg_next_3[5] = DataMuxIn3[5];
  assign intdelay_reg_next_3[6] = DataMuxIn3[6];
  assign intdelay_reg_next_3[7] = DataMuxIn3[7];
  assign intdelay_reg_next_3[8] = DataMuxIn3[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 8'b00000000;
        intdelay_reg_4[1] <= 8'b00000000;
        intdelay_reg_4[2] <= 8'b00000000;
        intdelay_reg_4[3] <= 8'b00000000;
        intdelay_reg_4[4] <= 8'b00000000;
        intdelay_reg_4[5] <= 8'b00000000;
        intdelay_reg_4[6] <= 8'b00000000;
        intdelay_reg_4[7] <= 8'b00000000;
        intdelay_reg_4[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_4[0] <= intdelay_reg_next_4[0];
          intdelay_reg_4[1] <= intdelay_reg_next_4[1];
          intdelay_reg_4[2] <= intdelay_reg_next_4[2];
          intdelay_reg_4[3] <= intdelay_reg_next_4[3];
          intdelay_reg_4[4] <= intdelay_reg_next_4[4];
          intdelay_reg_4[5] <= intdelay_reg_next_4[5];
          intdelay_reg_4[6] <= intdelay_reg_next_4[6];
          intdelay_reg_4[7] <= intdelay_reg_next_4[7];
          intdelay_reg_4[8] <= intdelay_reg_next_4[8];
        end
      end
    end

  assign DataMuxIn5[0] = intdelay_reg_4[0];
  assign DataMuxIn5[1] = intdelay_reg_4[1];
  assign DataMuxIn5[2] = intdelay_reg_4[2];
  assign DataMuxIn5[3] = intdelay_reg_4[3];
  assign DataMuxIn5[4] = intdelay_reg_4[4];
  assign DataMuxIn5[5] = intdelay_reg_4[5];
  assign DataMuxIn5[6] = intdelay_reg_4[6];
  assign DataMuxIn5[7] = intdelay_reg_4[7];
  assign DataMuxIn5[8] = intdelay_reg_4[8];
  assign intdelay_reg_next_4[0] = DataMuxIn4[0];
  assign intdelay_reg_next_4[1] = DataMuxIn4[1];
  assign intdelay_reg_next_4[2] = DataMuxIn4[2];
  assign intdelay_reg_next_4[3] = DataMuxIn4[3];
  assign intdelay_reg_next_4[4] = DataMuxIn4[4];
  assign intdelay_reg_next_4[5] = DataMuxIn4[5];
  assign intdelay_reg_next_4[6] = DataMuxIn4[6];
  assign intdelay_reg_next_4[7] = DataMuxIn4[7];
  assign intdelay_reg_next_4[8] = DataMuxIn4[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 8'b00000000;
        intdelay_reg_5[1] <= 8'b00000000;
        intdelay_reg_5[2] <= 8'b00000000;
        intdelay_reg_5[3] <= 8'b00000000;
        intdelay_reg_5[4] <= 8'b00000000;
        intdelay_reg_5[5] <= 8'b00000000;
        intdelay_reg_5[6] <= 8'b00000000;
        intdelay_reg_5[7] <= 8'b00000000;
        intdelay_reg_5[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_5[0] <= intdelay_reg_next_5[0];
          intdelay_reg_5[1] <= intdelay_reg_next_5[1];
          intdelay_reg_5[2] <= intdelay_reg_next_5[2];
          intdelay_reg_5[3] <= intdelay_reg_next_5[3];
          intdelay_reg_5[4] <= intdelay_reg_next_5[4];
          intdelay_reg_5[5] <= intdelay_reg_next_5[5];
          intdelay_reg_5[6] <= intdelay_reg_next_5[6];
          intdelay_reg_5[7] <= intdelay_reg_next_5[7];
          intdelay_reg_5[8] <= intdelay_reg_next_5[8];
        end
      end
    end

  assign DataMuxIn6[0] = intdelay_reg_5[0];
  assign DataMuxIn6[1] = intdelay_reg_5[1];
  assign DataMuxIn6[2] = intdelay_reg_5[2];
  assign DataMuxIn6[3] = intdelay_reg_5[3];
  assign DataMuxIn6[4] = intdelay_reg_5[4];
  assign DataMuxIn6[5] = intdelay_reg_5[5];
  assign DataMuxIn6[6] = intdelay_reg_5[6];
  assign DataMuxIn6[7] = intdelay_reg_5[7];
  assign DataMuxIn6[8] = intdelay_reg_5[8];
  assign intdelay_reg_next_5[0] = DataMuxIn5[0];
  assign intdelay_reg_next_5[1] = DataMuxIn5[1];
  assign intdelay_reg_next_5[2] = DataMuxIn5[2];
  assign intdelay_reg_next_5[3] = DataMuxIn5[3];
  assign intdelay_reg_next_5[4] = DataMuxIn5[4];
  assign intdelay_reg_next_5[5] = DataMuxIn5[5];
  assign intdelay_reg_next_5[6] = DataMuxIn5[6];
  assign intdelay_reg_next_5[7] = DataMuxIn5[7];
  assign intdelay_reg_next_5[8] = DataMuxIn5[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_6[0] <= 8'b00000000;
        intdelay_reg_6[1] <= 8'b00000000;
        intdelay_reg_6[2] <= 8'b00000000;
        intdelay_reg_6[3] <= 8'b00000000;
        intdelay_reg_6[4] <= 8'b00000000;
        intdelay_reg_6[5] <= 8'b00000000;
        intdelay_reg_6[6] <= 8'b00000000;
        intdelay_reg_6[7] <= 8'b00000000;
        intdelay_reg_6[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_6[0] <= intdelay_reg_next_6[0];
          intdelay_reg_6[1] <= intdelay_reg_next_6[1];
          intdelay_reg_6[2] <= intdelay_reg_next_6[2];
          intdelay_reg_6[3] <= intdelay_reg_next_6[3];
          intdelay_reg_6[4] <= intdelay_reg_next_6[4];
          intdelay_reg_6[5] <= intdelay_reg_next_6[5];
          intdelay_reg_6[6] <= intdelay_reg_next_6[6];
          intdelay_reg_6[7] <= intdelay_reg_next_6[7];
          intdelay_reg_6[8] <= intdelay_reg_next_6[8];
        end
      end
    end

  assign DataMuxIn7[0] = intdelay_reg_6[0];
  assign DataMuxIn7[1] = intdelay_reg_6[1];
  assign DataMuxIn7[2] = intdelay_reg_6[2];
  assign DataMuxIn7[3] = intdelay_reg_6[3];
  assign DataMuxIn7[4] = intdelay_reg_6[4];
  assign DataMuxIn7[5] = intdelay_reg_6[5];
  assign DataMuxIn7[6] = intdelay_reg_6[6];
  assign DataMuxIn7[7] = intdelay_reg_6[7];
  assign DataMuxIn7[8] = intdelay_reg_6[8];
  assign intdelay_reg_next_6[0] = DataMuxIn6[0];
  assign intdelay_reg_next_6[1] = DataMuxIn6[1];
  assign intdelay_reg_next_6[2] = DataMuxIn6[2];
  assign intdelay_reg_next_6[3] = DataMuxIn6[3];
  assign intdelay_reg_next_6[4] = DataMuxIn6[4];
  assign intdelay_reg_next_6[5] = DataMuxIn6[5];
  assign intdelay_reg_next_6[6] = DataMuxIn6[6];
  assign intdelay_reg_next_6[7] = DataMuxIn6[7];
  assign intdelay_reg_next_6[8] = DataMuxIn6[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        intdelay_reg_7[0] <= 8'b00000000;
        intdelay_reg_7[1] <= 8'b00000000;
        intdelay_reg_7[2] <= 8'b00000000;
        intdelay_reg_7[3] <= 8'b00000000;
        intdelay_reg_7[4] <= 8'b00000000;
        intdelay_reg_7[5] <= 8'b00000000;
        intdelay_reg_7[6] <= 8'b00000000;
        intdelay_reg_7[7] <= 8'b00000000;
        intdelay_reg_7[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_7[0] <= intdelay_reg_next_7[0];
          intdelay_reg_7[1] <= intdelay_reg_next_7[1];
          intdelay_reg_7[2] <= intdelay_reg_next_7[2];
          intdelay_reg_7[3] <= intdelay_reg_next_7[3];
          intdelay_reg_7[4] <= intdelay_reg_next_7[4];
          intdelay_reg_7[5] <= intdelay_reg_next_7[5];
          intdelay_reg_7[6] <= intdelay_reg_next_7[6];
          intdelay_reg_7[7] <= intdelay_reg_next_7[7];
          intdelay_reg_7[8] <= intdelay_reg_next_7[8];
        end
      end
    end

  assign DataMuxIn8[0] = intdelay_reg_7[0];
  assign DataMuxIn8[1] = intdelay_reg_7[1];
  assign DataMuxIn8[2] = intdelay_reg_7[2];
  assign DataMuxIn8[3] = intdelay_reg_7[3];
  assign DataMuxIn8[4] = intdelay_reg_7[4];
  assign DataMuxIn8[5] = intdelay_reg_7[5];
  assign DataMuxIn8[6] = intdelay_reg_7[6];
  assign DataMuxIn8[7] = intdelay_reg_7[7];
  assign DataMuxIn8[8] = intdelay_reg_7[8];
  assign intdelay_reg_next_7[0] = DataMuxIn7[0];
  assign intdelay_reg_next_7[1] = DataMuxIn7[1];
  assign intdelay_reg_next_7[2] = DataMuxIn7[2];
  assign intdelay_reg_next_7[3] = DataMuxIn7[3];
  assign intdelay_reg_next_7[4] = DataMuxIn7[4];
  assign intdelay_reg_next_7[5] = DataMuxIn7[5];
  assign intdelay_reg_next_7[6] = DataMuxIn7[6];
  assign intdelay_reg_next_7[7] = DataMuxIn7[7];
  assign intdelay_reg_next_7[8] = DataMuxIn7[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        intdelay_reg_8[0] <= 8'b00000000;
        intdelay_reg_8[1] <= 8'b00000000;
        intdelay_reg_8[2] <= 8'b00000000;
        intdelay_reg_8[3] <= 8'b00000000;
        intdelay_reg_8[4] <= 8'b00000000;
        intdelay_reg_8[5] <= 8'b00000000;
        intdelay_reg_8[6] <= 8'b00000000;
        intdelay_reg_8[7] <= 8'b00000000;
        intdelay_reg_8[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_8[0] <= intdelay_reg_next_8[0];
          intdelay_reg_8[1] <= intdelay_reg_next_8[1];
          intdelay_reg_8[2] <= intdelay_reg_next_8[2];
          intdelay_reg_8[3] <= intdelay_reg_next_8[3];
          intdelay_reg_8[4] <= intdelay_reg_next_8[4];
          intdelay_reg_8[5] <= intdelay_reg_next_8[5];
          intdelay_reg_8[6] <= intdelay_reg_next_8[6];
          intdelay_reg_8[7] <= intdelay_reg_next_8[7];
          intdelay_reg_8[8] <= intdelay_reg_next_8[8];
        end
      end
    end

  assign DataMuxIn9[0] = intdelay_reg_8[0];
  assign DataMuxIn9[1] = intdelay_reg_8[1];
  assign DataMuxIn9[2] = intdelay_reg_8[2];
  assign DataMuxIn9[3] = intdelay_reg_8[3];
  assign DataMuxIn9[4] = intdelay_reg_8[4];
  assign DataMuxIn9[5] = intdelay_reg_8[5];
  assign DataMuxIn9[6] = intdelay_reg_8[6];
  assign DataMuxIn9[7] = intdelay_reg_8[7];
  assign DataMuxIn9[8] = intdelay_reg_8[8];
  assign intdelay_reg_next_8[0] = DataMuxIn8[0];
  assign intdelay_reg_next_8[1] = DataMuxIn8[1];
  assign intdelay_reg_next_8[2] = DataMuxIn8[2];
  assign intdelay_reg_next_8[3] = DataMuxIn8[3];
  assign intdelay_reg_next_8[4] = DataMuxIn8[4];
  assign intdelay_reg_next_8[5] = DataMuxIn8[5];
  assign intdelay_reg_next_8[6] = DataMuxIn8[6];
  assign intdelay_reg_next_8[7] = DataMuxIn8[7];
  assign intdelay_reg_next_8[8] = DataMuxIn8[8];



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        intdelay_reg_9[0] <= 8'b00000000;
        intdelay_reg_9[1] <= 8'b00000000;
        intdelay_reg_9[2] <= 8'b00000000;
        intdelay_reg_9[3] <= 8'b00000000;
        intdelay_reg_9[4] <= 8'b00000000;
        intdelay_reg_9[5] <= 8'b00000000;
        intdelay_reg_9[6] <= 8'b00000000;
        intdelay_reg_9[7] <= 8'b00000000;
        intdelay_reg_9[8] <= 8'b00000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_9[0] <= intdelay_reg_next_9[0];
          intdelay_reg_9[1] <= intdelay_reg_next_9[1];
          intdelay_reg_9[2] <= intdelay_reg_next_9[2];
          intdelay_reg_9[3] <= intdelay_reg_next_9[3];
          intdelay_reg_9[4] <= intdelay_reg_next_9[4];
          intdelay_reg_9[5] <= intdelay_reg_next_9[5];
          intdelay_reg_9[6] <= intdelay_reg_next_9[6];
          intdelay_reg_9[7] <= intdelay_reg_next_9[7];
          intdelay_reg_9[8] <= intdelay_reg_next_9[8];
        end
      end
    end

  assign DataMuxIn10[0] = intdelay_reg_9[0];
  assign DataMuxIn10[1] = intdelay_reg_9[1];
  assign DataMuxIn10[2] = intdelay_reg_9[2];
  assign DataMuxIn10[3] = intdelay_reg_9[3];
  assign DataMuxIn10[4] = intdelay_reg_9[4];
  assign DataMuxIn10[5] = intdelay_reg_9[5];
  assign DataMuxIn10[6] = intdelay_reg_9[6];
  assign DataMuxIn10[7] = intdelay_reg_9[7];
  assign DataMuxIn10[8] = intdelay_reg_9[8];
  assign intdelay_reg_next_9[0] = DataMuxIn9[0];
  assign intdelay_reg_next_9[1] = DataMuxIn9[1];
  assign intdelay_reg_next_9[2] = DataMuxIn9[2];
  assign intdelay_reg_next_9[3] = DataMuxIn9[3];
  assign intdelay_reg_next_9[4] = DataMuxIn9[4];
  assign intdelay_reg_next_9[5] = DataMuxIn9[5];
  assign intdelay_reg_next_9[6] = DataMuxIn9[6];
  assign intdelay_reg_next_9[7] = DataMuxIn9[7];
  assign intdelay_reg_next_9[8] = DataMuxIn9[8];



  assign dataVector[0] = (horPadCount == 10'b0000000000 ? DataMuxIn1[0] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[0] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[0] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[0] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[0] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[0] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[0] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[0] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[0] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[0] :
              DataMuxIn10[0]))))))))));
  assign dataVector[1] = (horPadCount == 10'b0000000000 ? DataMuxIn1[1] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[1] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[1] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[1] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[1] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[1] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[1] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[1] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[1] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[1] :
              DataMuxIn10[1]))))))))));
  assign dataVector[2] = (horPadCount == 10'b0000000000 ? DataMuxIn1[2] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[2] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[2] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[2] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[2] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[2] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[2] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[2] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[2] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[2] :
              DataMuxIn10[2]))))))))));
  assign dataVector[3] = (horPadCount == 10'b0000000000 ? DataMuxIn1[3] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[3] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[3] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[3] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[3] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[3] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[3] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[3] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[3] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[3] :
              DataMuxIn10[3]))))))))));
  assign dataVector[4] = (horPadCount == 10'b0000000000 ? DataMuxIn1[4] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[4] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[4] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[4] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[4] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[4] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[4] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[4] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[4] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[4] :
              DataMuxIn10[4]))))))))));
  assign dataVector[5] = (horPadCount == 10'b0000000000 ? DataMuxIn1[5] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[5] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[5] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[5] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[5] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[5] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[5] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[5] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[5] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[5] :
              DataMuxIn10[5]))))))))));
  assign dataVector[6] = (horPadCount == 10'b0000000000 ? DataMuxIn1[6] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[6] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[6] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[6] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[6] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[6] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[6] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[6] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[6] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[6] :
              DataMuxIn10[6]))))))))));
  assign dataVector[7] = (horPadCount == 10'b0000000000 ? DataMuxIn1[7] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[7] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[7] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[7] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[7] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[7] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[7] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[7] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[7] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[7] :
              DataMuxIn10[7]))))))))));
  assign dataVector[8] = (horPadCount == 10'b0000000000 ? DataMuxIn1[8] :
              (horPadCount == 10'b0000000001 ? DataMuxIn1_1[8] :
              (horPadCount == 10'b0000000010 ? DataMuxIn2[8] :
              (horPadCount == 10'b0000000011 ? DataMuxIn3[8] :
              (horPadCount == 10'b0000000100 ? DataMuxIn4[8] :
              (horPadCount == 10'b0000000101 ? DataMuxIn5[8] :
              (horPadCount == 10'b0000000110 ? DataMuxIn6[8] :
              (horPadCount == 10'b0000000111 ? DataMuxIn7[8] :
              (horPadCount == 10'b0000001000 ? DataMuxIn8[8] :
              (horPadCount == 10'b0000001001 ? DataMuxIn9[8] :
              DataMuxIn10[8]))))))))));



  assign dataVector_0 = dataVector[0];

  assign dataVector_1 = dataVector[1];

  assign dataVector_2 = dataVector[2];

  assign dataVector_3 = dataVector[3];

  assign dataVector_4 = dataVector[4];

  assign dataVector_5 = dataVector[5];

  assign dataVector_6 = dataVector[6];

  assign dataVector_7 = dataVector[7];

  assign dataVector_8 = dataVector[8];

endmodule  // Bilateral_ip_src_Horizontal_Padder

