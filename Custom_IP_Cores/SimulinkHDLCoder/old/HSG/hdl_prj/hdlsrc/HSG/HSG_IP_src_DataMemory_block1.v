// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_DataMemory_block1.v
// Created: 2018-10-21 17:42:58
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_DataMemory_block1
// Source Path: HSG/HSG/Image Filter1/LineBuffer/DataMemory
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_DataMemory_block1
          (clk,
           reset,
           enb,
           dataIn,
           pushFIFO,
           popFIFO,
           upperPop,
           lineIn,
           lineMask,
           hStartIn,
           load,
           loadingFlag,
           InitializeFlag,
           LoadingPaddingCount,
           dataOut1,
           dataOut2,
           dataOut3,
           dataOut4,
           dataOut5,
           dataOut6,
           allLineStart,
           allNextLineStart,
           allFIFOEmpty,
           halfLoaded);


  input   clk;
  input   reset;
  input   enb;
  input   dataIn;  // ufix1
  input   [5:0] pushFIFO;  // ufix6
  input   [5:0] popFIFO;  // ufix6
  input   [2:0] upperPop;  // ufix3
  input   lineIn;
  input   [5:0] lineMask;  // ufix6
  input   hStartIn;
  input   load;
  input   loadingFlag;
  input   InitializeFlag;
  input   [7:0] LoadingPaddingCount;  // ufix8
  output  dataOut1;  // ufix1
  output  dataOut2;  // ufix1
  output  dataOut3;  // ufix1
  output  dataOut4;  // ufix1
  output  dataOut5;  // ufix1
  output  dataOut6;  // ufix1
  output  allLineStart;
  output  allNextLineStart;
  output  allFIFOEmpty;
  output  [2:0] halfLoaded;  // ufix3

  wire pushIn1;
  wire popIn1;
  wire pushIn2;
  wire popIn2;
  wire pushIn3;
  wire popIn3;
  wire pushIn4;
  wire popIn4;
  wire pushIn5;
  wire popIn5;
  wire pushIn6;
  wire popIn6;
  wire lineFlagInit;
  wire lineFlagIn1;
  wire [7:0] LOADCOUNT;  // ufix8
  wire popEnM;
  wire LineIn1;
  wire isLineStart;
  wire dataLine1;  // ufix1
  wire emptyFlag1;
  wire FIFOEN;
  reg  [0:1] intdelay_reg;  // ufix1 [2]
  wire [0:1] intdelay_reg_next;  // ufix1 [2]
  wire popDelay;
  reg  [0:1] intdelay_reg_1;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_1;  // ufix1 [2]
  wire lineFlagIn2;
  wire lineFlagPushIn2;
  wire [7:0] LOADCOUNT_1;  // ufix8
  wire popEnM2;
  wire LineIn2;
  wire isLineStart_1;
  wire dataLine2;  // ufix1
  wire emptyFlag2;
  wire FIFOEN2;
  reg  [0:1] intdelay_reg_2;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_2;  // ufix1 [2]
  wire popDelay2;
  reg  [0:1] intdelay_reg_3;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_3;  // ufix1 [2]
  wire lineFlagIn3;
  wire lineFlagPushIn3;
  wire [7:0] LOADCOUNT_2;  // ufix8
  wire popEnM3;
  wire LineIn3;
  wire isLineStart_2;
  wire dataLine3;  // ufix1
  wire emptyFlag3;
  wire FIFOEN3;
  reg  [0:1] intdelay_reg_4;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_4;  // ufix1 [2]
  wire popDelay3;
  reg  [0:1] intdelay_reg_5;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_5;  // ufix1 [2]
  wire lineFlagIn4;
  wire lineFlagPushIn4;
  wire [7:0] LOADCOUNT_3;  // ufix8
  wire upperPopEn;
  wire popEnM4;
  wire LineIn4;
  wire isLineStart_3;
  wire dataLine4;  // ufix1
  wire emptyFlag4;
  wire FIFOEN4;
  wire dataPop4;
  reg  [0:1] intdelay_reg_6;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_6;  // ufix1 [2]
  wire popDelay4;
  reg  [0:1] intdelay_reg_7;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_7;  // ufix1 [2]
  wire lineFlagIn5;
  wire lineFlagPushIn5;
  wire [7:0] LOADCOUNT_4;  // ufix8
  wire upperPopEn_1;
  wire popEnM5;
  wire LineIn5;
  wire isLineStart_4;
  wire dataLine5;  // ufix1
  wire emptyFlag5;
  wire FIFOEN5;
  wire dataPop5;
  reg  [0:1] intdelay_reg_8;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_8;  // ufix1 [2]
  wire popDelay5;
  reg  [0:1] intdelay_reg_9;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_9;  // ufix1 [2]
  wire lineFlagIn6;
  wire lineFlagPushIn6;
  wire [7:0] LOADCOUNT_5;  // ufix8
  wire upperPopEn_2;
  wire popEnM6;
  wire LineIn6;
  wire isLineStart_5;
  wire dataLine6;  // ufix1
  wire emptyFlag6;
  wire FIFOEN6;
  wire dataPop6;
  reg  [0:1] intdelay_reg_10;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_10;  // ufix1 [2]
  wire popEnM6_1;
  reg  [0:1] intdelay_reg_11;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_11;  // ufix1 [2]


  HSG_IP_src_PushPopSlicer_block1 u_SLICER (.pushFIFO(pushFIFO),  // ufix6
                                            .popFIFO(popFIFO),  // ufix6
                                            .pushFIFO1(pushIn1),
                                            .popFIFO1(popIn1),
                                            .pushFIFO2(pushIn2),
                                            .popFIFO2(popIn2),
                                            .pushFIFO3(pushIn3),
                                            .popFIFO3(popIn3),
                                            .pushFIFO4(pushIn4),
                                            .popFIFO4(popIn4),
                                            .pushFIFO5(pushIn5),
                                            .popFIFO5(popIn5),
                                            .pushFIFO6(pushIn6),
                                            .popFIFO6(popIn6)
                                            );

  assign lineFlagInit = 1'b0;



  assign lineFlagIn1 = (InitializeFlag == 1'b0 ? lineIn :
              lineFlagInit);



  assign LOADCOUNT = 8'b00000001;



  HSG_IP_src_FIFOLF_block3 u_FIFO1LF (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .LineIn(lineFlagIn1),
                                      .Push(pushIn1),
                                      .Pop(popEnM),
                                      .load(load),
                                      .LineOut(LineIn1)
                                      );

  HSG_IP_src_FIFOLineStart_block1 u_isFIFOLineStart (.clk(clk),
                                                     .reset(reset),
                                                     .enb(enb),
                                                     .lineFlag(LineIn1),
                                                     .load(load),
                                                     .pop(popEnM),
                                                     .isLineStart(isLineStart)
                                                     );

  HSG_IP_src_FIFO_block1 u_FIFO1 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dataIn),  // ufix1
                                  .Push(pushIn1),
                                  .Pop(popEnM),
                                  .load(load),
                                  .dataOut(dataLine1),  // ufix1
                                  .EmptyFlag(emptyFlag1)
                                  );

  HSG_IP_src_advanceFIFO_block1 u_advanceFIFO (.emptyFlag(emptyFlag1),
                                               .hStart(hStartIn),
                                               .isFIFOLineStart(isLineStart),
                                               .loadingFlag(loadingFlag),
                                               .loadingPaddingRunCount(LoadingPaddingCount),  // ufix8
                                               .loadValue(LOADCOUNT),  // ufix8
                                               .popEn(FIFOEN)
                                               );

  assign popEnM = FIFOEN & popIn1;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
        end
      end
    end

  assign popDelay = intdelay_reg[1];
  assign intdelay_reg_next[0] = popEnM;
  assign intdelay_reg_next[1] = intdelay_reg[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 1'b0;
        intdelay_reg_1[1] <= 1'b0;
      end
      else begin
        if (enb && popDelay) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
        end
      end
    end

  assign dataOut1 = intdelay_reg_1[1];
  assign intdelay_reg_next_1[0] = dataLine1;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];



  assign lineFlagIn2 = (InitializeFlag == 1'b0 ? LineIn1 :
              lineFlagInit);



  assign lineFlagPushIn2 = (InitializeFlag == 1'b0 ? popDelay :
              pushIn2);



  assign LOADCOUNT_1 = 8'b00000010;



  HSG_IP_src_FIFOLF_block4 u_FIFOLF2 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .LineIn(lineFlagIn2),
                                      .Push(lineFlagPushIn2),
                                      .Pop(popEnM2),
                                      .load(load),
                                      .LineOut(LineIn2)
                                      );

  HSG_IP_src_FIFOLineStart_block1 u_isFIFOLineStart_1 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .lineFlag(LineIn2),
                                                       .load(load),
                                                       .pop(popEnM2),
                                                       .isLineStart(isLineStart_1)
                                                       );

  HSG_IP_src_FIFO_block1 u_FIFO2 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dataLine1),  // ufix1
                                  .Push(popDelay),
                                  .Pop(popEnM2),
                                  .load(load),
                                  .dataOut(dataLine2),  // ufix1
                                  .EmptyFlag(emptyFlag2)
                                  );

  HSG_IP_src_advanceFIFO_block1 u_advanceFIFO_1 (.emptyFlag(emptyFlag2),
                                                 .hStart(hStartIn),
                                                 .isFIFOLineStart(isLineStart_1),
                                                 .loadingFlag(loadingFlag),
                                                 .loadingPaddingRunCount(LoadingPaddingCount),  // ufix8
                                                 .loadValue(LOADCOUNT_1),  // ufix8
                                                 .popEn(FIFOEN2)
                                                 );

  assign popEnM2 = popIn2 & FIFOEN2;



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
        end
      end
    end

  assign popDelay2 = intdelay_reg_2[1];
  assign intdelay_reg_next_2[0] = popEnM2;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 1'b0;
        intdelay_reg_3[1] <= 1'b0;
      end
      else begin
        if (enb && popDelay2) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
        end
      end
    end

  assign dataOut2 = intdelay_reg_3[1];
  assign intdelay_reg_next_3[0] = dataLine2;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];



  assign lineFlagIn3 = (InitializeFlag == 1'b0 ? LineIn2 :
              lineFlagInit);



  assign lineFlagPushIn3 = (InitializeFlag == 1'b0 ? popDelay2 :
              pushIn3);



  assign LOADCOUNT_2 = 8'b00000011;



  HSG_IP_src_FIFOLF_block4 u_FIFOLF3 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .LineIn(lineFlagIn3),
                                      .Push(lineFlagPushIn3),
                                      .Pop(popEnM3),
                                      .load(load),
                                      .LineOut(LineIn3)
                                      );

  HSG_IP_src_FIFOLineStart_block1 u_isFIFOLineStart_2 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .lineFlag(LineIn3),
                                                       .load(load),
                                                       .pop(popEnM3),
                                                       .isLineStart(isLineStart_2)
                                                       );

  HSG_IP_src_FIFO_block1 u_FIFO3 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dataLine2),  // ufix1
                                  .Push(popDelay2),
                                  .Pop(popEnM3),
                                  .load(load),
                                  .dataOut(dataLine3),  // ufix1
                                  .EmptyFlag(emptyFlag3)
                                  );

  HSG_IP_src_advanceFIFO_block1 u_advanceFIFO_2 (.emptyFlag(emptyFlag3),
                                                 .hStart(hStartIn),
                                                 .isFIFOLineStart(isLineStart_2),
                                                 .loadingFlag(loadingFlag),
                                                 .loadingPaddingRunCount(LoadingPaddingCount),  // ufix8
                                                 .loadValue(LOADCOUNT_2),  // ufix8
                                                 .popEn(FIFOEN3)
                                                 );

  assign popEnM3 = popIn3 & FIFOEN3;



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 1'b0;
        intdelay_reg_4[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_4[0] <= intdelay_reg_next_4[0];
          intdelay_reg_4[1] <= intdelay_reg_next_4[1];
        end
      end
    end

  assign popDelay3 = intdelay_reg_4[1];
  assign intdelay_reg_next_4[0] = popEnM3;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 1'b0;
        intdelay_reg_5[1] <= 1'b0;
      end
      else begin
        if (enb && popDelay3) begin
          intdelay_reg_5[0] <= intdelay_reg_next_5[0];
          intdelay_reg_5[1] <= intdelay_reg_next_5[1];
        end
      end
    end

  assign dataOut3 = intdelay_reg_5[1];
  assign intdelay_reg_next_5[0] = dataLine3;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];



  assign lineFlagIn4 = (InitializeFlag == 1'b0 ? LineIn3 :
              lineFlagInit);



  assign lineFlagPushIn4 = (InitializeFlag == 1'b0 ? popDelay3 :
              pushIn4);



  assign LOADCOUNT_3 = 8'b00000100;



  assign upperPopEn = upperPop[0];



  HSG_IP_src_FIFOLF_block4 u_FIFOLF4 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .LineIn(lineFlagIn4),
                                      .Push(lineFlagPushIn4),
                                      .Pop(popEnM4),
                                      .load(load),
                                      .LineOut(LineIn4)
                                      );

  HSG_IP_src_FIFOLineStart_block1 u_isFIFOLineStart_3 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .lineFlag(LineIn4),
                                                       .load(load),
                                                       .pop(popEnM4),
                                                       .isLineStart(isLineStart_3)
                                                       );

  HSG_IP_src_FIFO_block1 u_FIFO4 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dataLine3),  // ufix1
                                  .Push(popDelay3),
                                  .Pop(popEnM4),
                                  .load(load),
                                  .dataOut(dataLine4),  // ufix1
                                  .EmptyFlag(emptyFlag4)
                                  );

  HSG_IP_src_advanceFIFO_block1 u_advanceFIFO_3 (.emptyFlag(emptyFlag4),
                                                 .hStart(hStartIn),
                                                 .isFIFOLineStart(isLineStart_3),
                                                 .loadingFlag(loadingFlag),
                                                 .loadingPaddingRunCount(LoadingPaddingCount),  // ufix8
                                                 .loadValue(LOADCOUNT_3),  // ufix8
                                                 .popEn(FIFOEN4)
                                                 );

  assign dataPop4 = FIFOEN4 | upperPopEn;



  assign popEnM4 = popIn4 & dataPop4;



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_6[0] <= 1'b0;
        intdelay_reg_6[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_6[0] <= intdelay_reg_next_6[0];
          intdelay_reg_6[1] <= intdelay_reg_next_6[1];
        end
      end
    end

  assign popDelay4 = intdelay_reg_6[1];
  assign intdelay_reg_next_6[0] = popEnM4;
  assign intdelay_reg_next_6[1] = intdelay_reg_6[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        intdelay_reg_7[0] <= 1'b0;
        intdelay_reg_7[1] <= 1'b0;
      end
      else begin
        if (enb && popDelay4) begin
          intdelay_reg_7[0] <= intdelay_reg_next_7[0];
          intdelay_reg_7[1] <= intdelay_reg_next_7[1];
        end
      end
    end

  assign dataOut4 = intdelay_reg_7[1];
  assign intdelay_reg_next_7[0] = dataLine4;
  assign intdelay_reg_next_7[1] = intdelay_reg_7[0];



  assign lineFlagIn5 = (InitializeFlag == 1'b0 ? LineIn4 :
              lineFlagInit);



  assign lineFlagPushIn5 = (InitializeFlag == 1'b0 ? popDelay4 :
              pushIn5);



  assign LOADCOUNT_4 = 8'b00000101;



  assign upperPopEn_1 = upperPop[1];



  HSG_IP_src_FIFOLF_block4 u_FIFOLF5 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .LineIn(lineFlagIn5),
                                      .Push(lineFlagPushIn5),
                                      .Pop(popEnM5),
                                      .load(load),
                                      .LineOut(LineIn5)
                                      );

  HSG_IP_src_FIFOLineStart_block1 u_isFIFOLineStart_4 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .lineFlag(LineIn5),
                                                       .load(load),
                                                       .pop(popEnM5),
                                                       .isLineStart(isLineStart_4)
                                                       );

  HSG_IP_src_FIFO_block1 u_FIFO5 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dataLine4),  // ufix1
                                  .Push(popDelay4),
                                  .Pop(popEnM5),
                                  .load(load),
                                  .dataOut(dataLine5),  // ufix1
                                  .EmptyFlag(emptyFlag5)
                                  );

  HSG_IP_src_advanceFIFO_block1 u_advanceFIFO_4 (.emptyFlag(emptyFlag5),
                                                 .hStart(hStartIn),
                                                 .isFIFOLineStart(isLineStart_4),
                                                 .loadingFlag(loadingFlag),
                                                 .loadingPaddingRunCount(LoadingPaddingCount),  // ufix8
                                                 .loadValue(LOADCOUNT_4),  // ufix8
                                                 .popEn(FIFOEN5)
                                                 );

  assign dataPop5 = FIFOEN5 | upperPopEn_1;



  assign popEnM5 = popIn5 & dataPop5;



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        intdelay_reg_8[0] <= 1'b0;
        intdelay_reg_8[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_8[0] <= intdelay_reg_next_8[0];
          intdelay_reg_8[1] <= intdelay_reg_next_8[1];
        end
      end
    end

  assign popDelay5 = intdelay_reg_8[1];
  assign intdelay_reg_next_8[0] = popEnM5;
  assign intdelay_reg_next_8[1] = intdelay_reg_8[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        intdelay_reg_9[0] <= 1'b0;
        intdelay_reg_9[1] <= 1'b0;
      end
      else begin
        if (enb && popDelay5) begin
          intdelay_reg_9[0] <= intdelay_reg_next_9[0];
          intdelay_reg_9[1] <= intdelay_reg_next_9[1];
        end
      end
    end

  assign dataOut5 = intdelay_reg_9[1];
  assign intdelay_reg_next_9[0] = dataLine5;
  assign intdelay_reg_next_9[1] = intdelay_reg_9[0];



  assign lineFlagIn6 = (InitializeFlag == 1'b0 ? LineIn5 :
              lineFlagInit);



  assign lineFlagPushIn6 = (InitializeFlag == 1'b0 ? popDelay5 :
              pushIn6);



  assign LOADCOUNT_5 = 8'b00000110;



  assign upperPopEn_2 = upperPop[2];



  HSG_IP_src_FIFOLF_block4 u_FIFOLF6 (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .LineIn(lineFlagIn6),
                                      .Push(lineFlagPushIn6),
                                      .Pop(popEnM6),
                                      .load(load),
                                      .LineOut(LineIn6)
                                      );

  HSG_IP_src_FIFOLineStart_block1 u_isFIFOLineStart_5 (.clk(clk),
                                                       .reset(reset),
                                                       .enb(enb),
                                                       .lineFlag(LineIn6),
                                                       .load(load),
                                                       .pop(popEnM6),
                                                       .isLineStart(isLineStart_5)
                                                       );

  HSG_IP_src_FIFO_block1 u_FIFO6 (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dataLine5),  // ufix1
                                  .Push(popDelay5),
                                  .Pop(popEnM6),
                                  .load(load),
                                  .dataOut(dataLine6),  // ufix1
                                  .EmptyFlag(emptyFlag6)
                                  );

  HSG_IP_src_advanceFIFO_block1 u_advanceFIFO_5 (.emptyFlag(emptyFlag6),
                                                 .hStart(hStartIn),
                                                 .isFIFOLineStart(isLineStart_5),
                                                 .loadingFlag(loadingFlag),
                                                 .loadingPaddingRunCount(LoadingPaddingCount),  // ufix8
                                                 .loadValue(LOADCOUNT_5),  // ufix8
                                                 .popEn(FIFOEN6)
                                                 );

  assign dataPop6 = FIFOEN6 | upperPopEn_2;



  assign popEnM6 = popIn6 & dataPop6;



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        intdelay_reg_10[0] <= 1'b0;
        intdelay_reg_10[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          intdelay_reg_10[0] <= intdelay_reg_next_10[0];
          intdelay_reg_10[1] <= intdelay_reg_next_10[1];
        end
      end
    end

  assign popEnM6_1 = intdelay_reg_10[1];
  assign intdelay_reg_next_10[0] = popEnM6;
  assign intdelay_reg_next_10[1] = intdelay_reg_10[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        intdelay_reg_11[0] <= 1'b0;
        intdelay_reg_11[1] <= 1'b0;
      end
      else begin
        if (enb && popEnM6_1) begin
          intdelay_reg_11[0] <= intdelay_reg_next_11[0];
          intdelay_reg_11[1] <= intdelay_reg_next_11[1];
        end
      end
    end

  assign dataOut6 = intdelay_reg_11[1];
  assign intdelay_reg_next_11[0] = dataLine6;
  assign intdelay_reg_next_11[1] = intdelay_reg_11[0];



  assign allLineStart = isLineStart_2 & (isLineStart & isLineStart_1);



  HSG_IP_src_unloadLineMask_block1 u_unloadLineMask (.islineStart1(isLineStart_1),
                                                     .islineStart2(isLineStart_2),
                                                     .islineStart3(isLineStart_3),
                                                     .islineStart4(isLineStart_4),
                                                     .islineStart5(isLineStart_5),
                                                     .lineMask(lineMask),  // ufix6
                                                     .allNextLineStart(allNextLineStart)
                                                     );

  assign allFIFOEmpty = emptyFlag6 & (emptyFlag5 & (emptyFlag4 & (emptyFlag3 & (emptyFlag1 & emptyFlag2))));



  assign halfLoaded = {isLineStart_2, isLineStart_1, isLineStart};



endmodule  // HSG_IP_src_DataMemory_block1

