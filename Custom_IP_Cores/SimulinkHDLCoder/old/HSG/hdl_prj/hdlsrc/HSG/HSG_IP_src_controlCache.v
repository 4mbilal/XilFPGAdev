// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_controlCache.v
// Created: 2018-10-21 17:42:58
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_controlCache
// Source Path: HSG/HSG/Edge Detector/LineBuffer/controlCache
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_controlCache
          (clk,
           reset,
           enb,
           hStartIn,
           hEndIn,
           vStartIn,
           vEndIn,
           validIn,
           load,
           dataEnable,
           Unloading,
           hStartOut,
           hEndOut,
           vStartOut,
           vEndOut,
           validOut,
           hStartFlag,
           hEndFlag,
           vStartFlag,
           vEndFlag,
           Unloading_1);


  input   clk;
  input   reset;
  input   enb;
  input   hStartIn;
  input   hEndIn;
  input   vStartIn;
  input   vEndIn;
  input   validIn;
  input   load;
  input   dataEnable;
  input   Unloading;
  output  hStartOut;
  output  hEndOut;
  output  vStartOut;
  output  vEndOut;
  output  validOut;
  output  hStartFlag;
  output  hEndFlag;
  output  vStartFlag;
  output  vEndFlag;
  output  Unloading_1;

  wire constLow;
  wire hStartREGIn;
  reg  [0:3] intdelay_reg;  // ufix1 [4]
  wire [0:3] intdelay_reg_next;  // ufix1 [4]
  wire hEndREGIn;
  reg  [0:1] intdelay_reg_1;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_1;  // ufix1 [2]
  wire hStartFlag_1;
  wire hEndFREGIn;
  wire vStartREGIn;
  reg  [0:1] intdelay_reg_2;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_2;  // ufix1 [2]
  wire vStartFlag_1;
  wire vStartFREGIn;
  reg  [0:1] intdelay_reg_3;  // ufix1 [2]
  wire [0:1] intdelay_reg_next_3;  // ufix1 [2]
  wire vEndREGIn;
  reg  vEndFlag_1;
  wire vEndFREGIn;
  reg  vEndOut_1;
  wire validREGIn;
  reg  [0:2] intdelay_reg_4;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_4;  // ufix1 [3]
  reg  hStartFlag_2;
  wire unloadREGIn;
  reg  [0:5] intdelay_reg_5;  // ufix1 [6]
  wire [0:5] intdelay_reg_next_5;  // ufix1 [6]
  wire Unloading_2;


  assign constLow = 1'b0;



  assign hStartREGIn = (load == 1'b0 ? hStartIn :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
        intdelay_reg[2] <= 1'b0;
        intdelay_reg[3] <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
          intdelay_reg[3] <= intdelay_reg_next[3];
        end
      end
    end

  assign hStartOut = intdelay_reg[3];
  assign intdelay_reg_next[0] = hStartREGIn;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];
  assign intdelay_reg_next[3] = intdelay_reg[2];



  assign hEndREGIn = (load == 1'b0 ? hEndIn :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 1'b0;
        intdelay_reg_1[1] <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
        end
      end
    end

  assign hStartFlag_1 = intdelay_reg_1[1];
  assign intdelay_reg_next_1[0] = hEndREGIn;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];



  assign hEndFREGIn = (load == 1'b0 ? hStartFlag_1 :
              constLow);



  assign hEndOut = hEndFREGIn;

  assign vStartREGIn = (load == 1'b0 ? vStartIn :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
        end
      end
    end

  assign vStartFlag_1 = intdelay_reg_2[1];
  assign intdelay_reg_next_2[0] = vStartREGIn;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];



  assign vStartFREGIn = (load == 1'b0 ? vStartFlag_1 :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 1'b0;
        intdelay_reg_3[1] <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
        end
      end
    end

  assign vStartOut = intdelay_reg_3[1];
  assign intdelay_reg_next_3[0] = vStartFREGIn;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];



  assign vEndREGIn = (load == 1'b0 ? vEndIn :
              constLow);



  always @(posedge clk or posedge reset)
    begin : alpha1_process
      if (reset == 1'b1) begin
        vEndFlag_1 <= 1'b0;
      end
      else begin
        if (enb && dataEnable) begin
          vEndFlag_1 <= vEndREGIn;
        end
      end
    end



  assign vEndFREGIn = (load == 1'b0 ? vEndFlag_1 :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        vEndOut_1 <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          vEndOut_1 <= vEndFREGIn;
        end
      end
    end



  assign validREGIn = (load == 1'b0 ? validIn :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 1'b0;
        intdelay_reg_4[1] <= 1'b0;
        intdelay_reg_4[2] <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          intdelay_reg_4[0] <= intdelay_reg_next_4[0];
          intdelay_reg_4[1] <= intdelay_reg_next_4[1];
          intdelay_reg_4[2] <= intdelay_reg_next_4[2];
        end
      end
    end

  assign validOut = intdelay_reg_4[2];
  assign intdelay_reg_next_4[0] = validREGIn;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];
  assign intdelay_reg_next_4[2] = intdelay_reg_4[1];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        hStartFlag_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartFlag_2 <= hStartIn;
        end
      end
    end



  assign hEndFlag = hStartFlag_1;

  assign vStartFlag = vStartFlag_1;

  assign vEndFlag = vEndFlag_1;

  assign unloadREGIn = (load == 1'b0 ? Unloading :
              constLow);



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 1'b0;
        intdelay_reg_5[1] <= 1'b0;
        intdelay_reg_5[2] <= 1'b0;
        intdelay_reg_5[3] <= 1'b0;
        intdelay_reg_5[4] <= 1'b0;
        intdelay_reg_5[5] <= 1'b0;
      end
      else begin
        if (enb && dataEnable && enb) begin
          intdelay_reg_5[0] <= intdelay_reg_next_5[0];
          intdelay_reg_5[1] <= intdelay_reg_next_5[1];
          intdelay_reg_5[2] <= intdelay_reg_next_5[2];
          intdelay_reg_5[3] <= intdelay_reg_next_5[3];
          intdelay_reg_5[4] <= intdelay_reg_next_5[4];
          intdelay_reg_5[5] <= intdelay_reg_next_5[5];
        end
      end
    end

  assign Unloading_2 = intdelay_reg_5[5];
  assign intdelay_reg_next_5[0] = unloadREGIn;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];
  assign intdelay_reg_next_5[2] = intdelay_reg_5[1];
  assign intdelay_reg_next_5[3] = intdelay_reg_5[2];
  assign intdelay_reg_next_5[4] = intdelay_reg_5[3];
  assign intdelay_reg_next_5[5] = intdelay_reg_5[4];



  assign vEndOut = vEndOut_1;

  assign hStartFlag = hStartFlag_2;

  assign Unloading_1 = Unloading_2;

endmodule  // HSG_IP_src_controlCache

