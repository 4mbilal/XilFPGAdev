// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\HSG\HSG_IP_src_lineSpaceAverager.v
// Created: 2018-10-21 17:42:58
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HSG_IP_src_lineSpaceAverager
// Source Path: HSG/HSG/Edge Detector/LineBuffer/lineSpaceAverager
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HSG_IP_src_lineSpaceAverager
          (clk,
           reset,
           enb,
           lineSpace,
           lineCountEn,
           lineSpaceAverage);


  input   clk;
  input   reset;
  input   enb;
  input   [11:0] lineSpace;  // ufix12
  input   lineCountEn;
  output  [11:0] lineSpaceAverage;  // ufix12

  reg [11:0] delayOut1;  // ufix12
  reg [11:0] delayOut2;  // ufix12
  wire [12:0] adder_1;  // ufix13
  wire [12:0] adder_2;  // ufix13
  wire [12:0] ADD1;  // ufix13
  reg [11:0] delayOut3;  // ufix12
  reg [11:0] delayOut4;  // ufix12
  wire [12:0] adder_4;  // ufix13
  wire [12:0] adder_5;  // ufix13
  wire [12:0] ADD2;  // ufix13
  wire [13:0] adder_7;  // ufix14
  wire [13:0] adder_8;  // ufix14
  wire [13:0] ADD3;  // ufix14
  wire [17:0] gain_cast;  // ufix18_En4
  wire [13:0] ADD3_1;  // ufix14
  reg [13:0] ADD3_2;  // ufix14


  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        delayOut1 <= 12'b000000000000;
      end
      else begin
        if (enb && lineCountEn) begin
          delayOut1 <= lineSpace;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        delayOut2 <= 12'b000000000000;
      end
      else begin
        if (enb && lineCountEn) begin
          delayOut2 <= delayOut1;
        end
      end
    end



  assign adder_1 = {1'b0, delayOut1};
  assign adder_2 = {1'b0, delayOut2};
  assign ADD1 = adder_1 + adder_2;



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        delayOut3 <= 12'b000000000000;
      end
      else begin
        if (enb && lineCountEn) begin
          delayOut3 <= delayOut2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        delayOut4 <= 12'b000000000000;
      end
      else begin
        if (enb && lineCountEn) begin
          delayOut4 <= delayOut3;
        end
      end
    end



  assign adder_4 = {1'b0, delayOut3};
  assign adder_5 = {1'b0, delayOut4};
  assign ADD2 = adder_4 + adder_5;



  assign adder_7 = {1'b0, ADD1};
  assign adder_8 = {1'b0, ADD2};
  assign ADD3 = adder_7 + adder_8;



  assign gain_cast = {2'b0, {ADD3, 2'b00}};
  assign ADD3_1 = gain_cast[17:4];



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        ADD3_2 <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          ADD3_2 <= ADD3_1;
        end
      end
    end



  assign lineSpaceAverage = ADD3_2[11:0];



endmodule  // HSG_IP_src_lineSpaceAverager

