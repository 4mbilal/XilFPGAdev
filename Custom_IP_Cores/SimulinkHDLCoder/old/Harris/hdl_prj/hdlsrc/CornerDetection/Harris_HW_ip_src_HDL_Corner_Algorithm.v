// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CornerDetection\Harris_HW_ip_src_HDL_Corner_Algorithm.v
// Created: 2020-01-15 11:28:57
// 
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Harris_HW_ip_src_HDL_Corner_Algorithm
// Source Path: CornerDetection/Harris_HW/HDL Corner Algorithm
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Harris_HW_ip_src_HDL_Corner_Algorithm
          (clk,
           reset,
           enb,
           pixelIn_0,
           pixelIn_1,
           pixelIn_2,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           pixelOut_0,
           pixelOut_1,
           pixelOut_2,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] pixelIn_0;  // uint8
  input   [7:0] pixelIn_1;  // uint8
  input   [7:0] pixelIn_2;  // uint8
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  output  [7:0] pixelOut_0;  // uint8
  output  [7:0] pixelOut_1;  // uint8
  output  [7:0] pixelOut_2;  // uint8
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire [7:0] pixelIn [0:2];  // uint8 [3]
  wire [7:0] Transpose_out1 [0:2];  // uint8 [3]
  wire [7:0] Transpose_out1_0;  // uint8
  wire [7:0] Transpose_out1_1;  // uint8
  wire [7:0] Transpose_out1_2;  // uint8
  wire [7:0] delayMatch3_out_1;  // uint8
  reg [7:0] delayMatch3_1_reg [0:4];  // ufix8 [5]
  wire [7:0] delayMatch3_out_2;  // uint8
  wire [7:0] delayMatch3_out_3;  // uint8
  reg [7:0] delayMatch3_1_reg_1 [0:4];  // ufix8 [5]
  reg [7:0] delayMatch3_1_reg_2 [0:4];  // ufix8 [5]
  wire [7:0] delayMatch3_1_reg_next [0:4];  // ufix8 [5]
  wire [7:0] delayMatch3_1_reg_next_1 [0:4];  // ufix8 [5]
  wire [7:0] delayMatch3_1_reg_next_2 [0:4];  // ufix8 [5]
  reg  [0:4] alpha_reg;  // ufix1 [5]
  wire [0:4] alpha_reg_next;  // ufix1 [5]
  wire ctrlIn_hStart_1;
  reg  [0:4] alpha_reg_1;  // ufix1 [5]
  wire [0:4] alpha_reg_next_1;  // ufix1 [5]
  wire ctrlIn_hEnd_1;
  reg  [0:4] alpha_reg_2;  // ufix1 [5]
  wire [0:4] alpha_reg_next_2;  // ufix1 [5]
  wire ctrlIn_vStart_1;
  reg  [0:4] alpha_reg_3;  // ufix1 [5]
  wire [0:4] alpha_reg_next_3;  // ufix1 [5]
  wire ctrlIn_vEnd_1;
  reg  [0:4] alpha_reg_4;  // ufix1 [5]
  wire [0:4] alpha_reg_next_4;  // ufix1 [5]
  wire ctrlIn_valid_1;
  wire [7:0] Constant4_out1;  // uint8
  wire [7:0] RGB2Bin_out1;  // uint8
  wire RGB2Bin_out2_hStart;
  wire RGB2Bin_out2_hEnd;
  wire RGB2Bin_out2_vStart;
  wire RGB2Bin_out2_vEnd;
  wire RGB2Bin_out2_valid;
  wire signed [8:0] Gradients_out1;  // sfix9
  wire signed [8:0] Gradients_out2;  // sfix9
  wire Gradients_out3_hStart;
  wire Gradients_out3_hEnd;
  wire Gradients_out3_vStart;
  wire Gradients_out3_vEnd;
  wire Gradients_out3_valid;
  wire signed [17:0] SquareComp_out1;  // sfix18
  wire signed [17:0] SquareComp_out2;  // sfix18
  wire signed [17:0] SquareComp_out3;  // sfix18
  wire SquareComp_out4_hStart;
  wire SquareComp_out4_hEnd;
  wire SquareComp_out4_vStart;
  wire SquareComp_out4_vEnd;
  wire SquareComp_out4_valid;
  reg  SquareComp_out4_hStart_1;
  reg  SquareComp_out4_hEnd_1;
  reg  SquareComp_out4_vStart_1;
  reg  SquareComp_out4_vEnd_1;
  reg  SquareComp_out4_valid_1;
  wire signed [17:0] GaussianGy_out1;  // sfix18
  wire GaussianGy_out2_hStart;
  wire GaussianGy_out2_hEnd;
  wire GaussianGy_out2_vStart;
  wire GaussianGy_out2_vEnd;
  wire GaussianGy_out2_valid;
  wire signed [17:0] GaussianGyGx_out1;  // sfix18
  wire GaussianGyGx_out2_hStart;
  wire GaussianGyGx_out2_hEnd;
  wire GaussianGyGx_out2_vStart;
  wire GaussianGyGx_out2_vEnd;
  wire GaussianGyGx_out2_valid;
  wire signed [17:0] GaussianGx_out1;  // sfix18
  wire GaussianGx_out2_hStart;
  wire GaussianGx_out2_hEnd;
  wire GaussianGx_out2_vStart;
  wire GaussianGx_out2_vEnd;
  wire GaussianGx_out2_valid;
  wire signed [37:0] det_trace_out1;  // sfix38
  wire det_trace_out2_hStart;
  wire det_trace_out2_hEnd;
  wire det_trace_out2_vStart;
  wire det_trace_out2_vEnd;
  wire det_trace_out2_valid;
  wire [7:0] Convert_Levels_out1;  // uint8
  reg  [0:3] alpha_reg_5;  // ufix1 [4]
  wire [0:3] alpha_reg_next_5;  // ufix1 [4]
  wire det_trace_out2_hStart_1;
  reg  [0:3] alpha_reg_6;  // ufix1 [4]
  wire [0:3] alpha_reg_next_6;  // ufix1 [4]
  wire det_trace_out2_hEnd_1;
  reg  [0:3] alpha_reg_7;  // ufix1 [4]
  wire [0:3] alpha_reg_next_7;  // ufix1 [4]
  wire det_trace_out2_vStart_1;
  reg  [0:3] alpha_reg_8;  // ufix1 [4]
  wire [0:3] alpha_reg_next_8;  // ufix1 [4]
  wire det_trace_out2_vEnd_1;
  reg  [0:3] alpha_reg_9;  // ufix1 [4]
  wire [0:3] alpha_reg_next_9;  // ufix1 [4]
  wire det_trace_out2_valid_1;
  wire [7:0] Pixel_Stream_Aligner_out1_0;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out1_1;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out1_2;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out2;  // uint8
  wire Pixel_Stream_Aligner_out3_hStart;
  wire Pixel_Stream_Aligner_out3_hEnd;
  wire Pixel_Stream_Aligner_out3_vStart;
  wire Pixel_Stream_Aligner_out3_vEnd;
  wire Pixel_Stream_Aligner_out3_valid;
  wire [7:0] Constant1_out1 [0:2];  // uint8 [3]
  wire [7:0] Constant3_out1;  // uint8
  wire [7:0] Overlay_out1_0;  // uint8
  wire [7:0] Overlay_out1_1;  // uint8
  wire [7:0] Overlay_out1_2;  // uint8
  wire Overlay_out2_hStart;
  wire Overlay_out2_hEnd;
  wire Overlay_out2_vStart;
  wire Overlay_out2_vEnd;
  wire Overlay_out2_valid;


  assign pixelIn[0] = pixelIn_0;
  assign pixelIn[1] = pixelIn_1;
  assign pixelIn[2] = pixelIn_2;

  assign Transpose_out1[0] = pixelIn[0];
  assign Transpose_out1[1] = pixelIn[1];
  assign Transpose_out1[2] = pixelIn[2];



  assign Transpose_out1_0 = Transpose_out1[0];

  always @(posedge clk or posedge reset)
    begin : delayMatch3_1_process
      if (reset == 1'b1) begin
        delayMatch3_1_reg[0] <= 8'b00000000;
        delayMatch3_1_reg[1] <= 8'b00000000;
        delayMatch3_1_reg[2] <= 8'b00000000;
        delayMatch3_1_reg[3] <= 8'b00000000;
        delayMatch3_1_reg[4] <= 8'b00000000;
        delayMatch3_1_reg_1[0] <= 8'b00000000;
        delayMatch3_1_reg_1[1] <= 8'b00000000;
        delayMatch3_1_reg_1[2] <= 8'b00000000;
        delayMatch3_1_reg_1[3] <= 8'b00000000;
        delayMatch3_1_reg_1[4] <= 8'b00000000;
        delayMatch3_1_reg_2[0] <= 8'b00000000;
        delayMatch3_1_reg_2[1] <= 8'b00000000;
        delayMatch3_1_reg_2[2] <= 8'b00000000;
        delayMatch3_1_reg_2[3] <= 8'b00000000;
        delayMatch3_1_reg_2[4] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          delayMatch3_1_reg[0] <= delayMatch3_1_reg_next[0];
          delayMatch3_1_reg[1] <= delayMatch3_1_reg_next[1];
          delayMatch3_1_reg[2] <= delayMatch3_1_reg_next[2];
          delayMatch3_1_reg[3] <= delayMatch3_1_reg_next[3];
          delayMatch3_1_reg[4] <= delayMatch3_1_reg_next[4];
          delayMatch3_1_reg_1[0] <= delayMatch3_1_reg_next_1[0];
          delayMatch3_1_reg_1[1] <= delayMatch3_1_reg_next_1[1];
          delayMatch3_1_reg_1[2] <= delayMatch3_1_reg_next_1[2];
          delayMatch3_1_reg_1[3] <= delayMatch3_1_reg_next_1[3];
          delayMatch3_1_reg_1[4] <= delayMatch3_1_reg_next_1[4];
          delayMatch3_1_reg_2[0] <= delayMatch3_1_reg_next_2[0];
          delayMatch3_1_reg_2[1] <= delayMatch3_1_reg_next_2[1];
          delayMatch3_1_reg_2[2] <= delayMatch3_1_reg_next_2[2];
          delayMatch3_1_reg_2[3] <= delayMatch3_1_reg_next_2[3];
          delayMatch3_1_reg_2[4] <= delayMatch3_1_reg_next_2[4];
        end
      end
    end

  assign delayMatch3_1_reg_next[0] = Transpose_out1_0;
  assign delayMatch3_1_reg_next[1] = delayMatch3_1_reg[0];
  assign delayMatch3_1_reg_next[2] = delayMatch3_1_reg[1];
  assign delayMatch3_1_reg_next[3] = delayMatch3_1_reg[2];
  assign delayMatch3_1_reg_next[4] = delayMatch3_1_reg[3];
  assign delayMatch3_out_1 = delayMatch3_1_reg[4];
  assign delayMatch3_1_reg_next_1[0] = Transpose_out1_1;
  assign delayMatch3_1_reg_next_1[1] = delayMatch3_1_reg_1[0];
  assign delayMatch3_1_reg_next_1[2] = delayMatch3_1_reg_1[1];
  assign delayMatch3_1_reg_next_1[3] = delayMatch3_1_reg_1[2];
  assign delayMatch3_1_reg_next_1[4] = delayMatch3_1_reg_1[3];
  assign delayMatch3_out_2 = delayMatch3_1_reg_1[4];
  assign delayMatch3_1_reg_next_2[0] = Transpose_out1_2;
  assign delayMatch3_1_reg_next_2[1] = delayMatch3_1_reg_2[0];
  assign delayMatch3_1_reg_next_2[2] = delayMatch3_1_reg_2[1];
  assign delayMatch3_1_reg_next_2[3] = delayMatch3_1_reg_2[2];
  assign delayMatch3_1_reg_next_2[4] = delayMatch3_1_reg_2[3];
  assign delayMatch3_out_3 = delayMatch3_1_reg_2[4];



  assign Transpose_out1_1 = Transpose_out1[1];

  assign Transpose_out1_2 = Transpose_out1[2];

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        alpha_reg[0] <= 1'b0;
        alpha_reg[1] <= 1'b0;
        alpha_reg[2] <= 1'b0;
        alpha_reg[3] <= 1'b0;
        alpha_reg[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg[0] <= alpha_reg_next[0];
          alpha_reg[1] <= alpha_reg_next[1];
          alpha_reg[2] <= alpha_reg_next[2];
          alpha_reg[3] <= alpha_reg_next[3];
          alpha_reg[4] <= alpha_reg_next[4];
        end
      end
    end

  assign ctrlIn_hStart_1 = alpha_reg[4];
  assign alpha_reg_next[0] = ctrlIn_hStart;
  assign alpha_reg_next[1] = alpha_reg[0];
  assign alpha_reg_next[2] = alpha_reg[1];
  assign alpha_reg_next[3] = alpha_reg[2];
  assign alpha_reg_next[4] = alpha_reg[3];



  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        alpha_reg_1[0] <= 1'b0;
        alpha_reg_1[1] <= 1'b0;
        alpha_reg_1[2] <= 1'b0;
        alpha_reg_1[3] <= 1'b0;
        alpha_reg_1[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_1[0] <= alpha_reg_next_1[0];
          alpha_reg_1[1] <= alpha_reg_next_1[1];
          alpha_reg_1[2] <= alpha_reg_next_1[2];
          alpha_reg_1[3] <= alpha_reg_next_1[3];
          alpha_reg_1[4] <= alpha_reg_next_1[4];
        end
      end
    end

  assign ctrlIn_hEnd_1 = alpha_reg_1[4];
  assign alpha_reg_next_1[0] = ctrlIn_hEnd;
  assign alpha_reg_next_1[1] = alpha_reg_1[0];
  assign alpha_reg_next_1[2] = alpha_reg_1[1];
  assign alpha_reg_next_1[3] = alpha_reg_1[2];
  assign alpha_reg_next_1[4] = alpha_reg_1[3];



  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        alpha_reg_2[0] <= 1'b0;
        alpha_reg_2[1] <= 1'b0;
        alpha_reg_2[2] <= 1'b0;
        alpha_reg_2[3] <= 1'b0;
        alpha_reg_2[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_2[0] <= alpha_reg_next_2[0];
          alpha_reg_2[1] <= alpha_reg_next_2[1];
          alpha_reg_2[2] <= alpha_reg_next_2[2];
          alpha_reg_2[3] <= alpha_reg_next_2[3];
          alpha_reg_2[4] <= alpha_reg_next_2[4];
        end
      end
    end

  assign ctrlIn_vStart_1 = alpha_reg_2[4];
  assign alpha_reg_next_2[0] = ctrlIn_vStart;
  assign alpha_reg_next_2[1] = alpha_reg_2[0];
  assign alpha_reg_next_2[2] = alpha_reg_2[1];
  assign alpha_reg_next_2[3] = alpha_reg_2[2];
  assign alpha_reg_next_2[4] = alpha_reg_2[3];



  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        alpha_reg_3[0] <= 1'b0;
        alpha_reg_3[1] <= 1'b0;
        alpha_reg_3[2] <= 1'b0;
        alpha_reg_3[3] <= 1'b0;
        alpha_reg_3[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_3[0] <= alpha_reg_next_3[0];
          alpha_reg_3[1] <= alpha_reg_next_3[1];
          alpha_reg_3[2] <= alpha_reg_next_3[2];
          alpha_reg_3[3] <= alpha_reg_next_3[3];
          alpha_reg_3[4] <= alpha_reg_next_3[4];
        end
      end
    end

  assign ctrlIn_vEnd_1 = alpha_reg_3[4];
  assign alpha_reg_next_3[0] = ctrlIn_vEnd;
  assign alpha_reg_next_3[1] = alpha_reg_3[0];
  assign alpha_reg_next_3[2] = alpha_reg_3[1];
  assign alpha_reg_next_3[3] = alpha_reg_3[2];
  assign alpha_reg_next_3[4] = alpha_reg_3[3];



  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        alpha_reg_4[0] <= 1'b0;
        alpha_reg_4[1] <= 1'b0;
        alpha_reg_4[2] <= 1'b0;
        alpha_reg_4[3] <= 1'b0;
        alpha_reg_4[4] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_4[0] <= alpha_reg_next_4[0];
          alpha_reg_4[1] <= alpha_reg_next_4[1];
          alpha_reg_4[2] <= alpha_reg_next_4[2];
          alpha_reg_4[3] <= alpha_reg_next_4[3];
          alpha_reg_4[4] <= alpha_reg_next_4[4];
        end
      end
    end

  assign ctrlIn_valid_1 = alpha_reg_4[4];
  assign alpha_reg_next_4[0] = ctrlIn_valid;
  assign alpha_reg_next_4[1] = alpha_reg_4[0];
  assign alpha_reg_next_4[2] = alpha_reg_4[1];
  assign alpha_reg_next_4[3] = alpha_reg_4[2];
  assign alpha_reg_next_4[4] = alpha_reg_4[3];



  assign Constant4_out1 = 8'b11010010;



  Harris_HW_ip_src_RGB2Bin u_RGB2Bin (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .pixelIn_0(pixelIn_0),  // uint8
                                      .pixelIn_1(pixelIn_1),  // uint8
                                      .pixelIn_2(pixelIn_2),  // uint8
                                      .ctrlIn_hStart(ctrlIn_hStart),
                                      .ctrlIn_hEnd(ctrlIn_hEnd),
                                      .ctrlIn_vStart(ctrlIn_vStart),
                                      .ctrlIn_vEnd(ctrlIn_vEnd),
                                      .ctrlIn_valid(ctrlIn_valid),
                                      .SliceLevel(Constant4_out1),  // uint8
                                      .pixelOut(RGB2Bin_out1),  // uint8
                                      .ctrlOut_hStart(RGB2Bin_out2_hStart),
                                      .ctrlOut_hEnd(RGB2Bin_out2_hEnd),
                                      .ctrlOut_vStart(RGB2Bin_out2_vStart),
                                      .ctrlOut_vEnd(RGB2Bin_out2_vEnd),
                                      .ctrlOut_valid(RGB2Bin_out2_valid)
                                      );

  Harris_HW_ip_src_Gradients u_Gradients (.clk(clk),
                                          .reset(reset),
                                          .enb(enb),
                                          .pixel(RGB2Bin_out1),  // uint8
                                          .ctrl_hStart(RGB2Bin_out2_hStart),
                                          .ctrl_hEnd(RGB2Bin_out2_hEnd),
                                          .ctrl_vStart(RGB2Bin_out2_vStart),
                                          .ctrl_vEnd(RGB2Bin_out2_vEnd),
                                          .ctrl_valid(RGB2Bin_out2_valid),
                                          .GradY(Gradients_out1),  // sfix9
                                          .GradX(Gradients_out2),  // sfix9
                                          .ctrlOut_hStart(Gradients_out3_hStart),
                                          .ctrlOut_hEnd(Gradients_out3_hEnd),
                                          .ctrlOut_vStart(Gradients_out3_vStart),
                                          .ctrlOut_vEnd(Gradients_out3_vEnd),
                                          .ctrlOut_valid(Gradients_out3_valid)
                                          );

  Harris_HW_ip_src_SquareComp u_SquareComp (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .Gy(Gradients_out1),  // sfix9
                                            .Gx(Gradients_out2),  // sfix9
                                            .ctrl_hStart(Gradients_out3_hStart),
                                            .ctrl_hEnd(Gradients_out3_hEnd),
                                            .ctrl_vStart(Gradients_out3_vStart),
                                            .ctrl_vEnd(Gradients_out3_vEnd),
                                            .ctrl_valid(Gradients_out3_valid),
                                            .GySquared(SquareComp_out1),  // sfix18
                                            .GyGx(SquareComp_out2),  // sfix18
                                            .GxSquared(SquareComp_out3),  // sfix18
                                            .ctrlOut_hStart(SquareComp_out4_hStart),
                                            .ctrlOut_hEnd(SquareComp_out4_hEnd),
                                            .ctrlOut_vStart(SquareComp_out4_vStart),
                                            .ctrlOut_vEnd(SquareComp_out4_vEnd),
                                            .ctrlOut_valid(SquareComp_out4_valid)
                                            );

  always @(posedge clk or posedge reset)
    begin : c_5_process
      if (reset == 1'b1) begin
        SquareComp_out4_hStart_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          SquareComp_out4_hStart_1 <= SquareComp_out4_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_6_process
      if (reset == 1'b1) begin
        SquareComp_out4_hEnd_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          SquareComp_out4_hEnd_1 <= SquareComp_out4_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_7_process
      if (reset == 1'b1) begin
        SquareComp_out4_vStart_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          SquareComp_out4_vStart_1 <= SquareComp_out4_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_8_process
      if (reset == 1'b1) begin
        SquareComp_out4_vEnd_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          SquareComp_out4_vEnd_1 <= SquareComp_out4_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_9_process
      if (reset == 1'b1) begin
        SquareComp_out4_valid_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          SquareComp_out4_valid_1 <= SquareComp_out4_valid;
        end
      end
    end



  Harris_HW_ip_src_GaussianGy u_GaussianGy (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .in0(SquareComp_out1),  // sfix18
                                            .in1_hStart(SquareComp_out4_hStart_1),
                                            .in1_hEnd(SquareComp_out4_hEnd_1),
                                            .in1_vStart(SquareComp_out4_vStart_1),
                                            .in1_vEnd(SquareComp_out4_vEnd_1),
                                            .in1_valid(SquareComp_out4_valid_1),
                                            .out0(GaussianGy_out1),  // sfix18
                                            .out1_hStart(GaussianGy_out2_hStart),
                                            .out1_hEnd(GaussianGy_out2_hEnd),
                                            .out1_vStart(GaussianGy_out2_vStart),
                                            .out1_vEnd(GaussianGy_out2_vEnd),
                                            .out1_valid(GaussianGy_out2_valid)
                                            );

  Harris_HW_ip_src_GaussianGyGx u_GaussianGyGx (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .in0(SquareComp_out2),  // sfix18
                                                .in1_hStart(SquareComp_out4_hStart_1),
                                                .in1_hEnd(SquareComp_out4_hEnd_1),
                                                .in1_vStart(SquareComp_out4_vStart_1),
                                                .in1_vEnd(SquareComp_out4_vEnd_1),
                                                .in1_valid(SquareComp_out4_valid_1),
                                                .out0(GaussianGyGx_out1),  // sfix18
                                                .out1_hStart(GaussianGyGx_out2_hStart),
                                                .out1_hEnd(GaussianGyGx_out2_hEnd),
                                                .out1_vStart(GaussianGyGx_out2_vStart),
                                                .out1_vEnd(GaussianGyGx_out2_vEnd),
                                                .out1_valid(GaussianGyGx_out2_valid)
                                                );

  Harris_HW_ip_src_GaussianGx u_GaussianGx (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .in0(SquareComp_out3),  // sfix18
                                            .in1_hStart(SquareComp_out4_hStart_1),
                                            .in1_hEnd(SquareComp_out4_hEnd_1),
                                            .in1_vStart(SquareComp_out4_vStart_1),
                                            .in1_vEnd(SquareComp_out4_vEnd_1),
                                            .in1_valid(SquareComp_out4_valid_1),
                                            .out0(GaussianGx_out1),  // sfix18
                                            .out1_hStart(GaussianGx_out2_hStart),
                                            .out1_hEnd(GaussianGx_out2_hEnd),
                                            .out1_vStart(GaussianGx_out2_vStart),
                                            .out1_vEnd(GaussianGx_out2_vEnd),
                                            .out1_valid(GaussianGx_out2_valid)
                                            );

  Harris_HW_ip_src_det_trace u_det_trace (.clk(clk),
                                          .reset(reset),
                                          .enb(enb),
                                          .Gy2(GaussianGy_out1),  // sfix18
                                          .GyGx(GaussianGyGx_out1),  // sfix18
                                          .Gx2(GaussianGx_out1),  // sfix18
                                          .ctrl_hStart(GaussianGx_out2_hStart),
                                          .ctrl_hEnd(GaussianGx_out2_hEnd),
                                          .ctrl_vStart(GaussianGx_out2_vStart),
                                          .ctrl_vEnd(GaussianGx_out2_vEnd),
                                          .ctrl_valid(GaussianGx_out2_valid),
                                          .HarrisOut(det_trace_out1),  // sfix38
                                          .ctrlOut_hStart(det_trace_out2_hStart),
                                          .ctrlOut_hEnd(det_trace_out2_hEnd),
                                          .ctrlOut_vStart(det_trace_out2_vStart),
                                          .ctrlOut_vEnd(det_trace_out2_vEnd),
                                          .ctrlOut_valid(det_trace_out2_valid)
                                          );

  Harris_HW_ip_src_Convert_Levels u_Convert_Levels (.clk(clk),
                                                    .reset(reset),
                                                    .enb(enb),
                                                    .HarrisIn(det_trace_out1),  // sfix38
                                                    .PixelOut(Convert_Levels_out1)  // uint8
                                                    );

  always @(posedge clk or posedge reset)
    begin : c_10_process
      if (reset == 1'b1) begin
        alpha_reg_5[0] <= 1'b0;
        alpha_reg_5[1] <= 1'b0;
        alpha_reg_5[2] <= 1'b0;
        alpha_reg_5[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_5[0] <= alpha_reg_next_5[0];
          alpha_reg_5[1] <= alpha_reg_next_5[1];
          alpha_reg_5[2] <= alpha_reg_next_5[2];
          alpha_reg_5[3] <= alpha_reg_next_5[3];
        end
      end
    end

  assign det_trace_out2_hStart_1 = alpha_reg_5[3];
  assign alpha_reg_next_5[0] = det_trace_out2_hStart;
  assign alpha_reg_next_5[1] = alpha_reg_5[0];
  assign alpha_reg_next_5[2] = alpha_reg_5[1];
  assign alpha_reg_next_5[3] = alpha_reg_5[2];



  always @(posedge clk or posedge reset)
    begin : c_11_process
      if (reset == 1'b1) begin
        alpha_reg_6[0] <= 1'b0;
        alpha_reg_6[1] <= 1'b0;
        alpha_reg_6[2] <= 1'b0;
        alpha_reg_6[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_6[0] <= alpha_reg_next_6[0];
          alpha_reg_6[1] <= alpha_reg_next_6[1];
          alpha_reg_6[2] <= alpha_reg_next_6[2];
          alpha_reg_6[3] <= alpha_reg_next_6[3];
        end
      end
    end

  assign det_trace_out2_hEnd_1 = alpha_reg_6[3];
  assign alpha_reg_next_6[0] = det_trace_out2_hEnd;
  assign alpha_reg_next_6[1] = alpha_reg_6[0];
  assign alpha_reg_next_6[2] = alpha_reg_6[1];
  assign alpha_reg_next_6[3] = alpha_reg_6[2];



  always @(posedge clk or posedge reset)
    begin : c_12_process
      if (reset == 1'b1) begin
        alpha_reg_7[0] <= 1'b0;
        alpha_reg_7[1] <= 1'b0;
        alpha_reg_7[2] <= 1'b0;
        alpha_reg_7[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_7[0] <= alpha_reg_next_7[0];
          alpha_reg_7[1] <= alpha_reg_next_7[1];
          alpha_reg_7[2] <= alpha_reg_next_7[2];
          alpha_reg_7[3] <= alpha_reg_next_7[3];
        end
      end
    end

  assign det_trace_out2_vStart_1 = alpha_reg_7[3];
  assign alpha_reg_next_7[0] = det_trace_out2_vStart;
  assign alpha_reg_next_7[1] = alpha_reg_7[0];
  assign alpha_reg_next_7[2] = alpha_reg_7[1];
  assign alpha_reg_next_7[3] = alpha_reg_7[2];



  always @(posedge clk or posedge reset)
    begin : c_13_process
      if (reset == 1'b1) begin
        alpha_reg_8[0] <= 1'b0;
        alpha_reg_8[1] <= 1'b0;
        alpha_reg_8[2] <= 1'b0;
        alpha_reg_8[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_8[0] <= alpha_reg_next_8[0];
          alpha_reg_8[1] <= alpha_reg_next_8[1];
          alpha_reg_8[2] <= alpha_reg_next_8[2];
          alpha_reg_8[3] <= alpha_reg_next_8[3];
        end
      end
    end

  assign det_trace_out2_vEnd_1 = alpha_reg_8[3];
  assign alpha_reg_next_8[0] = det_trace_out2_vEnd;
  assign alpha_reg_next_8[1] = alpha_reg_8[0];
  assign alpha_reg_next_8[2] = alpha_reg_8[1];
  assign alpha_reg_next_8[3] = alpha_reg_8[2];



  always @(posedge clk or posedge reset)
    begin : c_14_process
      if (reset == 1'b1) begin
        alpha_reg_9[0] <= 1'b0;
        alpha_reg_9[1] <= 1'b0;
        alpha_reg_9[2] <= 1'b0;
        alpha_reg_9[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_9[0] <= alpha_reg_next_9[0];
          alpha_reg_9[1] <= alpha_reg_next_9[1];
          alpha_reg_9[2] <= alpha_reg_next_9[2];
          alpha_reg_9[3] <= alpha_reg_next_9[3];
        end
      end
    end

  assign det_trace_out2_valid_1 = alpha_reg_9[3];
  assign alpha_reg_next_9[0] = det_trace_out2_valid;
  assign alpha_reg_next_9[1] = alpha_reg_9[0];
  assign alpha_reg_next_9[2] = alpha_reg_9[1];
  assign alpha_reg_next_9[3] = alpha_reg_9[2];



  Harris_HW_ip_src_Pixel_Stream_Aligner u_Pixel_Stream_Aligner (.clk(clk),
                                                                .reset(reset),
                                                                .enb(enb),
                                                                .in0_0(delayMatch3_out_1),  // uint8
                                                                .in0_1(delayMatch3_out_2),  // uint8
                                                                .in0_2(delayMatch3_out_3),  // uint8
                                                                .in1_hStart(ctrlIn_hStart_1),
                                                                .in1_hEnd(ctrlIn_hEnd_1),
                                                                .in1_vStart(ctrlIn_vStart_1),
                                                                .in1_vEnd(ctrlIn_vEnd_1),
                                                                .in1_valid(ctrlIn_valid_1),
                                                                .in2(Convert_Levels_out1),  // uint8
                                                                .in3_hStart(det_trace_out2_hStart_1),
                                                                .in3_hEnd(det_trace_out2_hEnd_1),
                                                                .in3_vStart(det_trace_out2_vStart_1),
                                                                .in3_vEnd(det_trace_out2_vEnd_1),
                                                                .in3_valid(det_trace_out2_valid_1),
                                                                .out0_0(Pixel_Stream_Aligner_out1_0),  // uint8
                                                                .out0_1(Pixel_Stream_Aligner_out1_1),  // uint8
                                                                .out0_2(Pixel_Stream_Aligner_out1_2),  // uint8
                                                                .out1(Pixel_Stream_Aligner_out2),  // uint8
                                                                .out2_hStart(Pixel_Stream_Aligner_out3_hStart),
                                                                .out2_hEnd(Pixel_Stream_Aligner_out3_hEnd),
                                                                .out2_vStart(Pixel_Stream_Aligner_out3_vStart),
                                                                .out2_vEnd(Pixel_Stream_Aligner_out3_vEnd),
                                                                .out2_valid(Pixel_Stream_Aligner_out3_valid)
                                                                );

  assign Constant1_out1[0] = 8'b00000000;
  assign Constant1_out1[1] = 8'b11111111;
  assign Constant1_out1[2] = 8'b00000000;



  assign Constant3_out1 = 8'b01000110;



  Harris_HW_ip_src_Overlay u_Overlay (.clk(clk),
                                      .reset(reset),
                                      .enb(enb),
                                      .RGBIn_0(Pixel_Stream_Aligner_out1_0),  // uint8
                                      .RGBIn_1(Pixel_Stream_Aligner_out1_1),  // uint8
                                      .RGBIn_2(Pixel_Stream_Aligner_out1_2),  // uint8
                                      .BinaryIn(Pixel_Stream_Aligner_out2),  // uint8
                                      .OverlayRGB_0(Constant1_out1[0]),  // uint8
                                      .OverlayRGB_1(Constant1_out1[1]),  // uint8
                                      .OverlayRGB_2(Constant1_out1[2]),  // uint8
                                      .OverlayTransp(Constant3_out1),  // uint8
                                      .CtrlIn_hStart(Pixel_Stream_Aligner_out3_hStart),
                                      .CtrlIn_hEnd(Pixel_Stream_Aligner_out3_hEnd),
                                      .CtrlIn_vStart(Pixel_Stream_Aligner_out3_vStart),
                                      .CtrlIn_vEnd(Pixel_Stream_Aligner_out3_vEnd),
                                      .CtrlIn_valid(Pixel_Stream_Aligner_out3_valid),
                                      .RGBout_0(Overlay_out1_0),  // uint8
                                      .RGBout_1(Overlay_out1_1),  // uint8
                                      .RGBout_2(Overlay_out1_2),  // uint8
                                      .CtrlOut_hStart(Overlay_out2_hStart),
                                      .CtrlOut_hEnd(Overlay_out2_hEnd),
                                      .CtrlOut_vStart(Overlay_out2_vStart),
                                      .CtrlOut_vEnd(Overlay_out2_vEnd),
                                      .CtrlOut_valid(Overlay_out2_valid)
                                      );

  assign pixelOut_0 = Overlay_out1_0;

  assign pixelOut_1 = Overlay_out1_1;

  assign pixelOut_2 = Overlay_out1_2;

  assign ctrlOut_hStart = Overlay_out2_hStart;

  assign ctrlOut_hEnd = Overlay_out2_hEnd;

  assign ctrlOut_vStart = Overlay_out2_vStart;

  assign ctrlOut_vEnd = Overlay_out2_vEnd;

  assign ctrlOut_valid = Overlay_out2_valid;

endmodule  // Harris_HW_ip_src_HDL_Corner_Algorithm

